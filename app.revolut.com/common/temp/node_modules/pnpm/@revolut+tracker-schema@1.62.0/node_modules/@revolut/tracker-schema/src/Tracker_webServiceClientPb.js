"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for revolut.tracking
 * @enhanceable
 * @public
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebTrackerClient = void 0;
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var grpcWeb = require("grpc-web");
var tracker_common_pb = require("./tracker_common_pb");
var WebTrackerClient = /** @class */ (function () {
    function WebTrackerClient(hostname, credentials, options) {
        this.methodInfoRecordCOAWebEvent = new grpcWeb.AbstractClientBase.MethodInfo(tracker_common_pb.Response, function (request) {
            return request.serializeBinary();
        }, tracker_common_pb.Response.deserializeBinary);
        this.methodInfoRecordCOAWebEventBusiness = new grpcWeb.AbstractClientBase.MethodInfo(tracker_common_pb.Response, function (request) {
            return request.serializeBinary();
        }, tracker_common_pb.Response.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'binary';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname;
        this.credentials_ = credentials;
        this.options_ = options;
    }
    WebTrackerClient.prototype.recordCOAWebEvent = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/revolut.tracking.WebTracker/RecordCOAWebEvent', request, metadata || {}, this.methodInfoRecordCOAWebEvent, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/revolut.tracking.WebTracker/RecordCOAWebEvent', request, metadata || {}, this.methodInfoRecordCOAWebEvent);
    };
    WebTrackerClient.prototype.recordCOAWebEventBusiness = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/revolut.tracking.WebTracker/RecordCOAWebEventBusiness', request, metadata || {}, this.methodInfoRecordCOAWebEventBusiness, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/revolut.tracking.WebTracker/RecordCOAWebEventBusiness', request, metadata || {}, this.methodInfoRecordCOAWebEventBusiness);
    };
    return WebTrackerClient;
}());
exports.WebTrackerClient = WebTrackerClient;
