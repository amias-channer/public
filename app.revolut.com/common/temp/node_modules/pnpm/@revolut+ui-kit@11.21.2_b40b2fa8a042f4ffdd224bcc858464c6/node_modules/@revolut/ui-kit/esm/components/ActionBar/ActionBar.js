/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext, useRef, useState } from 'react';
import * as Icons from '@revolut/icons';
import { Color, Space } from "../../constants";
import { useMessage } from "../../hooks";
import { Action } from "../Action";
import { MoreBarProvider, MoreBarVisibleIndexContext } from "../MoreBar";
import { Bar } from "../Bar";
import { Box } from "../Box";
import { Flex } from "../Flex";
import { Dropdown } from "../Dropdown";
import { Ellipsis } from "../Ellipsis";

var RestActions = function RestActions(_ref) {
  var children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["children"]);

  var ref = useRef(null);

  var _useState = useState(false),
      isOpen = _useState[0],
      setOpen = _useState[1];

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Action, _extends({
    ref: ref,
    onClick: function onClick() {
      setOpen(!isOpen);
    },
    useIcon: Icons.MoreIOs
  }, rest)), /*#__PURE__*/React.createElement(Dropdown, {
    isOpen: isOpen,
    anchorRef: ref,
    onClickAway: function onClickAway() {
      return setOpen(false);
    }
  }, children));
};

export function ActionBar(_ref2) {
  var fallbackGap = _ref2.fallbackGap,
      children = _ref2.children,
      labelMoreButton = _ref2.labelMoreButton,
      rest = _objectWithoutPropertiesLoose(_ref2, ["fallbackGap", "children", "labelMoreButton"]);

  var m = useMessage();

  var _useState2 = useState(null),
      barElement = _useState2[0],
      setBarElement = _useState2[1];

  return /*#__PURE__*/React.createElement(Bar, _extends({
    ref: setBarElement,
    maxWidth: "100%"
  }, rest), children, /*#__PURE__*/React.createElement(MoreBarProvider, {
    barElement: barElement,
    fallbackGap: fallbackGap
  }, /*#__PURE__*/React.createElement(RestActions, {
    "aria-label": labelMoreButton != null ? labelMoreButton : m('action.more')
  }, children)));
}

function ActionBarItem(_ref3) {
  var Icon = _ref3.useIcon,
      children = _ref3.children,
      _ref3$color = _ref3.color,
      color = _ref3$color === void 0 ? Color.BLUE : _ref3$color,
      rest = _objectWithoutPropertiesLoose(_ref3, ["useIcon", "children", "color"]);

  var visibleIndex = useContext(MoreBarVisibleIndexContext);

  if (visibleIndex !== null) {
    var _ref4;

    return /*#__PURE__*/React.createElement(Dropdown.Item, _extends({
      use: "button",
      __css: (_ref4 = {}, _ref4[":nth-of-type(-n + " + (visibleIndex + 1) + ")"] = {
        display: 'none'
      }, _ref4)
    }, rest), /*#__PURE__*/React.createElement(Flex, {
      alignItems: "center",
      color: color
    }, Icon && /*#__PURE__*/React.createElement(Icon, {
      size: 16
    }), Icon && children != null ? /*#__PURE__*/React.createElement(Box, {
      ml: Space.S_8
    }, children) : children));
  }

  return /*#__PURE__*/React.createElement(Action, _extends({
    useIcon: Icon,
    color: color
  }, rest), children && /*#__PURE__*/React.createElement(Ellipsis, null, children));
}

ActionBar.Item = ActionBarItem;