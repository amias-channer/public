/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { css } from '@styled-system/css';
import { justifySelf } from 'styled-system';
import createSlots from 'nano-slots';
import { Color, Space, TextStyle } from "../../constants";
import { themeTextStyle } from "../../utils";
import { Widget } from "../Widget";
import { Text } from "../Text";
import { Bar } from "../Bar";
import { Box } from "../Box";
var Grid = /*#__PURE__*/styled(Box).withConfig({
  displayName: "ActionWidget__Grid",
  componentId: "g9laoy-0"
})(css({
  display: 'grid',
  columnGap: Space.S_8,
  rowGap: Space.S_8,
  gridAutoColumns: 'auto',
  '&[aria-orientation=horizontal]': {
    gridAutoFlow: 'column'
  },
  '&[aria-orientation=vertical]': {
    gridAutoFlow: 'row'
  }
}));
var ActionWidgetSlotNames;

(function (ActionWidgetSlotNames) {
  ActionWidgetSlotNames[ActionWidgetSlotNames["TITLE"] = 0] = "TITLE";
  ActionWidgetSlotNames[ActionWidgetSlotNames["CONTENT"] = 1] = "CONTENT";
  ActionWidgetSlotNames[ActionWidgetSlotNames["AVATAR"] = 2] = "AVATAR";
  ActionWidgetSlotNames[ActionWidgetSlotNames["ACTIONS"] = 3] = "ACTIONS";
})(ActionWidgetSlotNames || (ActionWidgetSlotNames = {}));

var ActionWidgetSlots = createSlots();
var ActionWidgetBase = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["children"]);

  return /*#__PURE__*/React.createElement(ActionWidgetSlots.Provider, null, /*#__PURE__*/React.createElement(Widget, _extends({
    ref: ref
  }, rest), /*#__PURE__*/React.createElement(Grid, {
    "aria-orientation": "vertical",
    p: Space.S_16
  }, /*#__PURE__*/React.createElement(Grid, {
    "aria-orientation": "horizontal"
  }, /*#__PURE__*/React.createElement(Grid, {
    "aria-orientation": "vertical"
  }, /*#__PURE__*/React.createElement(ActionWidgetSlots.Slot, {
    name: ActionWidgetSlotNames.TITLE
  }), /*#__PURE__*/React.createElement(ActionWidgetSlots.Slot, {
    name: ActionWidgetSlotNames.CONTENT
  })), /*#__PURE__*/React.createElement(ActionWidgetSlots.Slot, {
    name: ActionWidgetSlotNames.AVATAR
  })), children)));
});

var ActionWidgetContentBase = function ActionWidgetContentBase(props) {
  return /*#__PURE__*/React.createElement(Text, _extends({
    use: "div",
    variant: TextStyle.CAPTION,
    color: Color.GREY_TONE_50
  }, props));
};

var ActionWidgetContent = function ActionWidgetContent(props) {
  return /*#__PURE__*/React.createElement(ActionWidgetSlots.Fill, {
    name: ActionWidgetSlotNames.CONTENT
  }, /*#__PURE__*/React.createElement(ActionWidgetContentBase, props));
};

var ActionWidgetTitleBase = /*#__PURE__*/styled(Text).withConfig({
  displayName: "ActionWidget__ActionWidgetTitleBase",
  componentId: "g9laoy-1"
})(themeTextStyle(TextStyle.PRIMARY), {
  alignSelf: 'center'
});

var ActionWidgetTitle = function ActionWidgetTitle(props) {
  return /*#__PURE__*/React.createElement(ActionWidgetSlots.Fill, {
    name: ActionWidgetSlotNames.TITLE
  }, /*#__PURE__*/React.createElement(ActionWidgetTitleBase, props));
};

var ActionWidgetActions = /*#__PURE__*/styled(Bar).withConfig({
  displayName: "ActionWidget__ActionWidgetActions",
  componentId: "g9laoy-2"
})(justifySelf, css({
  overflow: 'auto'
}));
var ActionWidgetAvatarBase = /*#__PURE__*/styled(Box).withConfig({
  displayName: "ActionWidget__ActionWidgetAvatarBase",
  componentId: "g9laoy-3"
})({
  justifySelf: 'end'
});

var ActionWidgetAvatar = function ActionWidgetAvatar(props) {
  return /*#__PURE__*/React.createElement(ActionWidgetSlots.Fill, {
    name: ActionWidgetSlotNames.AVATAR
  }, /*#__PURE__*/React.createElement(ActionWidgetAvatarBase, props));
};

export var ActionWidget = Object.assign(ActionWidgetBase, {
  Title: ActionWidgetTitle,
  Content: ActionWidgetContent,
  Actions: ActionWidgetActions,
  Avatar: ActionWidgetAvatar
});