/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { cloneElement, isValidElement, useEffect, useRef } from 'react';
import styled from 'styled-components';
import { css } from '@styled-system/css';
import * as Icons from '@revolut/icons';
import { rem } from 'polished';
import { themeTransition } from "../../utils";
import { Color, Radius, Size, Space, Transition } from "../../constants";
import { ButtonBase } from "../ButtonBase";
import { InputBoxVariant } from "../InputBox";
import { Box } from "../Box";
var AmountGroupContainer = /*#__PURE__*/styled(Box).withConfig({
  displayName: "AmountGroup__AmountGroupContainer",
  componentId: "sn3fny-0"
})(["position:relative;z-index:0;"]);
var AmountGroupButtonContainer = /*#__PURE__*/styled(Box).withConfig({
  displayName: "AmountGroup__AmountGroupButtonContainer",
  componentId: "sn3fny-1"
})(function (_ref) {
  var theme = _ref.theme;
  return css({
    alignItems: 'center',
    display: 'flex',
    height: Space.S_16,
    justifyContent: 'center',
    position: 'relative',
    zIndex: 1,
    transition: themeTransition(Transition.TRANSFORM)({
      theme: theme
    }),
    transform: 'translateY(0)'
  });
});
var AmountGroupButton = /*#__PURE__*/styled(ButtonBase).withConfig({
  displayName: "AmountGroup__AmountGroupButton",
  componentId: "sn3fny-2"
})(function (props) {
  return css({
    alignItems: 'center',
    color: Color.BLUE,
    backgroundColor: Color.WIDGET_BACKGROUND,
    borderRadius: Radius.ROUND,
    borderColor: Color.LAYOUT_BACKGROUND,
    borderStyle: 'solid',
    borderWidth: props.variant === InputBoxVariant.GREY ? 0 : rem(4),
    display: 'flex',
    justifyContent: 'center',
    width: props.variant === InputBoxVariant.GREY ? Size.S_32 : Size.S_40,
    height: props.variant === InputBoxVariant.GREY ? Size.S_32 : Size.S_40,
    ':disabled': {
      color: Color.GREY_TONE_20
    }
  });
});
var SWITCH_BUTTON_HEIGHT = 16;
export var AmountGroup = function AmountGroup(_ref2) {
  var children = _ref2.children,
      variant = _ref2.variant,
      switched = _ref2.switched,
      rest = _objectWithoutPropertiesLoose(_ref2, ["children", "variant", "switched"]);

  var firstRef = useRef(null);
  var lastRef = useRef(null);
  var buttonContainerRef = useRef(null);

  var _React$Children$toArr = React.Children.toArray(children).filter(function (child) {
    return /*#__PURE__*/isValidElement(child);
  }),
      first = _React$Children$toArr[0],
      last = _React$Children$toArr[1];

  useEffect(function () {
    var firstEl = firstRef.current;
    var lastEl = lastRef.current;
    var buttonContainerEl = buttonContainerRef.current;

    if (firstEl && lastEl && buttonContainerEl) {
      firstEl.style.transform = switched ? "translateY(" + (lastEl.offsetHeight + SWITCH_BUTTON_HEIGHT) + "px)" : '';
      lastEl.style.transform = switched ? "translateY(" + -(firstEl.offsetHeight + SWITCH_BUTTON_HEIGHT) + "px)" : '';
      buttonContainerEl.style.transform = switched ? "translateY(" + (lastEl.offsetHeight - firstEl.offsetHeight) + "px)" : '';
    }
  }, [switched, firstRef, lastRef, buttonContainerRef]);
  return /*#__PURE__*/React.createElement(AmountGroupContainer, null, /*#__PURE__*/cloneElement(first, {
    ref: firstRef,
    variant: variant
  }), /*#__PURE__*/React.createElement(AmountGroupButtonContainer, {
    ref: buttonContainerRef
  }, /*#__PURE__*/React.createElement(AmountGroupButton, _extends({
    variant: variant
  }, rest), /*#__PURE__*/React.createElement(Icons.ArrowTopDown, {
    size: SWITCH_BUTTON_HEIGHT
  }))), /*#__PURE__*/cloneElement(last, {
    ref: lastRef,
    variant: variant
  }));
};