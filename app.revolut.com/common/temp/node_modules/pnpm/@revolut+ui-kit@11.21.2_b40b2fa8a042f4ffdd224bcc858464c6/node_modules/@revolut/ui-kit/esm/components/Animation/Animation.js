/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { system } from 'styled-system';
import { useAnimation } from "../../hooks";
import { setRefs } from "../../utils";
import { Box } from "../Box";
var AnimationBox = /*#__PURE__*/styled(Box).withConfig({
  displayName: "Animation__AnimationBox",
  componentId: "sc-16lqm96-0"
})(["path{", "}"], system({
  color: {
    property: 'stroke',
    scale: 'colors'
  }
}));
export var Animation = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var src = _ref.src,
      loop = _ref.loop,
      autoPlay = _ref.autoPlay,
      autoSize = _ref.autoSize,
      request = _ref.request,
      onInstance = _ref.onInstance,
      onError = _ref.onError,
      rest = _objectWithoutPropertiesLoose(_ref, ["src", "loop", "autoPlay", "autoSize", "request", "onInstance", "onError"]);

  var animationRef = useAnimation({
    src: src,
    loop: loop,
    autoPlay: autoPlay,
    autoSize: autoSize,
    request: request,
    onInstance: onInstance,
    onError: onError
  });
  return /*#__PURE__*/React.createElement(AnimationBox, _extends({
    ref: setRefs(animationRef, ref),
    role: "img"
  }, rest));
});