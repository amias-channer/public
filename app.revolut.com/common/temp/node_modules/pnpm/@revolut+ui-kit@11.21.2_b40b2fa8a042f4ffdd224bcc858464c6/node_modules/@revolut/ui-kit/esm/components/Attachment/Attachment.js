/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/
import _styled from "styled-components";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import * as Icons from '@revolut/icons';
import styled from 'styled-components';
import { css } from '@styled-system/css';
import { Color, Radius } from "../../constants";
import { noop } from "../../utils";
import { useMessage } from "../../hooks";
import { Image, ImageVariant } from "../Image";
import { Avatar, AvatarBadgePosition } from "../Avatar";
import { ButtonBase } from "../ButtonBase";
var AttachmentButton = /*#__PURE__*/styled(ButtonBase).withConfig({
  displayName: "Attachment__AttachmentButton",
  componentId: "sc-1h6n1rd-0"
})(css({
  alignItems: 'center',
  bg: Color.ACTION_BACKGROUND,
  borderRadius: 10,
  display: 'flex',
  justifyContent: 'center',
  width: '100%',
  height: '100%'
}));

var _StyledImage = /*#__PURE__*/styled(Image).withConfig({
  displayName: "Attachment___StyledImage",
  componentId: "sc-1h6n1rd-1"
})({
  backgroundSize: 'cover'
});

var AttachmentBase = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var image = _ref.image,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 40 : _ref$size,
      _ref$onClear = _ref.onClear,
      onClear = _ref$onClear === void 0 ? noop : _ref$onClear,
      labelClearButton = _ref.labelClearButton,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["image", "size", "onClear", "labelClearButton", "children"]);

  var m = useMessage();
  return /*#__PURE__*/React.createElement(Avatar, {
    size: size,
    radius: Radius.ATTACHMENT
  }, image ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AttachmentButton, _extends({
    ref: ref
  }, rest), /*#__PURE__*/React.createElement(_StyledImage, {
    role: "presentation",
    radius: Radius.ATTACHMENT,
    height: size,
    src: image,
    use: "span",
    variant: ImageVariant.BACKGROUND,
    width: size
  })), !children && /*#__PURE__*/React.createElement(Avatar.Badge, {
    use: "button",
    position: AvatarBadgePosition.TOP_RIGHT,
    bg: Color.RED,
    onClick: onClear,
    useIcon: Icons.CrossSmall,
    "aria-label": labelClearButton != null ? labelClearButton : m('action.clear')
  })) : /*#__PURE__*/React.createElement(AttachmentButton, _extends({
    ref: ref
  }, rest), /*#__PURE__*/React.createElement(Icons.Camera, {
    color: Color.BLUE
  })), children);
});
export var Attachment = Object.assign(AttachmentBase, {
  Badge: Avatar.Badge
});