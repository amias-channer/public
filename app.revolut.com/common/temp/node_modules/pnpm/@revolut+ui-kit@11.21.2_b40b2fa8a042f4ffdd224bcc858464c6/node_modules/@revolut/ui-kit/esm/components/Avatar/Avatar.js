/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useMemo } from 'react';
import styled from 'styled-components';
import { Color, Radius, Space, TextStyle, Transition } from "../../constants";
import { isReactText, px, themeColor, themeSpace, themeTransition } from "../../utils";
import { getColorFromString } from "../../utils/getColorFromString";
import { Badge, BadgeVariant } from "../Badge";
import { Box } from "../Box";
import { Text } from "../Text";
import { ProgressCircle } from "../ProgressCircle";
import { ZStack } from "../ZStack";
import { AvatarBadgePosition, AvatarComponentSize, AvatarVariant } from "./constants";

function getTextStyle(size) {
  switch (size) {
    case AvatarComponentSize.S_20:
    case AvatarComponentSize.S_24:
      return TextStyle.TINY;

    case AvatarComponentSize.S_32:
      return TextStyle.SMALL;

    case AvatarComponentSize.S_96:
      return TextStyle.H1;

    case AvatarComponentSize.S_40:
    default:
      return TextStyle.PRIMARY;
  }
}

function getImage(image, imageSetArg) {
  if (imageSetArg) {
    var imageSet = image ? _extends({}, imageSetArg, {
      '1x': image
    }) : imageSetArg;
    return "image-set(\n      " + Object.keys(imageSet).map(function (key) {
      return "url(\"" + imageSet[key] + "\") " + key;
    }).join(', ') + "\n      )";
  }

  if (image) {
    return "url(" + image + ")";
  }

  return 'none';
}

function getBackgroundColor(variant, uuid, color) {
  if (uuid) return getColorFromString(uuid);
  if (color) return color;

  switch (variant) {
    case AvatarVariant.APP:
      return Color.BACKGROUND;

    case AvatarVariant.BRAND:
    case AvatarVariant.DEFAULT:
      return Color.BLUE_10;
  }
}

function getTextColor(variant, uuid) {
  if (uuid) return Color.BACKGROUND;

  switch (variant) {
    case AvatarVariant.APP:
      return Color.FOREGROUND;

    case AvatarVariant.BRAND:
    case AvatarVariant.DEFAULT:
      return Color.BLUE;
  }
}

function getRadius(variant) {
  switch (variant) {
    case AvatarVariant.APP:
      return Radius.APP;

    case AvatarVariant.BRAND:
    case AvatarVariant.DEFAULT:
      return Radius.ROUND;
  }
}

function getIconProps(size) {
  switch (size) {
    case AvatarComponentSize.S_96:
    case AvatarComponentSize.S_76:
      return {
        size: 48,
        variant: '24'
      };

    case AvatarComponentSize.S_60:
    case AvatarComponentSize.S_56:
      return {
        size: 32,
        variant: '24'
      };

    case AvatarComponentSize.S_40:
      return {
        size: 24
      };

    case AvatarComponentSize.S_32:
    case AvatarComponentSize.S_24:
    default:
      return {
        size: 16
      };
  }
}

var OVERLAY_GRADIENT = "linear-gradient(\n  180deg,\n  rgba(255, 255, 255, 0) 0%,\n  rgba(255, 255, 255, 0.4) 100%\n)";
var AvatarBackground = /*#__PURE__*/styled(Box).withConfig({
  displayName: "Avatar__AvatarBackground",
  componentId: "sc-3hln3v-0"
})(["background-image:", ";background-blend-mode:overlay;"], function (props) {
  return props.overlay ? OVERLAY_GRADIENT : 'none';
});
var AvatarImage = /*#__PURE__*/styled(Box).withConfig({
  displayName: "Avatar__AvatarImage",
  componentId: "sc-3hln3v-1"
})(["background-position:center;background-repeat:no-repeat;background-size:cover;background-image:", ";box-shadow:", ";"], function (props) {
  return getImage(props.image, props.imageSet);
}, function (props) {
  return props.outline ? "0 0 0 " + (props.size <= 40 ? 1 : 2) + "px inset rgba(122, 122, 122, 0.15)" : undefined;
});
var AvatarBadge = /*#__PURE__*/styled(Badge).withConfig({
  displayName: "Avatar__AvatarBadge",
  componentId: "sc-3hln3v-2"
})(["isolation:isolate;place-self:", ";margin:", ";&[disabled],&[aria-disabled='true']{opacity:0.5;}"], function (props) {
  switch (props.position) {
    case AvatarBadgePosition.TOP_LEFT:
      return 'start';

    case AvatarBadgePosition.TOP_RIGHT:
      return 'start end';

    case AvatarBadgePosition.BOTTOM_LEFT:
      return 'end start';

    case AvatarBadgePosition.BOTTOM_RIGHT:
      return 'end';
  }
}, function (props) {
  return props.variant === BadgeVariant.DOT ? themeSpace(Space.N_2)(props) : 'var(--avatar-badge-offset)';
});
AvatarBadge.defaultProps = {
  position: AvatarBadgePosition.BOTTOM_RIGHT,
  variant: BadgeVariant.OUTLINE,
  padding: Space.NONE
};
var AvatarAccentBadge = /*#__PURE__*/styled(AvatarBadge).withConfig({
  displayName: "Avatar__AvatarAccentBadge",
  componentId: "sc-3hln3v-3"
})([""]);
AvatarAccentBadge.defaultProps = {
  color: Color.WHITE
};
var AvatarNotification = /*#__PURE__*/styled(AvatarAccentBadge).withConfig({
  displayName: "Avatar__AvatarNotification",
  componentId: "sc-3hln3v-4"
})([""]);
AvatarNotification.defaultProps = {
  variant: BadgeVariant.DEFAULT,
  position: AvatarBadgePosition.TOP_RIGHT,
  textStyle: TextStyle.TILE,
  children: 'â€¢',
  size: 24
};
var AvatarStack = /*#__PURE__*/styled(ZStack).withConfig({
  displayName: "Avatar__AvatarStack",
  componentId: "sc-3hln3v-5"
})(["--button-shadow-focus:0 0 0 2px ", ",0 0 0 4px ", ";appearance:none;border:none;background:none;outline:none;transition:", ";text-transform:uppercase;:focus-visible{box-shadow:var(--button-shadow-focus);}&.focus-visible{box-shadow:var(--button-shadow-focus);}:enabled{cursor:pointer;}::before{content:'';isolation:isolate;opacity:0;transition:", ";background-color:", ";border-radius:inherit;width:100%;height:100%;pointer-events:none;}:enabled:active::before,&[aria-pressed='true']::before{opacity:1;}&[disabled],&[aria-disabled='true']{pointer-events:none;}", "{--avatar-badge-offset:", ";}"], themeColor(Color.BACKGROUND), themeColor(Color.BLUE_OPAQUE_50), themeTransition(Transition.SHADOW), themeTransition(Transition.OPACITY), themeColor(Color.BLACK_30), AvatarBadge, function (props) {
  return themeSpace(props.size && props.size >= 40 ? Space.N_4 : Space.N_6)(props);
});
var RefForwardingAvatar = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var label = _ref.label,
      uuid = _ref.uuid,
      progress = _ref.progress,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? AvatarVariant.DEFAULT : _ref$variant,
      _ref$progressColor = _ref.progressColor,
      progressColor = _ref$progressColor === void 0 ? Color.BLUE : _ref$progressColor,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? AvatarComponentSize.S_40 : _ref$size,
      Icon = _ref.useIcon,
      children = _ref.children,
      image = _ref.image,
      imageSet = _ref.imageSet,
      disabled = _ref.disabled,
      color = _ref.color,
      bg = _ref.bg,
      _ref$radius = _ref.radius,
      radius = _ref$radius === void 0 ? getRadius(variant) : _ref$radius,
      ariaDisabled = _ref['aria-disabled'],
      _ref$__progressOffset = _ref.__progressOffset,
      __progressOffset = _ref$__progressOffset === void 0 ? 10 : _ref$__progressOffset,
      _ref$__outline = _ref.__outline,
      __outline = _ref$__outline === void 0 ? variant === AvatarVariant.DEFAULT : _ref$__outline,
      rest = _objectWithoutPropertiesLoose(_ref, ["label", "uuid", "progress", "variant", "progressColor", "size", "useIcon", "children", "image", "imageSet", "disabled", "color", "bg", "radius", "aria-disabled", "__progressOffset", "__outline"]);

  var content = useMemo(function () {
    var texts = [];
    var nodes = [];

    if (label == null) {
      for (var _iterator = _createForOfIteratorHelperLoose(React.Children.toArray(children)), _step; !(_step = _iterator()).done;) {
        var child = _step.value;
        if (isReactText(child)) texts.push(child);else nodes.push(child);
      }
    } else {
      texts.push(label);
      nodes.push(children);
    }

    return {
      texts: texts,
      nodes: nodes
    };
  }, [children, label]);
  return /*#__PURE__*/React.createElement(AvatarStack, _extends({
    ref: ref,
    align: "center",
    size: size,
    radius: radius,
    color: color != null ? color : getTextColor(variant, uuid),
    disabled: disabled,
    "aria-disabled": ariaDisabled,
    textStyle: getTextStyle(size)
  }, rest), /*#__PURE__*/React.createElement(ZStack, {
    align: "center",
    size: size,
    opacity: disabled || ariaDisabled === true ? 0.5 : undefined,
    radius: radius
  }, /*#__PURE__*/React.createElement(AvatarBackground, {
    bg: bg != null ? bg : getBackgroundColor(variant, uuid, color),
    size: size,
    radius: radius,
    overlay: variant === AvatarVariant.APP,
    opacity: bg == null && uuid == null && color != null ? 0.1 : undefined
  }), (image || imageSet) && /*#__PURE__*/React.createElement(AvatarImage, {
    size: size,
    radius: radius,
    image: image,
    imageSet: imageSet,
    outline: __outline
  }), variant === AvatarVariant.DEFAULT && progress != null && /*#__PURE__*/React.createElement(ProgressCircle, {
    value: progress,
    margin: px(__progressOffset * -1),
    size: size + __progressOffset,
    color: progressColor,
    bg: Color.GREY_TONE_10
  }), Icon ? /*#__PURE__*/React.createElement(Icon, getIconProps(size)) : null, content.texts.length > 0 && /*#__PURE__*/React.createElement(Text, null, content.texts)), /*#__PURE__*/React.createElement(ZStack, {
    align: "center",
    size: size
  }, content.nodes));
});
export var Avatar = Object.assign(RefForwardingAvatar, {
  Badge: AvatarBadge,

  /** @private */
  __AccentBadge: AvatarAccentBadge,

  /** @private */
  __Notification: AvatarNotification
});