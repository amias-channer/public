/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext, useState } from 'react';
import { Color } from "../../constants";
import { Avatar } from "../Avatar";
import { MoreBarProvider, MoreBarVisibleIndexContext } from "../MoreBar";
import { Bar } from "../Bar";

var RestAvatar = function RestAvatar(_ref) {
  var children = _ref.children;
  var visibleIndex = useContext(MoreBarVisibleIndexContext);
  var childrenMaxIndex = React.Children.count(children) - 1;
  return childrenMaxIndex >= 0 ? /*#__PURE__*/React.createElement(Avatar, {
    size: 24,
    color: Color.WHITE,
    bg: Color.GREY_TONE_50
  }, visibleIndex !== null ? "+" + (childrenMaxIndex - visibleIndex) : null) : null;
};

export function AvatarBar(_ref2) {
  var fallbackGap = _ref2.fallbackGap,
      children = _ref2.children,
      rest = _objectWithoutPropertiesLoose(_ref2, ["fallbackGap", "children"]);

  var _useState = useState(null),
      barElement = _useState[0],
      setBarElement = _useState[1];

  return /*#__PURE__*/React.createElement(Bar, _extends({
    ref: setBarElement,
    maxWidth: "100%"
  }, rest), children, /*#__PURE__*/React.createElement(MoreBarProvider, {
    barElement: barElement,
    fallbackGap: fallbackGap
  }, /*#__PURE__*/React.createElement(RestAvatar, null, children)));
}
export var AvatarBarItem = function AvatarBarItem(props) {
  var visibleIndex = useContext(MoreBarVisibleIndexContext);

  if (visibleIndex !== null) {
    var _ref3;

    return /*#__PURE__*/React.createElement(Avatar, _extends({
      __css: (_ref3 = {}, _ref3[":nth-of-type(-n + " + (visibleIndex + 1) + ")"] = {
        display: 'none'
      }, _ref3)
    }, props));
  }

  return /*#__PURE__*/React.createElement(Avatar, props);
};
AvatarBarItem.defaultProps = {
  size: 24
};
AvatarBar.Item = AvatarBarItem;