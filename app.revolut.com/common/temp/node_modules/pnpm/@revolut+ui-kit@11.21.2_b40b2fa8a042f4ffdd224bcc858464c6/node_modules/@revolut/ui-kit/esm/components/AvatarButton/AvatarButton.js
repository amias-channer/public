/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef } from 'react';
import createSlots from 'nano-slots';
import { Color, TextStyle } from "../../constants";
import { AccessibleId, useAccessibleId } from "../AccessibleId";
import { Avatar } from "../Avatar";
import { VStack } from "../VStack";
import { Text } from "../Text";
var AvatarButtonSlot;

(function (AvatarButtonSlot) {
  AvatarButtonSlot[AvatarButtonSlot["TITLE"] = 0] = "TITLE";
  AvatarButtonSlot[AvatarButtonSlot["DESCRIPTION"] = 1] = "DESCRIPTION";
})(AvatarButtonSlot || (AvatarButtonSlot = {}));

var Slots = createSlots();

var AvatarButtonText = function AvatarButtonText(_ref) {
  var rest = _extends({}, _ref);

  return /*#__PURE__*/React.createElement(Text, _extends({
    variant: TextStyle.SMALL,
    textAlign: "center",
    maxWidth: "100%"
  }, rest));
};

var getLabelId = function getLabelId(id) {
  return id ? "avatar-button-label-" + id : undefined;
};

function AvatarButtonTitle(props) {
  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(Slots.Fill, {
    name: AvatarButtonSlot.TITLE
  }, /*#__PURE__*/React.createElement(AvatarButtonText, _extends({
    id: getLabelId(id),
    color: Color.FOREGROUND
  }, props)));
}

var getDescId = function getDescId(id) {
  return id ? "avatar-button-desc-" + id : undefined;
};

function AvatarButtonDescription(props) {
  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(Slots.Fill, {
    name: AvatarButtonSlot.DESCRIPTION
  }, /*#__PURE__*/React.createElement(AvatarButtonText, _extends({
    id: getDescId(id),
    color: Color.GREY_TONE_50
  }, props)));
}

var RefForwardingAvatarButton = /*#__PURE__*/forwardRef(function (_ref2, ref) {
  var _ref2$use = _ref2.use,
      use = _ref2$use === void 0 ? 'button' : _ref2$use,
      size = _ref2.size,
      disabled = _ref2.disabled,
      _ref2$__labelWidth = _ref2.__labelWidth,
      labelWidth = _ref2$__labelWidth === void 0 ? size : _ref2$__labelWidth,
      _ref2$__parentWidth = _ref2.__parentWidth,
      parentWidth = _ref2$__parentWidth === void 0 ? size : _ref2$__parentWidth,
      rest = _objectWithoutPropertiesLoose(_ref2, ["use", "size", "disabled", "__labelWidth", "__parentWidth"]);

  return /*#__PURE__*/React.createElement(Slots.Provider, null, /*#__PURE__*/React.createElement(AccessibleId, null, function (_ref3) {
    var id = _ref3.id;
    return /*#__PURE__*/React.createElement(VStack, {
      align: "center",
      width: parentWidth
    }, /*#__PURE__*/React.createElement(Avatar, _extends({
      ref: ref,
      use: use,
      size: size,
      disabled: disabled,
      "aria-labelledby": 'aria-label' in rest || use !== 'button' && use !== 'a' ? undefined : getLabelId(id),
      "aria-describedby": 'aria-description' in rest || use !== 'button' && use !== 'a' ? undefined : getDescId(id)
    }, rest)), /*#__PURE__*/React.createElement(VStack, {
      align: "center",
      width: labelWidth,
      opacity: disabled ? 0.5 : undefined
    }, /*#__PURE__*/React.createElement(Slots.Slot, {
      name: AvatarButtonSlot.TITLE
    }), /*#__PURE__*/React.createElement(Slots.Slot, {
      name: AvatarButtonSlot.DESCRIPTION
    })));
  }));
});
export var AvatarButton = Object.assign(RefForwardingAvatarButton, {
  Title: AvatarButtonTitle,
  Description: AvatarButtonDescription,
  Badge: Avatar.__AccentBadge,
  Notification: Avatar.__Notification
});