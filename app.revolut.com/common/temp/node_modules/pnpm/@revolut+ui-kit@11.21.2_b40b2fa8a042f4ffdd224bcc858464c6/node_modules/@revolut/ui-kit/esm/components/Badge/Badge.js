/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _VARIANT_SIZE;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { TextStyle } from "../../constants";
import { Circle } from "../Circle";
import { BadgeVariant } from "./variants";
export var BadgeSize = {
  SIZE_5: 5,
  SIZE_16: 16,
  SIZE_20: 20,
  SIZE_24: 24,

  /** @deprecated use `SIZE_5` */
  SIZE_4: 4
};
var VARIANT_SIZE = (_VARIANT_SIZE = {}, _VARIANT_SIZE[BadgeVariant.DEFAULT] = BadgeSize.SIZE_20, _VARIANT_SIZE[BadgeVariant.OUTLINE] = BadgeSize.SIZE_16, _VARIANT_SIZE[BadgeVariant.DOT] = BadgeSize.SIZE_5, _VARIANT_SIZE);

function getIconSize(badgeSize) {
  switch (badgeSize) {
    case BadgeSize.SIZE_16:
    case BadgeSize.SIZE_20:
      return 12;

    case BadgeSize.SIZE_24:
    default:
      return 16;
  }
}

function getTextStyle(badgeSize) {
  switch (badgeSize) {
    case BadgeSize.SIZE_16:
    case BadgeSize.SIZE_20:
      return TextStyle.TINY;

    case BadgeSize.SIZE_24:
    default:
      return TextStyle.SMALL;
  }
}

export function Badge(_ref) {
  var size = _ref.size,
      Icon = _ref.useIcon,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? BadgeVariant.DEFAULT : _ref$variant,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["size", "useIcon", "variant", "children"]);

  var resolvedVariant = size === BadgeSize.SIZE_4 || size === BadgeSize.SIZE_5 ? BadgeVariant.DOT : variant;
  var resolvedSize = size != null ? size : VARIANT_SIZE[variant];
  var isDot = resolvedVariant === BadgeVariant.DOT;
  return /*#__PURE__*/React.createElement(Circle, _extends({
    display: "inline-flex",
    px: !isDot && children != null ? '0.4em' : undefined,
    height: resolvedSize,
    minWidth: resolvedSize,
    variant: resolvedVariant,
    textStyle: getTextStyle(size),
    variantKey: "badgeStyles"
  }, rest), isDot ? null : /*#__PURE__*/React.createElement(React.Fragment, null, Icon && /*#__PURE__*/React.createElement(Icon, {
    size: getIconSize(resolvedSize)
  }), children));
}