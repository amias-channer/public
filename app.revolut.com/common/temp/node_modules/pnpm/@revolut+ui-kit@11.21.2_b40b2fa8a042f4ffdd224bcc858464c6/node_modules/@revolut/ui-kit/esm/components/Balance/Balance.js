/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import React, { Fragment, forwardRef, useEffect, useMemo, useRef } from 'react';
import { FontSize, TextStyle } from "../../constants";
import { useCurrency, useSupportedLocale } from "../../hooks";
import { Text } from "../Text";
import { FitText } from "../FitText";
import { CurrencySymbol } from "./constants";
import { getNumberParts, splitBalance } from "./utils";
import { BlinkingText, BlinkingType } from "./BlinkingText";

var renderNumberParts = function renderNumberParts(parts) {
  return parts.map(function (_ref, index) {
    var type = _ref.type,
        value = _ref.value;

    if (type === 'fraction' || type === 'decimal') {
      return (
        /*#__PURE__*/
        // eslint-disable-next-line react/no-array-index-key
        React.createElement(Text, {
          key: index,
          variant: TextStyle.H5
        }, value)
      );
    } // eslint-disable-next-line react/no-array-index-key


    return /*#__PURE__*/React.createElement(Fragment, {
      key: index
    }, value);
  });
};

export var Balance = /*#__PURE__*/forwardRef(function (_ref2, ref) {
  var variant = _ref2.variant,
      value = _ref2.value,
      currency = _ref2.currency,
      _ref2$symbol = _ref2.symbol,
      symbol = _ref2$symbol === void 0 ? CurrencySymbol.AUTO : _ref2$symbol,
      _ref2$animateChanges = _ref2.animateChanges,
      animateChanges = _ref2$animateChanges === void 0 ? false : _ref2$animateChanges,
      localeProp = _ref2.locale;
  var locale = useSupportedLocale(localeProp, [Intl.NumberFormat]);
  var prevValue = useRef(value);
  var prevCurrency = useRef(currency);
  var prevLocale = useRef(locale);
  useEffect(function () {
    prevValue.current = value;
    prevCurrency.current = currency;
    prevLocale.current = locale;
  });
  var customCurrencyDefinition = useCurrency(currency);

  var _useMemo = useMemo(function () {
    return animateChanges ? splitBalance({
      prevValue: prevValue.current,
      nextValue: value,
      locale: locale,
      currency: currency,
      symbol: symbol,
      maximumFractionDigits: customCurrencyDefinition == null ? void 0 : customCurrencyDefinition.fractionalPart,
      customCurrencySymbol: customCurrencyDefinition == null ? void 0 : customCurrencyDefinition.symbol
    }) : {
      head: getNumberParts({
        value: value,
        locale: locale,
        currency: currency,
        symbol: symbol,
        maximumFractionDigits: customCurrencyDefinition == null ? void 0 : customCurrencyDefinition.fractionalPart,
        customCurrencySymbol: customCurrencyDefinition == null ? void 0 : customCurrencyDefinition.symbol
      }),
      body: [],
      tail: []
    };
  }, [symbol, animateChanges, currency, locale, value, customCurrencyDefinition]),
      head = _useMemo.head,
      body = _useMemo.body,
      tail = _useMemo.tail;

  var blinkingType = useMemo(function () {
    if (!animateChanges || prevValue.current === value || prevCurrency.current !== currency || prevLocale.current !== locale) {
      return BlinkingType.NONE;
    }

    return value > prevValue.current ? BlinkingType.POSITIVE : BlinkingType.NEGATIVE;
  }, [animateChanges, currency, locale, value]);
  return /*#__PURE__*/React.createElement(FitText, {
    ref: ref,
    variant: variant,
    max: variant,
    min: FontSize.H5
  }, renderNumberParts(head), body.length > 0 && /*#__PURE__*/React.createElement(BlinkingText, {
    key: value,
    blinkingType: blinkingType
  }, renderNumberParts(body)), renderNumberParts(tail));
});