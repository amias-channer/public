/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { changeNumberFormatCurrencySymbol, getNumberFractionDigits } from "../../utils";
import { CurrencySymbol } from "./constants";
export var getNumberFormatter = function getNumberFormatter(locale, currency, options) {
  return new Intl.NumberFormat(locale, currency ? _extends({
    currency: currency,
    style: 'currency'
  }, options) : _extends({}, options));
};
export var getNumberDigits = function getNumberDigits(value, formatter) {
  return formatter.format(value).replace(/[^\d]/g, '').split('');
};
export var getNumberOfChangedDigits = function getNumberOfChangedDigits(prevValue, nextValue, locale, currency, maximumFractionDigits) {
  var maxDigitsNumberFormatter = getNumberFormatter(locale, currency, {
    minimumFractionDigits: maximumFractionDigits != null ? maximumFractionDigits : getNumberFractionDigits(locale, currency)
  });
  var numberFormatter = getNumberFormatter(locale, currency, {
    minimumFractionDigits: nextValue % 1 > 0 ? undefined : 0,
    maximumFractionDigits: maximumFractionDigits
  });
  var prevDigits = getNumberDigits(prevValue, maxDigitsNumberFormatter);
  var nextDigits = getNumberDigits(nextValue, maxDigitsNumberFormatter);

  var _getNumberDigits = getNumberDigits(nextValue, numberFormatter),
      nextDigitsOutputLength = _getNumberDigits.length;

  if (prevDigits.length !== nextDigits.length) {
    return nextDigitsOutputLength;
  }

  var firstDifferenceIndex;

  for (firstDifferenceIndex = 0; firstDifferenceIndex < prevDigits.length; firstDifferenceIndex++) {
    if (prevDigits[firstDifferenceIndex] !== nextDigits[firstDifferenceIndex]) {
      break;
    }
  }

  return nextDigitsOutputLength - firstDifferenceIndex;
};
export var getNumberParts = function getNumberParts(_ref) {
  var value = _ref.value,
      locale = _ref.locale,
      currency = _ref.currency,
      _ref$symbol = _ref.symbol,
      symbol = _ref$symbol === void 0 ? CurrencySymbol.AUTO : _ref$symbol,
      maximumFractionDigits = _ref.maximumFractionDigits,
      customCurrencySymbol = _ref.customCurrencySymbol;
  var numberFormatter = getNumberFormatter(locale, currency, {
    minimumFractionDigits: value % 1 > 0 ? undefined : 0,
    maximumFractionDigits: maximumFractionDigits,
    currencyDisplay: symbol === CurrencySymbol.NARROW ? 'narrowSymbol' : undefined
  });
  var parts = numberFormatter.formatToParts(value);

  if (customCurrencySymbol) {
    parts = changeNumberFormatCurrencySymbol(parts, customCurrencySymbol);
  }

  return parts;
};
export var splitBalance = function splitBalance(_ref2) {
  var prevValue = _ref2.prevValue,
      nextValue = _ref2.nextValue,
      locale = _ref2.locale,
      currency = _ref2.currency,
      symbol = _ref2.symbol,
      maximumFractionDigits = _ref2.maximumFractionDigits,
      customCurrencySymbol = _ref2.customCurrencySymbol;
  var parts = getNumberParts({
    value: nextValue,
    locale: locale,
    currency: currency,
    symbol: symbol,
    maximumFractionDigits: maximumFractionDigits,
    customCurrencySymbol: customCurrencySymbol
  });
  var numberOfChangedDigits = getNumberOfChangedDigits(prevValue, nextValue, locale, currency, maximumFractionDigits);
  var counter = 0;
  return [].concat(parts).reverse().reduce(function (result, item) {
    var restCount = numberOfChangedDigits - counter;

    if (restCount > 0) {
      if (['integer', 'fraction'].includes(item.type)) {
        if (restCount >= item.value.length) {
          result.body.unshift(item);
          counter += item.value.length;
        } else {
          result.head.unshift(_extends({}, item, {
            value: item.value.slice(0, item.value.length - restCount)
          }));
          result.body.unshift(_extends({}, item, {
            value: item.value.slice(item.value.length - restCount)
          }));
          counter = numberOfChangedDigits;
        }
      } else if (['group', 'decimal'].includes(item.type)) {
        result.body.unshift(item);
      } else {
        result.tail.unshift(item);
      }
    } else {
      result.head.unshift(item);
    }

    return result;
  }, {
    head: [],
    body: [],
    tail: []
  });
};