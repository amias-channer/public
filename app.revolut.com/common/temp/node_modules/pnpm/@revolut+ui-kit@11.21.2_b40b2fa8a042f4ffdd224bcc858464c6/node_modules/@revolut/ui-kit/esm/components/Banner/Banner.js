/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import * as Icons from '@revolut/icons';
import { css } from '@styled-system/css';
import styled from 'styled-components';
import { Color, Size, Space, TextStyle } from "../../constants";
import { useMessage } from "../../hooks";
import { Cell } from "../Cell";
import { Item } from "../Item";
import { Flex } from "../Flex";
import { Text } from "../Text";
import { IconButton } from "../IconButton";
import { Absolute, Relative } from "../Position";
import { AccessibleId, useAccessibleId } from "../AccessibleId";
import { getDescriptionId, getLabelId } from "./utils";
/** @private  */

var BannerBase = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      restProps = _objectWithoutPropertiesLoose(_ref, ["children"]);

  return /*#__PURE__*/React.createElement(AccessibleId, null, function (_ref2) {
    var id = _ref2.id;
    return /*#__PURE__*/React.createElement(Cell, _extends({
      "aria-labelledby": getLabelId(id),
      "aria-describedby": getDescriptionId(id),
      role: restProps.use ? undefined : 'group',
      ref: ref
    }, restProps), children);
  });
});
var BannerTitle = /*#__PURE__*/forwardRef(function (props, ref) {
  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(Text, _extends({
    ref: ref,
    id: getLabelId(id)
  }, props));
});
var BannerDescription = /*#__PURE__*/forwardRef(function (props, ref) {
  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(Text, _extends({
    ref: ref,
    id: getDescriptionId(id)
  }, props));
});
var BannerAvatar = /*#__PURE__*/styled(Flex).withConfig({
  displayName: "Banner__BannerAvatar",
  componentId: "sc-1p70mje-0"
})(css({
  marginRight: Space.S_16,
  order: 2,
  alignSelf: 'stretch'
}));
var BannerCloseButtonBox = /*#__PURE__*/styled(Relative).withConfig({
  displayName: "Banner__BannerCloseButtonBox",
  componentId: "sc-1p70mje-1"
})(css({
  width: Size.S_16,
  flex: '0 0 auto',
  order: 4,
  alignSelf: 'stretch'
}));
var BannerCloseButtonAbsoluteBox = /*#__PURE__*/styled(Absolute).withConfig({
  displayName: "Banner__BannerCloseButtonAbsoluteBox",
  componentId: "sc-1p70mje-2"
})(css({
  width: Size.S_32,
  padding: Size.S_4,
  top: Size.N_16
}));
var BannerCloseButton = /*#__PURE__*/forwardRef(function (_ref3, ref) {
  var onClick = _ref3.onClick,
      ariaLabel = _ref3['aria-label'],
      rest = _objectWithoutPropertiesLoose(_ref3, ["onClick", "aria-label"]);

  var m = useMessage();

  var handleClick = function handleClick(event) {
    if (!event.defaultPrevented) {
      event.stopPropagation();
    }

    onClick == null ? void 0 : onClick(event);
  };

  return /*#__PURE__*/React.createElement(BannerCloseButtonBox, null, /*#__PURE__*/React.createElement(BannerCloseButtonAbsoluteBox, null, /*#__PURE__*/React.createElement(IconButton, _extends({
    ref: ref,
    onClick: handleClick,
    useIcon: Icons.Cross,
    "aria-label": ariaLabel != null ? ariaLabel : m('action.close')
  }, rest))));
});
BannerAvatar.defaultProps = {
  alignItems: 'center'
};
BannerTitle.defaultProps = {
  variant: TextStyle.PRIMARY
};
BannerDescription.defaultProps = {
  color: Color.GREY_TONE_50,
  variant: TextStyle.CAPTION
};
BannerCloseButton.defaultProps = {
  color: Color.GREY_TONE_10
};
export var Banner = Object.assign(BannerBase, {
  Avatar: BannerAvatar,
  Description: BannerDescription,
  CloseButton: BannerCloseButton,
  Title: BannerTitle,
  Content: Item.Content
});