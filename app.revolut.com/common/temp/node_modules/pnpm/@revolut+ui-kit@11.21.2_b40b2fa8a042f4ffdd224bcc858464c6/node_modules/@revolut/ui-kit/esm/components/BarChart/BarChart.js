/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useMemo } from 'react';
import { ParentSizeModern } from '@visx/responsive';
import { scaleLinear } from '@visx/scale';
import { BarRounded, Line } from '@visx/shape';
import { max } from 'd3-array';
import styled, { useTheme } from 'styled-components';
import { Color } from "../../constants";
import { Relative } from "../Position";
import { themeColor } from "../../utils";
import { BAR_WIDTH } from "./constants";
import { HorizontalAxis } from "./HorizontalAxis";
import { VerticalAxis } from "./VerticalAxis";
import { LineLabel } from "./LineLabel";
import { BarChartVariant } from "./variants";
import { getGraphHeight, getMargin } from "./utils";
var GraphContainer = /*#__PURE__*/styled.svg.withConfig({
  displayName: "BarChart__GraphContainer",
  componentId: "sc-6n89jy-0"
})(function (_ref) {
  var left = _ref.left,
      top = _ref.top;
  return {
    position: 'absolute',
    left: left,
    top: top
  };
});
export var BarChart = function BarChart(_ref2) {
  var _ref2$variant = _ref2.variant,
      variant = _ref2$variant === void 0 ? BarChartVariant.LARGE : _ref2$variant,
      rest = _objectWithoutPropertiesLoose(_ref2, ["variant"]);

  return /*#__PURE__*/React.createElement(ParentSizeModern, null, function (_ref3) {
    var width = _ref3.width;
    return /*#__PURE__*/React.createElement(BarChartInner, _extends({
      width: width,
      height: getGraphHeight(variant),
      variant: variant
    }, rest));
  });
};

var BarChartInner = function BarChartInner(_ref4) {
  var variant = _ref4.variant,
      width = _ref4.width,
      height = _ref4.height,
      data = _ref4.data,
      _ref4$projectedData = _ref4.projectedData,
      projectedData = _ref4$projectedData === void 0 ? [] : _ref4$projectedData,
      lineValue = _ref4.lineValue,
      labelMin = _ref4.labelMin,
      labelMax = _ref4.labelMax,
      labelLine = _ref4.labelLine,
      rest = _objectWithoutPropertiesLoose(_ref4, ["variant", "width", "height", "data", "projectedData", "lineValue", "labelMin", "labelMax", "labelLine"]);

  var theme = useTheme();
  var fillColor = themeColor(Color.BLUE)({
    theme: theme
  });
  var secondaryFillColor = themeColor(Color.ACTION_BACKGROUND)({
    theme: theme
  });
  var bgColor = themeColor(Color.GREY_TONE_5)({
    theme: theme
  });
  var projectedFillColor = themeColor(Color.GREY_TONE_2)({
    theme: theme
  });
  var projectedStrokeColor = themeColor(Color.GREY_TONE_20)({
    theme: theme
  });
  var margins = getMargin(variant);
  var graphHeight = height - margins.top - margins.bottom;
  var graphWidth = width - margins.left - margins.right;
  var concatenatedData = useMemo(function () {
    return data.concat(projectedData);
  }, [data, projectedData]);
  var barWidth = useMemo(function () {
    var spaceBetween = (graphWidth - (data.length + projectedData.length) * BAR_WIDTH.DEFAULT) / (data.length + projectedData.length - 1);

    if (spaceBetween < 0) {
      return BAR_WIDTH.XS;
    }

    if (spaceBetween < 24) {
      return BAR_WIDTH.SM;
    }

    return BAR_WIDTH.DEFAULT;
  }, [data.length, projectedData.length, graphWidth]); // scales

  var xScale = useMemo(function () {
    return scaleLinear({
      range: [0, graphWidth - barWidth],
      domain: [0, data.length - 1 + projectedData.length]
    });
  }, [graphWidth, data.length, projectedData.length, barWidth]);
  var yScale = useMemo(function () {
    return scaleLinear({
      range: [graphHeight, 0],
      domain: [0, max(concatenatedData, function (d) {
        var _d$secondaryValue;

        return d.value + ((_d$secondaryValue = d.secondaryValue) != null ? _d$secondaryValue : 0);
      }) || 1]
    });
  }, [graphHeight, concatenatedData]);
  var lineY = lineValue && yScale(lineValue);

  if (width === 0) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Relative, _extends({
    maxWidth: width,
    height: height
  }, rest), /*#__PURE__*/React.createElement(GraphContainer, {
    width: graphWidth,
    height: graphHeight,
    left: margins.left,
    top: margins.top
  }, data.map(function (d, index) {
    var _d$secondaryValue2;

    var barHeight = graphHeight - yScale(d.value);
    var secondaryBarHeight = graphHeight - yScale((_d$secondaryValue2 = d.secondaryValue) != null ? _d$secondaryValue2 : 0);
    var barY = graphHeight - barHeight - secondaryBarHeight;
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React.createElement(React.Fragment, {
        key: index
      }, variant === BarChartVariant.SMALL && /*#__PURE__*/React.createElement(BarRounded, {
        radius: 2,
        all: true,
        x: xScale(index),
        y: 0,
        width: barWidth,
        height: graphHeight,
        fill: bgColor
      }), /*#__PURE__*/React.createElement(BarRounded, {
        radius: 2,
        all: true,
        x: xScale(index),
        y: barY,
        width: barWidth,
        height: barHeight + secondaryBarHeight,
        fill: fillColor
      }), secondaryBarHeight && /*#__PURE__*/React.createElement(BarRounded, {
        radius: 2,
        bottomLeft: barHeight === 0,
        bottomRight: barHeight === 0,
        topLeft: true,
        topRight: true,
        x: xScale(index),
        y: barY,
        width: barWidth,
        height: secondaryBarHeight,
        fill: secondaryFillColor,
        fillOpacity: 0.5
      }))
    );
  }), projectedData.map(function (d, index) {
    var barHeight = graphHeight - yScale(d.value);
    var barY = graphHeight - barHeight;
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React.createElement(React.Fragment, {
        key: index + data.length
      }, variant === BarChartVariant.SMALL && /*#__PURE__*/React.createElement(BarRounded, {
        radius: 2,
        all: true,
        x: xScale(index + data.length),
        y: 0,
        width: barWidth,
        height: graphHeight,
        fill: bgColor
      }), /*#__PURE__*/React.createElement(BarRounded, {
        radius: 2,
        all: true,
        x: xScale(index + data.length),
        y: barY,
        width: barWidth,
        height: barHeight,
        fill: projectedFillColor,
        stroke: projectedStrokeColor,
        strokeDasharray: "4,4"
      }))
    );
  }), lineY && /*#__PURE__*/React.createElement(Line, {
    from: {
      x: 0,
      y: lineY
    },
    to: {
      x: graphWidth,
      y: lineY
    },
    stroke: fillColor,
    strokeDasharray: "2,3"
  })), lineY && labelLine && /*#__PURE__*/React.createElement(LineLabel, {
    top: lineY + margins.top,
    right: 0
  }, labelLine), variant === BarChartVariant.LARGE && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HorizontalAxis, {
    variant: variant,
    scale: xScale,
    data: concatenatedData,
    barWidth: barWidth
  }), /*#__PURE__*/React.createElement(VerticalAxis, {
    labelMin: labelMin,
    labelMax: labelMax
  })));
};