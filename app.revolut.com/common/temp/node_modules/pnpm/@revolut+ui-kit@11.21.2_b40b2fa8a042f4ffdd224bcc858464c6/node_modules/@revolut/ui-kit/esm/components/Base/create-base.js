/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import isPropValid from '@emotion/is-prop-valid';
import { isString, omitBy } from "../../utils";
import { BLACKLIST } from "./constants";
var blacklistFilter = omitBy(function (key) {
  return !BLACKLIST.includes(key);
});
var strictFilter = omitBy(function (key) {
  return isPropValid(key);
});
export function createBase(DefaultComp) {
  var Base = /*#__PURE__*/forwardRef(function (_ref, ref) {
    var _ref$use = _ref.use,
        Comp = _ref$use === void 0 ? DefaultComp : _ref$use,
        rest = _objectWithoutPropertiesLoose(_ref, ["use"]);

    var filteredProps = blacklistFilter(rest);

    if (isString(Comp)) {
      // @ts-ignore Expression produces a union type that is too complex to represent
      return /*#__PURE__*/React.createElement(Comp, _extends({
        ref: ref
      }, strictFilter(filteredProps)));
    }

    return /*#__PURE__*/React.createElement(Comp, _extends({
      ref: ref
    }, filteredProps));
  });
  Base.displayName = 'Base';
  return Base;
}