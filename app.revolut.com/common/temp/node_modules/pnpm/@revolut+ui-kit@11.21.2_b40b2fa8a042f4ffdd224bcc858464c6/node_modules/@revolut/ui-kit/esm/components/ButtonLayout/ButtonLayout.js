/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _BUTTON_ICON_SIZE;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import { ButtonSize, ButtonVariant, Space } from "../../constants";
import { useMessage } from "../../hooks";
import { ButtonBase } from "../ButtonBase";
import { Spinner } from "../Spinner";
import { Box } from "../Box";
var BUTTON_ICON_SIZE = (_BUTTON_ICON_SIZE = {}, _BUTTON_ICON_SIZE[ButtonSize.XS] = 16, _BUTTON_ICON_SIZE[ButtonSize.SM] = 16, _BUTTON_ICON_SIZE[ButtonSize.MD] = 24, _BUTTON_ICON_SIZE[ButtonSize.TAG] = 16, _BUTTON_ICON_SIZE);
export var ButtonLayout = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var Icon = _ref.useIcon,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? ButtonSize.MD : _ref$size,
      _ref$pending = _ref.pending,
      pending = _ref$pending === void 0 ? false : _ref$pending,
      labelPending = _ref.labelPending,
      children = _ref.children,
      EndIcon = _ref.useEndIcon,
      variant = _ref.variant,
      rest = _objectWithoutPropertiesLoose(_ref, ["useIcon", "size", "pending", "labelPending", "children", "useEndIcon", "variant"]);

  var m = useMessage();
  var iconSpace = variant === ButtonVariant.BAR ? Space.S_4 : Space.S_8;
  var iconSize = variant === ButtonVariant.BAR ? 16 : BUTTON_ICON_SIZE[size];
  return /*#__PURE__*/React.createElement(ButtonBase, _extends({
    ref: ref,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    "aria-label": pending ? labelPending != null ? labelPending : m('label.pending-state') : undefined
  }, rest), !pending && Icon && /*#__PURE__*/React.createElement(Box, {
    use: "span",
    mr: children ? iconSpace : Space.NONE
  }, /*#__PURE__*/React.createElement(Icon, {
    size: iconSize
  })), pending ? /*#__PURE__*/React.createElement(Spinner, {
    size: iconSize
  }) : children, variant === ButtonVariant.BAR && children && !EndIcon && !pending && /*#__PURE__*/React.createElement(Box, {
    use: "span",
    mr: Space.S_4
  }), !pending && EndIcon && /*#__PURE__*/React.createElement(Box, {
    use: "span",
    ml: children ? iconSpace : Space.NONE
  }, /*#__PURE__*/React.createElement(EndIcon, {
    size: iconSize
  })));
});