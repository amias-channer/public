/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useMemo } from 'react';
import { usePopupContext } from "../Popup/PopupContext";
import { DEFAULT_FIRST_DAY_OF_WEEK } from "./constants";
import { useLocaleUtils } from "./hooks";
import { CalendarCell } from "./CalendarCell";
import { CalendarBaseGeneral } from "./CalendarBaseGeneral";
import { CalendarBaseInfiniteScroll } from "./CalendarBaseInfiniteScroll";

var defaultDayRenderer = function defaultDayRenderer(day) {
  return /*#__PURE__*/React.createElement(CalendarCell, null, day.getDate());
};

var getEventsDayRenderer = function getEventsDayRenderer(events) {
  var eventsMap = events.reduce(function (acc, _ref) {
    var date = _ref.date,
        color = _ref.color;
    var dateNumber = new Date(new Date(date).setHours(0, 0, 0, 0)).getTime();

    if (acc.has(dateNumber)) {
      var _acc$get;

      var colors = (_acc$get = acc.get(dateNumber)) != null ? _acc$get : [];
      acc.set(dateNumber, [].concat(colors, [color]));
    } else {
      acc.set(dateNumber, [color]);
    }

    return acc;
  }, new Map());
  return function (day) {
    var dateNumber = new Date(new Date(day).setHours(0, 0, 0, 0)).getTime();
    return /*#__PURE__*/React.createElement(CalendarCell, {
      dots: eventsMap.get(dateNumber)
    }, day.getDate());
  };
};

export function CalendarBase(_ref2) {
  var locale = _ref2.locale,
      _ref2$firstDayOfWeek = _ref2.firstDayOfWeek,
      firstDayOfWeek = _ref2$firstDayOfWeek === void 0 ? DEFAULT_FIRST_DAY_OF_WEEK : _ref2$firstDayOfWeek,
      events = _ref2.events,
      _ref2$infinite = _ref2.infinite,
      infinite = _ref2$infinite === void 0 ? false : _ref2$infinite,
      rest = _objectWithoutPropertiesLoose(_ref2, ["locale", "firstDayOfWeek", "events", "infinite"]);

  var popupVariant = usePopupContext();
  var renderDay = useMemo(function () {
    return events ? getEventsDayRenderer(events) : defaultDayRenderer;
  }, [events]);
  var localeUtils = useLocaleUtils(locale);
  return infinite && popupVariant !== null ? /*#__PURE__*/React.createElement(CalendarBaseInfiniteScroll, _extends({
    renderDay: renderDay,
    locale: locale,
    localeUtils: localeUtils,
    firstDayOfWeek: firstDayOfWeek
  }, rest)) : /*#__PURE__*/React.createElement(CalendarBaseGeneral, _extends({
    renderDay: renderDay,
    locale: locale,
    localeUtils: localeUtils,
    firstDayOfWeek: firstDayOfWeek
  }, rest));
}