/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback, useRef } from 'react';
import DayPicker from 'react-day-picker';
import { usePopupContext } from "../Popup/PopupContext";
import { CalendarWrapper } from "./styles";
import { classNames } from "./constants";
import { useBaseCalendarLabels } from "./hooks";
import { CalendarNavbar } from "./CalendarNavbar";
import { CalendarHeader } from "./CalendarHeader";

var getCurrentMonth = function getCurrentMonth() {
  var currentMonth = new Date();
  currentMonth.setHours(0, 0, 0, 0);
  currentMonth.setDate(1);
  return currentMonth;
};

export function CalendarBaseGeneral(_ref) {
  var labelButtonClear = _ref.labelButtonClear,
      labelEmptyValue = _ref.labelEmptyValue,
      valueLabel = _ref.valueLabel,
      onClear = _ref.onClear,
      labelPrev = _ref.labelPrev,
      labelNext = _ref.labelNext,
      hideHeader = _ref.hideHeader,
      rest = _objectWithoutPropertiesLoose(_ref, ["labelButtonClear", "labelEmptyValue", "valueLabel", "onClear", "labelPrev", "labelNext", "hideHeader"]);

  var ref = useRef(null);
  var currentMonth = getCurrentMonth();
  var popupVariant = usePopupContext();
  var labels = useBaseCalendarLabels({
    labelPrev: labelPrev,
    labelNext: labelNext
  });
  var onCaptionClick = useCallback(function () {
    if (ref.current) {
      ref.current.showMonth(currentMonth);
    }
  }, [currentMonth]);
  return /*#__PURE__*/React.createElement(CalendarWrapper, null, /*#__PURE__*/React.createElement(CalendarHeader, {
    hideHeader: hideHeader,
    valueLabel: valueLabel,
    labelEmptyValue: labelEmptyValue,
    labelButtonClear: labelButtonClear,
    onClear: onClear
  }), /*#__PURE__*/React.createElement(DayPicker, _extends({
    ref: ref,
    navbarElement: CalendarNavbar,
    showOutsideDays: true,
    fixedWeeks: popupVariant !== null,
    labels: labels,
    enableOutsideDaysClick: false,
    onCaptionClick: onCaptionClick,
    classNames: classNames
  }, rest)));
}