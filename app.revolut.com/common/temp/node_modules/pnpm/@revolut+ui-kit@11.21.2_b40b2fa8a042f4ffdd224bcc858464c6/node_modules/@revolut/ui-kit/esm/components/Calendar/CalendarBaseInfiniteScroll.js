/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback, useEffect, useRef, useState } from 'react';
import DayPicker, { DateUtils } from 'react-day-picker';
import { getWeeksInMonth } from 'date-fns';
import { useVirtual } from 'react-virtual';
import { rem } from 'polished';
import styled from 'styled-components';
import { Absolute } from "../Position";
import { Weekdays } from "./Weekdays";
import { classNames } from "./constants";
import { CalendarWrapper } from "./styles";
var MonthWrapper = /*#__PURE__*/styled(Absolute).withConfig({
  displayName: "CalendarBaseInfiniteScroll__MonthWrapper",
  componentId: "cxhzzh-0"
})([""]);
MonthWrapper.defaultProps = {
  top: 0,
  left: 0,
  minWidth: '100%'
};
export function CalendarBaseInfiniteScroll(_ref) {
  var locale = _ref.locale,
      initialMonth = _ref.initialMonth,
      firstDayOfWeek = _ref.firstDayOfWeek,
      rest = _objectWithoutPropertiesLoose(_ref, ["locale", "initialMonth", "firstDayOfWeek"]);

  var _useState = useState(initialMonth != null ? initialMonth : new Date()),
      firstMonth = _useState[0];

  var _useState2 = useState(4),
      numberOfMonths = _useState2[0],
      setNumberOfMonths = _useState2[1];

  var parentRef = useRef(null);
  var estimateSize = useCallback(function (index) {
    var date = DateUtils.addMonths(firstMonth, index);
    var weeks = getWeeksInMonth(date, {
      weekStartsOn: firstDayOfWeek
    });
    return 36 + 16 + 56 * weeks;
  }, [firstMonth, firstDayOfWeek]);
  var rowVirtualizer = useVirtual({
    size: numberOfMonths,
    parentRef: parentRef,
    estimateSize: estimateSize
  });
  useEffect(function () {
    var _reverse = [].concat(rowVirtualizer.virtualItems).reverse(),
        lastItem = _reverse[0];

    if (!lastItem) {
      return;
    }

    if (lastItem.index >= numberOfMonths - 1) {
      setNumberOfMonths(function (currentValue) {
        return currentValue + 5;
      });
    }
  }, [rowVirtualizer.virtualItems, numberOfMonths]);
  var navbarElement = useCallback(function () {
    return null;
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Weekdays, {
    locale: locale,
    firstDayOfWeek: firstDayOfWeek
  }), /*#__PURE__*/React.createElement(CalendarWrapper, {
    ref: parentRef,
    overflow: "auto",
    flex: 1
  }, rowVirtualizer.virtualItems.map(function (virtual) {
    return /*#__PURE__*/React.createElement(MonthWrapper, {
      key: virtual.index,
      height: rem(virtual.size),
      style: {
        transform: "translateY(" + rem(virtual.start) + ")"
      }
    }, /*#__PURE__*/React.createElement(DayPicker, _extends({
      locale: locale,
      firstDayOfWeek: firstDayOfWeek,
      navbarElement: navbarElement,
      enableOutsideDaysClick: false,
      month: DateUtils.addMonths(firstMonth, virtual.index),
      canChangeMonth: false,
      classNames: classNames,
      showWeekDays: false
    }, rest)));
  })));
}