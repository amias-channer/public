/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback } from 'react';
import { useControlled, useSupportedLocale } from "../../hooks";
import { useDateModifiers, useFormatDate } from "./hooks";
import { CalendarBase } from "./CalendarBase";
export function CalendarDate(_ref) {
  var localeProp = _ref.locale,
      controlledValue = _ref.value,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue,
      onChange = _ref.onChange,
      rest = _objectWithoutPropertiesLoose(_ref, ["locale", "value", "defaultValue", "onChange"]);

  var _useControlled = useControlled({
    defaultValue: defaultValue,
    value: controlledValue,
    onChange: onChange
  }),
      value = _useControlled[0],
      setValue = _useControlled[1];

  var locale = useSupportedLocale(localeProp, [Intl.DateTimeFormat]);
  var formatDate = useFormatDate(locale);
  var customModifiers = useDateModifiers(value);
  var onDayClickHandler = useCallback(function (day, modifiers) {
    if (modifiers.disabled) {
      return;
    }

    setValue(day);
  }, [setValue]);
  return /*#__PURE__*/React.createElement(CalendarBase, _extends({
    selectedDays: value != null ? value : undefined,
    initialMonth: value != null ? value : undefined,
    modifiers: customModifiers,
    onClear: function onClear() {
      return setValue(null);
    },
    valueLabel: value && formatDate(value),
    onDayClick: onDayClickHandler,
    locale: locale
  }, rest));
}