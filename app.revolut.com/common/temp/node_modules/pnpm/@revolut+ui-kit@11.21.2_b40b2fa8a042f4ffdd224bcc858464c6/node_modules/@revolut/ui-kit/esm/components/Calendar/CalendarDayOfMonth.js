/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback } from 'react';
import DayPicker, { LocaleUtils } from 'react-day-picker';
import { renderNothing } from "../../utils";
import { useControlled } from "../../hooks";
import { CalendarHeader } from "./CalendarHeader";
import { CalendarCell } from "./CalendarCell";
import { DATE_OF_MONTH_INITIAL_MONTH, DEFAULT_FIRST_DAY_OF_WEEK, classNames } from "./constants";
import { useDayOfMonthDisabledDays, useDayOfMonthModifiers } from "./hooks";
import { CalendarWrapper } from "./styles";
import { translateDayOfMonthToDate } from "./utils";

var LOCALE_UTILS = _extends({}, LocaleUtils, {
  formatDay: function formatDay(day) {
    return String(day.getDate());
  }
});

export function CalendarDayOfMonth(_ref) {
  var controlledValue = _ref.value,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue,
      onChange = _ref.onChange,
      labelEmptyValue = _ref.labelEmptyValue,
      labelButtonClear = _ref.labelButtonClear,
      disabledDaysProp = _ref.disabledDays,
      hideHeader = _ref.hideHeader;

  var _useControlled = useControlled({
    value: controlledValue,
    defaultValue: defaultValue,
    onChange: onChange
  }),
      value = _useControlled[0],
      setValue = _useControlled[1];

  var disabledDays = useDayOfMonthDisabledDays(disabledDaysProp);
  var customModifiers = useDayOfMonthModifiers(value, disabledDays);
  var onDayClickHandler = useCallback(function (day, modifiers) {
    if (modifiers.disabled) {
      return;
    }

    setValue(day.getDate());
  }, [setValue]);
  return /*#__PURE__*/React.createElement(CalendarWrapper, null, /*#__PURE__*/React.createElement(CalendarHeader, {
    hideHeader: hideHeader,
    labelEmptyValue: value ? null : labelEmptyValue,
    labelButtonClear: labelButtonClear,
    onClear: function onClear() {
      return setValue(null);
    }
  }), /*#__PURE__*/React.createElement(DayPicker, {
    selectedDays: value ? translateDayOfMonthToDate(value) : undefined,
    onDayClick: onDayClickHandler,
    firstDayOfWeek: DEFAULT_FIRST_DAY_OF_WEEK,
    initialMonth: DATE_OF_MONTH_INITIAL_MONTH,
    modifiers: customModifiers,
    localeUtils: LOCALE_UTILS,
    navbarElement: renderNothing,
    weekdayElement: renderNothing,
    captionElement: renderNothing,
    renderDay: renderDay,
    classNames: classNames,
    canChangeMonth: false
  }));
}

var renderDay = function renderDay(day) {
  return /*#__PURE__*/React.createElement(CalendarCell, null, day.getDate());
};