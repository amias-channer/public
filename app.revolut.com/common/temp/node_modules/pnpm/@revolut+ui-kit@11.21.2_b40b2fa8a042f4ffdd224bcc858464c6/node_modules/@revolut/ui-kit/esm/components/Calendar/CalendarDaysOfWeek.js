/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { useControlled, useSupportedLocale } from "../../hooks";
import { Space } from "../../constants";
import { Flex } from "../Flex";
import { ToggleButton } from "../ToggleButton";
import { CheckboxGroup } from "../CheckboxGroup";
import { CalendarWrapper } from "./styles";
import { DEFAULT_FIRST_DAY_OF_WEEK } from "./constants";
import { useDaysOfWeek, useFormatDaysOfWeek } from "./hooks";
import { CalendarHeader } from "./CalendarHeader";
export function CalendarDaysOfWeek(_ref) {
  var _ref$firstDayOfWeek = _ref.firstDayOfWeek,
      firstDayOfWeek = _ref$firstDayOfWeek === void 0 ? DEFAULT_FIRST_DAY_OF_WEEK : _ref$firstDayOfWeek,
      localeProp = _ref.locale,
      controlledValue = _ref.value,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue,
      onChange = _ref.onChange,
      labelEmptyValue = _ref.labelEmptyValue,
      labelButtonClear = _ref.labelButtonClear,
      hideHeader = _ref.hideHeader;

  var _useControlled = useControlled({
    value: controlledValue,
    defaultValue: defaultValue,
    onChange: onChange
  }),
      value = _useControlled[0],
      setValue = _useControlled[1];

  var locale = useSupportedLocale(localeProp, [Intl.DateTimeFormat]);
  var formatDaysOfWeek = useFormatDaysOfWeek(locale, firstDayOfWeek);
  var daysOfWeek = useDaysOfWeek(locale, firstDayOfWeek);
  return /*#__PURE__*/React.createElement(CalendarWrapper, null, /*#__PURE__*/React.createElement(CalendarHeader, {
    hideHeader: hideHeader,
    valueLabel: value && formatDaysOfWeek(value),
    labelEmptyValue: labelEmptyValue,
    labelButtonClear: labelButtonClear,
    onClear: function onClear() {
      return setValue(null);
    }
  }), /*#__PURE__*/React.createElement(Flex, {
    px: Space.S_16,
    pb: Space.S_16,
    justifyContent: "space-around"
  }, /*#__PURE__*/React.createElement(CheckboxGroup, {
    value: value != null ? value : [],
    onChange: function onChange(nextValue) {
      return setValue(nextValue);
    }
  }, function (group) {
    return daysOfWeek.map(function (_ref2) {
      var dayOfWeek = _ref2.dayOfWeek,
          label = _ref2.label;
      return /*#__PURE__*/React.createElement(ToggleButton, _extends({
        key: dayOfWeek
      }, group.getInputProps({
        value: dayOfWeek
      })), label);
    });
  })));
}