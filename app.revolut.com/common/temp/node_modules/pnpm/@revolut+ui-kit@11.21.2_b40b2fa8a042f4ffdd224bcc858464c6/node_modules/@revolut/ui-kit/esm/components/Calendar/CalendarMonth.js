/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import React, { useMemo, useState } from 'react';
import { DateUtils } from 'react-day-picker';
import { Space } from "../../constants";
import { useControlled, useSupportedLocale } from "../../hooks";
import { TableContainer } from "./TableContainer";
import { CalendarHeader } from "./CalendarHeader";
import { CalendarNavbar } from "./CalendarNavbar";
import { CalendarCell } from "./CalendarCell";
import { MONTHS_IN_YEAR, classNames, modifiers } from "./constants";
import { useBaseCalendarLabels, useFormatMonth, useMonthsLayout } from "./hooks";
import { CalendarWrapper } from "./styles";
export function CalendarMonth(_ref) {
  var localeProp = _ref.locale,
      controlledValue = _ref.value,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue,
      onChange = _ref.onChange,
      labelEmptyValue = _ref.labelEmptyValue,
      labelButtonClear = _ref.labelButtonClear,
      labelPrev = _ref.labelPrev,
      labelNext = _ref.labelNext,
      disabledDays = _ref.disabledDays,
      hideHeader = _ref.hideHeader;

  var _useControlled = useControlled({
    value: controlledValue,
    defaultValue: defaultValue,
    onChange: onChange
  }),
      value = _useControlled[0],
      setValue = _useControlled[1];

  var _useState = useState(value ? new Date(value.getFullYear(), 0, 1) : new Date(new Date().getFullYear(), 0, 1)),
      year = _useState[0],
      setYear = _useState[1];

  var locale = useSupportedLocale(localeProp, [Intl.DateTimeFormat]);
  var formatMonth = useFormatMonth(locale);
  var monthsLayout = useMonthsLayout(year, locale);
  var yearLabel = year.getFullYear();
  var modifiersObj = useMemo(function () {
    var _ref2;

    return _ref2 = {}, _ref2[classNames.disabled] = disabledDays, _ref2[classNames.today] = function (date) {
      return DateUtils.isSameMonth(date, new Date());
    }, _ref2[modifiers.SELECTED_CUSTOM] = function (date) {
      return value ? DateUtils.isSameMonth(value, date) : false;
    }, _ref2;
  }, [disabledDays, value]);
  var labels = useBaseCalendarLabels({
    labelPrev: labelPrev,
    labelNext: labelNext
  });
  return /*#__PURE__*/React.createElement(CalendarWrapper, null, /*#__PURE__*/React.createElement(CalendarHeader, {
    hideHeader: hideHeader,
    valueLabel: value && formatMonth(value),
    labelEmptyValue: labelEmptyValue,
    labelButtonClear: labelButtonClear,
    onClear: function onClear() {
      return setValue(null);
    }
  }), /*#__PURE__*/React.createElement(TableContainer, null, /*#__PURE__*/React.createElement(TableContainer.InnerWrapper, null, /*#__PURE__*/React.createElement(CalendarNavbar, {
    onPreviousClick: function onPreviousClick() {
      return setYear(DateUtils.addMonths(year, -MONTHS_IN_YEAR));
    },
    onNextClick: function onNextClick() {
      return setYear(DateUtils.addMonths(year, MONTHS_IN_YEAR));
    },
    labels: labels
  }), /*#__PURE__*/React.createElement(TableContainer.Table, null, /*#__PURE__*/React.createElement(TableContainer.Caption, null, yearLabel), /*#__PURE__*/React.createElement(TableContainer.TableBody, null, monthsLayout.map(function (row) {
    return /*#__PURE__*/React.createElement(TableContainer.TableRow, {
      key: yearLabel + "-" + row[0].title
    }, row.map(function (_ref3) {
      var title = _ref3.title,
          label = _ref3.label,
          monthValue = _ref3.monthValue;
      return /*#__PURE__*/React.createElement(TableContainer.TableCell, {
        key: yearLabel + "-" + title,
        value: monthValue,
        onChange: setValue,
        label: label,
        modifiersObj: modifiersObj
      }, /*#__PURE__*/React.createElement(CalendarCell, {
        width: "fit-content",
        px: Space.S_8
      }, title));
    }));
  }))))));
}