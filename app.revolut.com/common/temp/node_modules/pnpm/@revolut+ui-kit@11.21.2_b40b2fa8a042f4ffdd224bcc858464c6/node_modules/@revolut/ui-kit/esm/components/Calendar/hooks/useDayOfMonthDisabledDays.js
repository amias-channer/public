/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { useMemo } from 'react';
import { translateDayOfMonthToDate } from "../utils";
export var useDayOfMonthDisabledDays = function useDayOfMonthDisabledDays(disabledDaysModifiers) {
  return useMemo(function () {
    return translateDisabledDaysModifiers(disabledDaysModifiers);
  }, [disabledDaysModifiers]);
};

function translateDisabledDaysModifiers(disabledDaysModifiers) {
  if (Array.isArray(disabledDaysModifiers)) {
    return disabledDaysModifiers.map(translateDisabledDaysModifier);
  }

  return translateDisabledDaysModifier(disabledDaysModifiers);
}

function translateDisabledDaysModifier(disabledDaysModifier) {
  if (disabledDaysModifier === undefined) {
    return undefined;
  }

  if (typeof disabledDaysModifier === 'number') {
    return translateDayOfMonthToDate(disabledDaysModifier);
  }

  if (typeof disabledDaysModifier === 'function') {
    return function (date) {
      return disabledDaysModifier(date.getDate());
    };
  }

  if ('daysOfWeek' in disabledDaysModifier) {
    return disabledDaysModifier;
  }

  if ('from' in disabledDaysModifier && 'to' in disabledDaysModifier) {
    return {
      from: translateDayOfMonthToDate(disabledDaysModifier.from),
      to: translateDayOfMonthToDate(disabledDaysModifier.to)
    };
  }

  if ('after' in disabledDaysModifier && 'before' in disabledDaysModifier) {
    return {
      before: translateDayOfMonthToDate(disabledDaysModifier.before),
      after: translateDayOfMonthToDate(disabledDaysModifier.after)
    };
  }

  if ('before' in disabledDaysModifier) {
    return {
      before: translateDayOfMonthToDate(disabledDaysModifier.before)
    };
  }

  if ('after' in disabledDaysModifier) {
    return {
      after: translateDayOfMonthToDate(disabledDaysModifier.after)
    };
  }
}