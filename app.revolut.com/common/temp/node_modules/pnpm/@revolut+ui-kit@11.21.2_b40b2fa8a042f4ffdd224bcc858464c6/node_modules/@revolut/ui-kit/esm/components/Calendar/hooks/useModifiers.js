/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { useMemo } from 'react';
import { DateUtils, ModifiersUtils } from 'react-day-picker';
import { endOfMonth, startOfMonth } from 'date-fns';
import { modifiers } from "../constants";
export var useDateModifiers = function useDateModifiers(value) {
  return useMemo(function () {
    var _ref;

    return _ref = {}, _ref[modifiers.SELECTED_CUSTOM] = function (date) {
      return value && date ? DateUtils.isSameDay(value, date) : false;
    }, _ref;
  }, [value]);
};
export var useRangeModifiers = function useRangeModifiers(firstDayOfWeek, value, infinite) {
  return useMemo(function () {
    var _ref2;

    return _ref2 = {}, _ref2[modifiers.SELECTED_CUSTOM] = function (date) {
      if (!value) {
        return false;
      }

      return DateUtils.isSameDay(value.from, date) || DateUtils.isSameDay(value.to, date);
    }, _ref2[modifiers.RANGE] = function (date) {
      return value ? DateUtils.isDayInRange(date, value) : false;
    }, _ref2[modifiers.RANGE_FROM] = function (date) {
      return value ? DateUtils.isSameDay(date, value.from) : false;
    }, _ref2[modifiers.RANGE_TO] = function (date) {
      return value ? DateUtils.isSameDay(date, value.to) : false;
    }, _ref2[modifiers.WEEK_START] = {
      daysOfWeek: [firstDayOfWeek]
    }, _ref2[modifiers.WEEK_END] = {
      daysOfWeek: [(firstDayOfWeek + 6) % 7]
    }, _ref2[modifiers.MONTH_START] = function (date) {
      return infinite && value ? DateUtils.isSameDay(date, startOfMonth(date)) : false;
    }, _ref2[modifiers.MONTH_END] = function (date) {
      return infinite && value ? DateUtils.isSameDay(date, endOfMonth(date)) : false;
    }, _ref2;
  }, [value, firstDayOfWeek, infinite]);
};
export var useDayOfMonthModifiers = function useDayOfMonthModifiers(value, disabledDays) {
  return useMemo(function () {
    var _ref3;

    return _ref3 = {}, _ref3[modifiers.SELECTED_CUSTOM] = function (date) {
      return value ? date.getDate() === value : false;
    }, _ref3.disabled = function disabled(date) {
      return ModifiersUtils.dayMatchesModifier(date, disabledDays);
    }, _ref3;
  }, [value, disabledDays]);
};
export var useMonthModifiers = function useMonthModifiers(value) {
  return useMemo(function () {
    var _ref4;

    return _ref4 = {}, _ref4[modifiers.SELECTED_CUSTOM] = function (date) {
      return value && date ? DateUtils.isSameMonth(value, date) : false;
    }, _ref4;
  }, [value]);
};