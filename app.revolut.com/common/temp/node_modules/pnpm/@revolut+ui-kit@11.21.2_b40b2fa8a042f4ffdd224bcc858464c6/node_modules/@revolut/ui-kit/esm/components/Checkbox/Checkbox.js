/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import * as Icons from '@revolut/icons';
import { noop } from "../../utils";
import { Color } from "../../constants";
import { useCheckbox } from "../../hooks";
import { CheckboxWrapper } from "./CheckboxWrapper";
import { CheckboxInput } from "./CheckboxInput";
import { CheckboxLabel } from "./CheckboxLabel";
import { CheckboxDescription } from "./CheckboxDescription";

function defaultRender(state) {
  if (state.isActive) {
    return /*#__PURE__*/React.createElement(Icons.CheckboxOn, {
      size: 24
    });
  }

  if (state.isIndeterminate) {
    return /*#__PURE__*/React.createElement(Icons.CheckboxMultiple, {
      size: 24
    });
  }

  return /*#__PURE__*/React.createElement(Icons.CheckboxOff, {
    size: 24
  });
}

function defaultColor(state) {
  if (state.hasError) {
    return state.isDisabled ? Color.RED_40 : Color.ERROR;
  }

  if (state.isActive || state.isIndeterminate || state.isFocused) {
    return state.isDisabled ? Color.BLUE_40 : Color.BLUE;
  }

  return Color.GREY_TONE_20;
}

var CheckboxBase = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'checkbox' : _ref$type,
      checked = _ref.checked,
      defaultChecked = _ref.defaultChecked,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$indeterminate = _ref.indeterminate,
      indeterminate = _ref$indeterminate === void 0 ? false : _ref$indeterminate,
      _ref$hasError = _ref.hasError,
      hasError = _ref$hasError === void 0 ? false : _ref$hasError,
      wrapper = _ref.wrapper,
      children = _ref.children,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? defaultColor : _ref$color,
      _ref$render = _ref.render,
      render = _ref$render === void 0 ? defaultRender : _ref$render,
      rest = _objectWithoutPropertiesLoose(_ref, ["type", "checked", "defaultChecked", "disabled", "indeterminate", "hasError", "wrapper", "children", "onChange", "color", "render"]);

  var _useCheckbox = useCheckbox({
    isIndeterminate: indeterminate,
    isActive: checked,
    defaultIsActive: defaultChecked,
    onChange: onChange,
    isDisabled: disabled
  }),
      state = _useCheckbox[0],
      getProps = _useCheckbox[1];

  return /*#__PURE__*/React.createElement(CheckboxWrapper, _extends({
    label: children,
    input: /*#__PURE__*/React.createElement(CheckboxInput, _extends({}, getProps({
      ref: ref,
      type: type
    }), rest)),
    indicator: render(state),
    color: color(_extends({}, state, {
      hasError: hasError
    }))
  }, state, wrapper));
});
export var Checkbox = Object.assign(CheckboxBase, {
  Label: CheckboxLabel,
  Description: CheckboxDescription
});