/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import { Color, Space, Transition } from "../../constants";
import { themeTransition } from "../../utils";
import { Box } from "../Box";
import { Flex } from "../Flex";

var CheckboxWrapperBase = function CheckboxWrapperBase(_ref) {
  var isDisabled = _ref.isDisabled,
      label = _ref.label,
      input = _ref.input,
      indicator = _ref.indicator,
      rest = _objectWithoutPropertiesLoose(_ref, ["isDisabled", "label", "input", "indicator"]);

  if (label != null) {
    return /*#__PURE__*/React.createElement(Flex, _extends({
      use: "label",
      alignItems: "center"
    }, rest), /*#__PURE__*/React.createElement(Box, {
      flex: "0 0 auto"
    }, indicator, input), /*#__PURE__*/React.createElement(Box, {
      flex: "1 1 auto",
      ml: indicator ? Space.S_16 : undefined,
      color: isDisabled ? Color.GREY_TONE_50 : Color.FOREGROUND,
      minWidth: 0
    }, label));
  }

  return /*#__PURE__*/React.createElement(Box, rest, indicator, input);
};
/** @private */


export var CheckboxWrapper = /*#__PURE__*/styled(CheckboxWrapperBase).withConfig({
  displayName: "CheckboxWrapper",
  componentId: "sc-167fmps-0"
})(["position:relative;transition:", ";cursor:pointer;"], themeTransition(Transition.TEXT));