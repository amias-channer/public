/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { rem } from 'polished';
import React, { forwardRef, useCallback, useEffect, useRef } from 'react';
import { AppearanceTransitionDirection, InputSize, InputVariant, OutgoingTransitionDirection } from "../../legacy/components/Input/constants";
import { noop } from "../../utils";
import { CodeInputBase } from "./styles";
import { KeyboardEventKey } from "../../constants";
var INPUT_PATTERN = new RegExp('^[0-9]$');
export var CodeInputType = {
  NUMBER: 'number',
  PIN: 'pin'
};
export var CodeInput = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _ref$isFilled = _ref.isFilled,
      isFilled = _ref$isFilled === void 0 ? false : _ref$isFilled,
      disabled = _ref.disabled,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? InputVariant.FILLED : _ref$variant,
      onFocus = _ref.onFocus,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      _ref$onKeyDown = _ref.onKeyDown,
      onKeyDown = _ref$onKeyDown === void 0 ? noop : _ref$onKeyDown,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? CodeInputType.PIN : _ref$type,
      _ref$symbol = _ref.symbol,
      symbol = _ref$symbol === void 0 ? 'â€¢' : _ref$symbol,
      value = _ref.value,
      restProps = _objectWithoutPropertiesLoose(_ref, ["isFilled", "disabled", "variant", "onFocus", "onChange", "onKeyDown", "type", "symbol", "value"]);

  var prevFilledState = useRef(true);
  var isPIN = type === CodeInputType.PIN;
  var handleInputChange = useCallback(function (e) {
    var newValue = e.target.value;
    var isInputEmpty = !isPIN && !value || !isFilled;
    var sanitizedValue = isInputEmpty || isPIN ? newValue : newValue.replace(value, '');
    var isNewValueValid = INPUT_PATTERN.test(sanitizedValue);

    if (isNewValueValid) {
      onChange(sanitizedValue);
    }
  }, [isFilled, isPIN, onChange, value]);
  var handleKeyDown = useCallback(function (e) {
    if (e.key === KeyboardEventKey.BACKSPACE || e.key === KeyboardEventKey.DELETE) {
      onChange('');
    }

    onKeyDown(e);
  }, [onChange, onKeyDown]);
  useEffect(function () {
    prevFilledState.current = !isFilled;
  }, [isFilled]);
  var inputValue = '';

  if (isPIN) {
    if (isFilled) inputValue = symbol;
  } else if (value) inputValue = value;

  return /*#__PURE__*/React.createElement(CodeInputBase, _extends({
    ref: ref,
    value: inputValue,
    variant: variant,
    tabIndex: 0,
    type: "text",
    size: InputSize.PIN,
    disabled: disabled,
    border: {
      appearanceDirection: !prevFilledState.current ? AppearanceTransitionDirection.RTL : AppearanceTransitionDirection.LTR,
      outgoingDirection: !isFilled ? OutgoingTransitionDirection.RTL : OutgoingTransitionDirection.LTR
    },
    width: rem(40),
    onFocus: onFocus,
    onKeyDown: handleKeyDown,
    onChange: handleInputChange
  }, restProps, {
    isPIN: isPIN,
    isFilled: isFilled
  }));
});