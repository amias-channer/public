/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import { rem } from 'polished';
import styled from 'styled-components';
import { themeColor } from "../../utils";
import { Checkbox } from "../Checkbox";
import { Circle } from "../Circle";
import { Color } from "../../constants";
var ColorSelectorWrapper = /*#__PURE__*/styled(Circle).withConfig({
  displayName: "ColorSelector__ColorSelectorWrapper",
  componentId: "sc-1rz9oc4-0"
})(["border-width:1px;border-style:solid;border-color:", ";opacity:", ";"], function (props) {
  return props.isActive ? themeColor(Color.GREY_TONE_20) : 'transparent';
}, function (props) {
  return props.isDisabled ? 0.5 : 1;
});
export var ColorSelector = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 40 : _ref$size,
      bg = _ref.bg,
      image = _ref.image,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["size", "bg", "image", "children"]);

  return /*#__PURE__*/React.createElement(Checkbox, _extends({
    ref: ref
  }, rest, {
    render: function render(state) {
      return /*#__PURE__*/React.createElement(ColorSelectorWrapper, _extends({
        size: rem(size + 8)
      }, state), /*#__PURE__*/React.createElement(Circle, {
        size: rem(size),
        bg: bg,
        image: image
      }, children));
    }
  }));
});