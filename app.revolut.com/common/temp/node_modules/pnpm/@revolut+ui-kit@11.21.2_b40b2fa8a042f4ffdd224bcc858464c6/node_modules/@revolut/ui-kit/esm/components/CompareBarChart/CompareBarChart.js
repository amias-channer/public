/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback, useMemo, useState } from 'react';
import { ParentSizeModern } from '@visx/responsive';
import { BarGroup, Line } from '@visx/shape';
import { Group } from '@visx/group';
import { scaleBand, scaleLinear, scaleOrdinal } from '@visx/scale';
import { AxisBottom, AxisRight } from '@visx/axis';
import { darken } from 'polished';
import { Color } from "../../constants";
import { themeColor } from "../../utils";
import { useTheme } from "../../hooks";
import { AXIS_RIGHT_LEFT_MARGIN, AXIS_RIGHT_TOP_MARGIN, COMPARE_BAR_CHART_COLORS, COMPARE_BAR_CHART_HEIGHT, COMPARE_BAR_CHART_MARGIN } from "./constants";
import { CompareBarChartItem, GraphContainer } from "./styled";
export var CompareBarChart = function CompareBarChart(props) {
  return /*#__PURE__*/React.createElement(ParentSizeModern, null, function (_ref) {
    var width = _ref.width;
    return /*#__PURE__*/React.createElement(CompareBarChartInner, _extends({
      width: width,
      height: COMPARE_BAR_CHART_HEIGHT
    }, props));
  });
};

var x0 = function x0(value) {
  return value.label;
};

var CompareBarChartInner = function CompareBarChartInner(_ref2) {
  var width = _ref2.width,
      height = _ref2.height,
      data = _ref2.data,
      onSelect = _ref2.onSelect,
      labelMax = _ref2.labelMax,
      _ref2$labelLine = _ref2.labelLine,
      labelLine = _ref2$labelLine === void 0 ? '0' : _ref2$labelLine,
      labelMin = _ref2.labelMin,
      colors = _ref2.colors,
      rest = _objectWithoutPropertiesLoose(_ref2, ["width", "height", "data", "onSelect", "labelMax", "labelLine", "labelMin", "colors"]);

  var theme = useTheme();
  var textColor = themeColor(Color.GREY_TONE_50)({
    theme: theme
  });

  var _useState = useState(),
      selectedBarIndex = _useState[0],
      setSelectedBarIndex = _useState[1];

  var keys = useMemo(function () {
    return Object.keys(data[0]).filter(function (item) {
      return item !== 'label';
    });
  }, [data]);
  var colorScale = useMemo(function () {
    var _colors$value, _colors$value2, _value;

    return scaleOrdinal({
      domain: keys,
      range: [themeColor((_colors$value = colors == null ? void 0 : colors.value1) != null ? _colors$value : COMPARE_BAR_CHART_COLORS.value1)({
        theme: theme
      }), themeColor((_colors$value2 = colors == null ? void 0 : colors.value2) != null ? _colors$value2 : COMPARE_BAR_CHART_COLORS.value2)({
        theme: theme
      }), themeColor((_value = colors == null ? void 0 : colors.value3) != null ? _value : COMPARE_BAR_CHART_COLORS.value3)({
        theme: theme
      })]
    });
  }, [theme, keys, colors]);
  var graphHeight = height - COMPARE_BAR_CHART_MARGIN.top - COMPARE_BAR_CHART_MARGIN.bottom;
  var graphWidth = width - COMPARE_BAR_CHART_MARGIN.left - COMPARE_BAR_CHART_MARGIN.right;
  var x0Scale = useMemo(function () {
    return scaleBand({
      domain: data.map(function (_ref3) {
        var label = _ref3.label;
        return label;
      }),
      padding: 0.2
    }).rangeRound([0, graphWidth]);
  }, [data, graphWidth]);
  var x1Scale = useMemo(function () {
    return scaleBand({
      domain: keys,
      padding: 0.4
    }).rangeRound([0, x0Scale.bandwidth()]);
  }, [keys, x0Scale]);
  var min = useMemo(function () {
    return Math.min.apply(Math, [0].concat(data.map(function (row) {
      return Math.min(row.value1, row.value2, 'value3' in row ? row.value3 : row.value2);
    })));
  }, [data]);
  var max = useMemo(function () {
    return Math.max.apply(Math, data.map(function (row) {
      return Math.max(row.value1, row.value2, 'value3' in row ? row.value3 : row.value2);
    }));
  }, [data]);
  var yScale = useMemo(function () {
    return scaleLinear({
      domain: [min, max],
      range: [graphHeight, 0]
    });
  }, [min, max, graphHeight]);
  var handleSelected = useCallback(function (index) {
    return function () {
      var nextIndex = selectedBarIndex === index ? undefined : index;
      setSelectedBarIndex(nextIndex);

      if (onSelect) {
        onSelect( // Because we have multiple interfaces for the onSelect handler
        // @ts-expect-error
        nextIndex === undefined ? undefined : data[nextIndex], nextIndex);
      }
    };
  }, [onSelect, selectedBarIndex, data]);
  var asixRightTickFormat = useCallback(function (value) {
    var _label;

    var label;

    switch (value) {
      case 0:
        label = labelLine;
        break;

      case max:
        label = labelMax;
        break;

      case min:
        label = labelMin;
        break;
    }

    return (_label = label) != null ? _label : '';
  }, [labelMin, labelLine, labelMax, min, max]);
  return /*#__PURE__*/React.createElement(GraphContainer, _extends({
    width: width,
    height: height
  }, rest), /*#__PURE__*/React.createElement(Group, {
    top: COMPARE_BAR_CHART_MARGIN.top,
    left: COMPARE_BAR_CHART_MARGIN.left
  }, /*#__PURE__*/React.createElement(BarGroup, {
    data: data,
    keys: keys,
    height: graphHeight,
    x0: x0,
    x0Scale: x0Scale,
    x1Scale: x1Scale,
    yScale: yScale,
    color: colorScale
  }, function (barGroups) {
    return barGroups.map(function (barGroup, index) {
      return /*#__PURE__*/React.createElement(Group, {
        key: "group-" + barGroup.index + "-" + barGroup.x0,
        left: barGroup.x0,
        onClick: handleSelected(index)
      }, barGroup.bars.map(function (bar) {
        return /*#__PURE__*/React.createElement(CompareBarChartItem, {
          key: "bar-rounded-" + barGroup.index + "-" + bar.index + "-" + bar.value + "-" + bar.key,
          x: bar.x,
          y: bar.value > 0 ? bar.y : yScale(0),
          cursor: "pointer",
          width: bar.width,
          height: Math.abs(bar.value > 0 ? yScale(bar.value) - yScale(Math.max(0, min)) : yScale(bar.value) - yScale(0)),
          fill: selectedBarIndex === undefined || index === selectedBarIndex ? bar.color : darken(0.05)(bar.color),
          radius: 2,
          topLeft: bar.value > 0,
          topRight: bar.value > 0,
          bottomLeft: bar.value < 0,
          bottomRight: bar.value < 0,
          style: {
            pointerEvents: onSelect ? 'all' : 'none'
          }
        });
      }));
    });
  })), /*#__PURE__*/React.createElement(AxisBottom, {
    top: graphHeight + COMPARE_BAR_CHART_MARGIN.top,
    scale: x0Scale,
    hideTicks: true,
    hideAxisLine: true,
    tickLabelProps: function tickLabelProps() {
      return {
        fill: textColor,
        fontSize: 12,
        textAnchor: 'middle',
        fontFamily: theme.fonts["default"]
      };
    }
  }), /*#__PURE__*/React.createElement(AxisRight, {
    top: COMPARE_BAR_CHART_MARGIN.top + AXIS_RIGHT_TOP_MARGIN,
    left: width - AXIS_RIGHT_LEFT_MARGIN,
    scale: yScale,
    hideTicks: true,
    hideAxisLine: true,
    tickFormat: asixRightTickFormat,
    tickLabelProps: function tickLabelProps() {
      return {
        fill: textColor,
        fontSize: 12,
        textAnchor: 'end',
        fontFamily: theme.fonts["default"]
      };
    },
    tickValues: [min, 0, max]
  }), /*#__PURE__*/React.createElement(Line, {
    from: {
      x: COMPARE_BAR_CHART_MARGIN.left,
      y: yScale(0) + COMPARE_BAR_CHART_MARGIN.top
    },
    to: {
      x: graphWidth,
      y: yScale(0) + COMPARE_BAR_CHART_MARGIN.top
    },
    stroke: textColor,
    strokeDasharray: "2,3"
  }));
};