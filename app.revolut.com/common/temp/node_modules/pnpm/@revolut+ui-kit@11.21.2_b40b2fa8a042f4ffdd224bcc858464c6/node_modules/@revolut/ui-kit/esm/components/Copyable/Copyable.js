/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/
import _styled2 from "styled-components";
import _styled from "styled-components";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { Copy } from '@revolut/icons';
import { css } from '@styled-system/css';
import { Color, Space } from "../../constants";
import { copyToClipboard } from "../../utils";
import { useDocument, useMessage } from "../../hooks";
import { ButtonBase } from "../ButtonBase";

var _StyledButtonBase = /*#__PURE__*/_styled(ButtonBase).withConfig({
  displayName: "Copyable___StyledButtonBase",
  componentId: "lx09u2-0"
})(["", ""], function (p) {
  return p._css;
});

var _StyledCopy = /*#__PURE__*/_styled(Copy).withConfig({
  displayName: "Copyable___StyledCopy",
  componentId: "lx09u2-1"
})(["", ""], function (p) {
  return p._css2;
});

export function Copyable(_ref) {
  var value = _ref.value,
      onCopy = _ref.onCopy,
      labelButtonCopy = _ref.labelButtonCopy,
      children = _ref.children,
      _onClick = _ref.onClick,
      onError = _ref.onError,
      rest = _objectWithoutPropertiesLoose(_ref, ["value", "onCopy", "labelButtonCopy", "children", "onClick", "onError"]);

  var m = useMessage();
  var doc = useDocument();
  return /*#__PURE__*/React.createElement(_StyledButtonBase, _extends({
    onClick: function onClick(event) {
      _onClick == null ? void 0 : _onClick(event);

      if (value != null && !event.defaultPrevented && doc) {
        copyToClipboard(value, doc).then(function () {
          return onCopy == null ? void 0 : onCopy(value);
        })["catch"](onError);
      }
    },
    "aria-label": labelButtonCopy != null ? labelButtonCopy : m('action.copy')
  }, rest, {
    _css: css({
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between',
      color: Color.BLUE,
      width: '100%'
    })
  }), children, /*#__PURE__*/React.createElement(_StyledCopy, {
    size: 16,
    _css2: css({
      flex: '0 0 auto',
      marginLeft: Space.S_8
    })
  }));
}