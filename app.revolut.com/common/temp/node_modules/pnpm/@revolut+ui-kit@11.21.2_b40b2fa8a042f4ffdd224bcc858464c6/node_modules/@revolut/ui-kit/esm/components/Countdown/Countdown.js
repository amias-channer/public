/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _Sizes, _ProgressColors, _ProgressStrokeWidth;

import React, { useState } from 'react';
import { noop } from "../../utils";
import { useFrame } from "../../hooks";
import { Relative } from "../Position";
import { ProgressCircle } from "../ProgressCircle";
import { CountdownSize } from "./sizes";
import { Timer } from "./Timer";
import { Color } from "../../constants";

function getState(start, end) {
  var timer = Math.max(Number(end) - Date.now(), 0);
  var progress = timer / (Number(end) - Number(start));
  var isDone = timer === 0;
  return {
    timer: timer,
    progress: progress,
    isDone: isDone
  };
}

var Sizes = (_Sizes = {}, _Sizes[CountdownSize.MD] = 94, _Sizes[CountdownSize.SM] = 24, _Sizes);
var ProgressColors = (_ProgressColors = {}, _ProgressColors[CountdownSize.MD] = undefined, _ProgressColors[CountdownSize.SM] = Color.FOREGROUND, _ProgressColors);
var ProgressStrokeWidth = (_ProgressStrokeWidth = {}, _ProgressStrokeWidth[CountdownSize.MD] = 3, _ProgressStrokeWidth[CountdownSize.SM] = 2, _ProgressStrokeWidth);
export var Countdown = function Countdown(_ref) {
  var start = _ref.start,
      end = _ref.end,
      _ref$onDone = _ref.onDone,
      onDone = _ref$onDone === void 0 ? noop : _ref$onDone,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? CountdownSize.MD : _ref$size;

  var _useState = useState(getState(start, end)),
      state = _useState[0],
      setState = _useState[1];

  useFrame(function () {
    var next = getState(start, end);
    setState(function (prev) {
      return prev.progress === next.progress ? prev : next;
    });
    if (next.isDone) onDone();
  }, !state.isDone);
  return /*#__PURE__*/React.createElement(Relative, {
    size: Sizes[size]
  }, /*#__PURE__*/React.createElement(ProgressCircle, {
    strokeWidth: ProgressStrokeWidth[size],
    size: Sizes[size],
    value: state.progress,
    color: ProgressColors[size]
  }), /*#__PURE__*/React.createElement(Timer, {
    value: state.timer,
    size: size
  }));
};