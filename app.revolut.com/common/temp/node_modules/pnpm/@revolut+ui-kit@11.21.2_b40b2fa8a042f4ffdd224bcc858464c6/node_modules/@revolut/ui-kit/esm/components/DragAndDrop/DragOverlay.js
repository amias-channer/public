/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _PROPS;

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useMemo } from 'react';
import * as DndKit from '@dnd-kit/core';
import { isFunction } from "../../utils";
import { useLatestRef } from "../../hooks";
import { Portal } from "../Portal";
import { useDragAndDropContext } from "./DragAndDropContext";
import { useContext } from "./useContext";
import { DragType } from "./constants";
var BASE_PROPS = {
  use: 'span',
  style: {
    cursor: 'grabbing'
  }
};
var PROPS = (_PROPS = {}, _PROPS[DragType.APP_ICON] = _extends({}, BASE_PROPS, {
  style: _extends({}, BASE_PROPS.style, {
    transform: 'scale(1.05)'
  })
}), _PROPS[DragType.TAB] = BASE_PROPS, _PROPS[DragType.SIDE_NAV_ITEM] = BASE_PROPS, _PROPS[DragType.DEFAULT] = BASE_PROPS, _PROPS);
var BASE_DROP_ANIMATION = {
  duration: 250,
  easing: 'ease'
};

var HIDDEN_DROP_ANIMATION = _extends({}, BASE_DROP_ANIMATION, {
  dragSourceOpacity: 0
});

var APP_ICON_DROP_ANIMATION = _extends({}, BASE_DROP_ANIMATION, {
  dragSourceOpacity: 1
});

var OVER_APP_ICON_DROP_ANIMATION = _extends({}, BASE_DROP_ANIMATION, {
  duration: 0,
  dragSourceOpacity: 0.3
});

function getDropAnimation(type, prevOver) {
  switch (type) {
    case DragType.APP_ICON:
      return prevOver ? OVER_APP_ICON_DROP_ANIMATION : APP_ICON_DROP_ANIMATION;

    case DragType.SIDE_NAV_ITEM:
    case DragType.TAB:
      return HIDDEN_DROP_ANIMATION;

    default:
      return BASE_DROP_ANIMATION;
  }
}

export function DragOverlay(_ref) {
  var children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["children"]);

  var context = useContext();
  var prevOver = useLatestRef(context.over).current;

  var _useDragAndDropContex = useDragAndDropContext(),
      type = _useDragAndDropContex.type;

  var memoized = useMemo(function () {
    if (isFunction(children)) {
      if (type != null && context.active != null) {
        return children({
          type: type,
          props: PROPS[type],
          active: context.active,
          over: context.over
        });
      }

      return null;
    }

    return children;
  }, [children, type, context.active, context.over]);
  return /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(DndKit.DragOverlay, _extends({
    dropAnimation: getDropAnimation(type, prevOver)
  }, rest), memoized));
}