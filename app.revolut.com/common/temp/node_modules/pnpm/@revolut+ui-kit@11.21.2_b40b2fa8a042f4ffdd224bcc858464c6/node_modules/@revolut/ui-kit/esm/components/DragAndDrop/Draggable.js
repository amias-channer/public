/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback, useMemo } from 'react';
import * as DndKit from '@dnd-kit/core';
import { Duration, Easing } from "../../constants";
import { DURATIONS, EASINGS } from "../../tokens/default";
import { DragType } from "./constants";
import { useDragAndDropContext } from "./DragAndDropContext";
import { useEventMonitor } from "./useEventMonitor";
export function useDraggableMonitor(_ref) {
  var id = _ref.id,
      type = _ref.type;

  var _useDragAndDropContex = useDragAndDropContext(),
      startDrag = _useDragAndDropContex.startDrag;

  var onDragStart = useCallback(function (event) {
    if (event.active.id === id) startDrag(type);
  }, [startDrag, id, type]);
  useEventMonitor({
    onDragStart: onDragStart
  });
}
var BASE_STYLE = {
  transition: "opacity " + DURATIONS[Duration.MD] + "ms cubic-bezier(" + EASINGS[Easing.DEFAULT] + ")",
  userSelect: 'none',
  WebkitUserSelect: 'none',
  WebkitTouchCallout: 'none'
};

var DRAGGING_STYLE = _extends({}, BASE_STYLE, {
  opacity: 0.3
});

export function useDraggable(_ref2) {
  var type = _ref2.type,
      options = _objectWithoutPropertiesLoose(_ref2, ["type"]);

  var draggable = DndKit.useDraggable(options);
  var props = useMemo(function () {
    return _extends({
      ref: draggable.setNodeRef
    }, draggable.listeners, draggable.attributes, {
      style: draggable.isDragging ? DRAGGING_STYLE : BASE_STYLE,
      // Prevent link drag in Firefox
      onDragStart: function onDragStart(e) {
        return e.preventDefault();
      },
      draggable: false
    });
  }, [draggable.setNodeRef, draggable.listeners, draggable.attributes, draggable.isDragging]);
  var appIconState = useMemo(function () {
    return {
      active: draggable.active,
      over: draggable.over,
      node: draggable.node,
      isDragging: draggable.isDragging,
      props: props
    };
  }, [draggable.active, draggable.over, draggable.node, draggable.isDragging, props]);
  var defaultState = useMemo(function () {
    return {
      active: draggable.active,
      attributes: draggable.attributes,
      isDragging: draggable.isDragging,
      listeners: draggable.listeners,
      node: draggable.node,
      over: draggable.over,
      setNodeRef: draggable.setNodeRef
    };
  }, [draggable.active, draggable.attributes, draggable.isDragging, draggable.listeners, draggable.node, draggable.over, draggable.setNodeRef]);

  switch (type) {
    case DragType.APP_ICON:
      return appIconState;

    case DragType.TAB:
    case DragType.SIDE_NAV_ITEM:
    case DragType.DEFAULT:
      return defaultState;

    default:
      throw new Error('Type is required!');
  }
}
export function Draggable(_ref3) {
  var _ref3$type = _ref3.type,
      type = _ref3$type === void 0 ? DragType.DEFAULT : _ref3$type,
      children = _ref3.children,
      options = _objectWithoutPropertiesLoose(_ref3, ["type", "children"]);

  useDraggableMonitor(_extends({
    type: type
  }, options));
  var draggable = useDraggable(_extends({
    type: type
  }, options));
  var memoized = useMemo(function () {
    return children(draggable);
  }, [children, draggable]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, memoized);
}