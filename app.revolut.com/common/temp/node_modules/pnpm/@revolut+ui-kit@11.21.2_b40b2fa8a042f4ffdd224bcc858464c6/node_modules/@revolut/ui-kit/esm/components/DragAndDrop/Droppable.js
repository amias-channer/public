/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useMemo } from 'react';
import * as DndKit from '@dnd-kit/core';
export function useDroppable(options) {
  return DndKit.useDroppable(options);
}
export function Droppable(_ref) {
  var children = _ref.children,
      options = _objectWithoutPropertiesLoose(_ref, ["children"]);

  var droppable = useDroppable(options);
  var memoized = useMemo(function () {
    return children({
      active: droppable.active,
      rect: droppable.rect,
      isOver: droppable.isOver,
      node: droppable.node,
      over: droppable.over,
      setNodeRef: droppable.setNodeRef
    });
  }, [children, droppable.active, droppable.rect, droppable.isOver, droppable.node, droppable.over, droppable.setNodeRef]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, memoized);
}