/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback, useMemo } from 'react';
import { SortableContext, rectSortingStrategy, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { isFunction, isString } from "../../utils";
import { DragType } from "./constants";
import { useContext } from "./useContext";
import { useEventMonitor } from "./useEventMonitor";
import { useDragAndDropContext } from "./DragAndDropContext";
import { SortableItem } from "./SortableItem";
export var getSortableItemId = function getSortableItemId(item) {
  return isString(item) ? item : item.id;
};
export function useSortable(_ref) {
  var id = _ref.id,
      type = _ref.type;

  var _useDragAndDropContex = useDragAndDropContext(),
      startDrag = _useDragAndDropContex.startDrag;

  var onDragStart = useCallback(function (event) {
    var _event$active$data, _event$active$data$cu, _event$active$data$cu2;

    if (((_event$active$data = event.active.data) == null ? void 0 : (_event$active$data$cu = _event$active$data.current) == null ? void 0 : (_event$active$data$cu2 = _event$active$data$cu.sortable) == null ? void 0 : _event$active$data$cu2.containerId) === id) {
      startDrag(type);
    }
  }, [startDrag, type, id]);
  useEventMonitor({
    onDragStart: onDragStart
  });
}
export function useSortableItems(_ref2) {
  var _over$data, _over$data$current, _over$data$current$so;

  var id = _ref2.id,
      items = _ref2.items;

  var _useContext = useContext(),
      active = _useContext.active,
      over = _useContext.over;

  var activeId = active == null ? void 0 : active.id;
  var isOutOfContainer = over === null || id !== ((_over$data = over.data) == null ? void 0 : (_over$data$current = _over$data.current) == null ? void 0 : (_over$data$current$so = _over$data$current.sortable) == null ? void 0 : _over$data$current$so.containerId);
  return useMemo(function () {
    return activeId && isOutOfContainer ? items.filter(function (item) {
      return getSortableItemId(item) !== activeId;
    }) : items;
  }, [items, activeId, isOutOfContainer]);
}

function getDefaultStrategy(type) {
  switch (type) {
    case DragType.SIDE_NAV_ITEM:
      return verticalListSortingStrategy;

    case DragType.TAB:
      return rectSortingStrategy;
  }
}

export function Sortable(_ref3) {
  var id = _ref3.id,
      items = _ref3.items,
      _ref3$type = _ref3.type,
      type = _ref3$type === void 0 ? DragType.DEFAULT : _ref3$type,
      data = _ref3.data,
      strategy = _ref3.strategy,
      children = _ref3.children,
      rest = _objectWithoutPropertiesLoose(_ref3, ["id", "items", "type", "data", "strategy", "children"]);

  useSortable({
    id: id,
    type: type
  });
  var sortableItems = useSortableItems({
    items: items,
    id: id
  });
  return /*#__PURE__*/React.createElement(SortableContext, {
    id: id,
    items: sortableItems,
    strategy: strategy != null ? strategy : getDefaultStrategy(type)
  }, sortableItems.map(function (item) {
    var itemId = getSortableItemId(item);
    return /*#__PURE__*/React.createElement(SortableItem, _extends({
      key: itemId,
      id: itemId,
      type: type,
      item: item,
      data: isFunction(data) ? data(item) : data
    }, rest), children);
  }));
}