/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { createContext, forwardRef, useContext, useRef } from 'react';
import { Space } from "../../constants";
import { isFunction, noop, setRefs } from "../../utils";
import { useOnClickAway } from "../../hooks";
import { Popper } from "../../legacy/components/Popper";
import { PreventUpdateOnExit, TransitionNoop, TransitionSlideDown, isEntered } from "../Transitions";
import { ElevatedThemeProvider } from "../ThemeProvider";
import { Portal } from "../Portal";
import { DropdownBox } from "./DropdownBox";
import { DropdownGroup } from "./DropdownGroup";
import { DropdownItem } from "./DropdownItem";
import { DropdownSearch } from "./DropdownSearch";
var DropdownLevelContext = /*#__PURE__*/createContext(0);
export var DropdownBase = /*#__PURE__*/forwardRef(function (_ref, forwardedRef) {
  var _ref$open = _ref.open,
      open = _ref$open === void 0 ? false : _ref$open,
      _ref$isOpen = _ref.isOpen,
      isOpen = _ref$isOpen === void 0 ? open : _ref$isOpen,
      anchorRef = _ref.anchorRef,
      onEntered = _ref.onEntered,
      onExited = _ref.onExited,
      _ref$onClickAway = _ref.onClickAway,
      onClickAway = _ref$onClickAway === void 0 ? noop : _ref$onClickAway,
      scrollRef = _ref.scrollRef,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom-start' : _ref$placement,
      _ref$useTransition = _ref.useTransition,
      useTransition = _ref$useTransition === void 0 ? TransitionSlideDown : _ref$useTransition,
      _ref$usePortal = _ref.usePortal,
      usePortal = _ref$usePortal === void 0 ? Portal : _ref$usePortal,
      elevation = _ref.elevation,
      bg = _ref.bg,
      color = _ref.color,
      radius = _ref.radius,
      maxHeight = _ref.maxHeight,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["open", "isOpen", "anchorRef", "onEntered", "onExited", "onClickAway", "scrollRef", "placement", "useTransition", "usePortal", "elevation", "bg", "color", "radius", "maxHeight", "children"]);

  var level = useContext(DropdownLevelContext);
  var parentRef = useRef(null);
  var popperRef = useRef(null);
  var targetRef = anchorRef || parentRef;
  useOnClickAway(isOpen && onClickAway, targetRef, popperRef);
  var TransitionComp = useTransition || TransitionNoop;
  var PortalComp = usePortal && level === 0 ? usePortal : React.Fragment;
  var boundariesElement = usePortal ? 'window' : 'scrollParent'; // This element only used when `anchorRef` is not provided
  // Find parent element of `Dropdown` and attach itself to it

  var dummyElement = anchorRef ? null : /*#__PURE__*/React.createElement("div", {
    ref: function ref(node) {
      if ((node == null ? void 0 : node.parentNode) instanceof HTMLElement) {
        parentRef.current = node.parentNode;
      }
    }
  });
  return /*#__PURE__*/React.createElement(DropdownLevelContext.Provider, {
    value: level + 1
  }, dummyElement, /*#__PURE__*/React.createElement(ElevatedThemeProvider, null, /*#__PURE__*/React.createElement(TransitionComp, {
    "in": isOpen,
    onEntered: onEntered,
    onExited: onExited
  }, function (status) {
    var _anchorRef$current;

    return /*#__PURE__*/React.createElement(PreventUpdateOnExit, {
      "in": isOpen
    }, /*#__PURE__*/React.createElement(PortalComp, null, /*#__PURE__*/React.createElement(Popper, _extends({
      my: level === 0 ? Space.S_8 : null,
      ref: setRefs(forwardedRef, popperRef),
      anchorRef: targetRef,
      boundariesElement: boundariesElement,
      placement: placement
    }, rest), /*#__PURE__*/React.createElement(DropdownBox, {
      ref: scrollRef,
      bg: bg,
      color: color,
      radius: radius,
      elevation: elevation,
      maxHeight: maxHeight,
      width: rest.fitInAnchor ? anchorRef == null ? void 0 : (_anchorRef$current = anchorRef.current) == null ? void 0 : _anchorRef$current.clientWidth : undefined
    }, isFunction(children) ? children({
      isEntered: isEntered(status),
      isOpen: isOpen
    }) : children))));
  })));
});
export var Dropdown = Object.assign(DropdownBase, {
  Group: DropdownGroup,
  Item: DropdownItem,
  Search: DropdownSearch
});