/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/
import _styled from "styled-components";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useRef } from 'react';
import * as Icons from '@revolut/icons';
import { Color, Space } from "../../constants";
import { isUnifiedTheme, noop, setRefs } from "../../utils";
import { useAutoFocus, useMessage, useTheme } from "../../hooks";
import { InputBase } from "../InputBase";
import { IconButton } from "../IconButton";
import { Cell } from "../Cell";
import { Absolute, Relative } from "../Position";
import { Flex } from "../Flex";
import { Spinner } from "../Spinner";
import { Box } from "../Box";
import { DropdownItemBase } from "./DropdownItem";

var _StyledCell = /*#__PURE__*/_styled(Cell).withConfig({
  displayName: "DropdownSearch___StyledCell",
  componentId: "sc-18kb537-0"
})({
  alignItems: 'stretch'
});

export var DropdownSearch = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var autoFocus = _ref.autoFocus,
      _ref$state = _ref.state,
      state = _ref$state === void 0 ? 'default' : _ref$state,
      _ref$onClear = _ref.onClear,
      onClear = _ref$onClear === void 0 ? noop : _ref$onClear,
      children = _ref.children,
      labelClear = _ref.labelClear,
      rest = _objectWithoutPropertiesLoose(_ref, ["autoFocus", "state", "onClear", "children", "labelClear"]);

  var m = useMessage();
  var theme = useTheme();
  var inputRef = useRef(null);
  useAutoFocus(inputRef, autoFocus);

  if (isUnifiedTheme(theme)) {
    return /*#__PURE__*/React.createElement(_StyledCell, {
      "aria-busy": state === 'pending'
    }, children != null && /*#__PURE__*/React.createElement(Box, {
      mr: children != null ? Space.S_16 : null
    }, children), /*#__PURE__*/React.createElement(Relative, {
      flex: "1 1 auto"
    }, /*#__PURE__*/React.createElement(Absolute, {
      left: 0,
      top: 0,
      size: "100%"
    }, /*#__PURE__*/React.createElement(InputBase, _extends({
      ref: setRefs(inputRef, ref),
      type: "search"
    }, rest)))), /*#__PURE__*/React.createElement(Box, {
      ml: Space.S_8,
      size: 24
    }, function () {
      switch (state) {
        case 'default':
          return /*#__PURE__*/React.createElement(Icons.Search, {
            color: Color.GREY_TONE_20,
            size: 24
          });

        case 'clearable':
          return /*#__PURE__*/React.createElement(IconButton, {
            useIcon: Icons.CrossCircle,
            onClick: function onClick() {
              return onClear();
            },
            onMouseDown: function onMouseDown(event) {
              return event.preventDefault();
            },
            color: Color.GREY_TONE_20,
            "aria-label": labelClear != null ? labelClear : m('action.clear')
          });

        case 'pending':
          return /*#__PURE__*/React.createElement(Spinner, {
            color: Color.BLUE,
            size: 20,
            m: Space.S_2
          });

        case 'failed':
          return /*#__PURE__*/React.createElement(Icons.ExclamationMarkOutline, {
            color: Color.RED,
            size: 24
          });
      }
    }()));
  }

  return /*#__PURE__*/React.createElement(DropdownItemBase, {
    use: "label"
  }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, {
    mr: "s-16",
    alignSelf: "center"
  }, /*#__PURE__*/React.createElement(Icons.Search, {
    size: 24,
    color: "grey-tone-50"
  })), /*#__PURE__*/React.createElement(InputBase, _extends({
    ref: setRefs(inputRef, ref)
  }, rest))));
});