/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useRef, useState } from 'react';
import styled from 'styled-components';
import { Space } from "../../constants";
import { ellipsis } from "../../styles";
import { setRefs } from "../../utils";
import { useSizeOnMouseEnter } from "../../hooks";
import { Tooltip } from "../Tooltip";

/** @private */
export var EllipsisBase = /*#__PURE__*/styled.span.withConfig({
  displayName: "Ellipsis__EllipsisBase",
  componentId: "sc-1uis3y5-0"
})(ellipsis);

function EllipsisTooltip(_ref) {
  var children = _ref.children,
      tooltip = _ref.tooltip,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "tooltip"]);

  var ref = useRef(null);

  var _useState = useState(false),
      isHidden = _useState[0],
      setHidden = _useState[1];

  var _useState2 = useState(0),
      width = _useState2[0],
      setWidth = _useState2[1];

  useSizeOnMouseEnter(ref, tooltip === 'auto', function (outerRect, innerRect) {
    setHidden(outerRect.width < innerRect.width);
    setWidth(outerRect.width);
  });
  return /*#__PURE__*/React.createElement(Tooltip, {
    message: tooltip === 'always' || isHidden ? children : null,
    boundariesElement: "viewport",
    placement: "bottom-start",
    mx: Space.NONE,
    maxWidth: Math.max(width, 320)
  }, function (anchor) {
    return /*#__PURE__*/React.createElement(EllipsisBase, _extends({}, anchor, {
      ref: setRefs(ref, anchor.ref)
    }, rest), children);
  });
}

export function Ellipsis(_ref2) {
  var children = _ref2.children,
      _ref2$tooltip = _ref2.tooltip,
      tooltip = _ref2$tooltip === void 0 ? 'never' : _ref2$tooltip,
      rest = _objectWithoutPropertiesLoose(_ref2, ["children", "tooltip"]);

  if (tooltip === 'always' || tooltip === 'auto') {
    return /*#__PURE__*/React.createElement(EllipsisTooltip, _extends({
      tooltip: tooltip
    }, rest), children);
  }

  return /*#__PURE__*/React.createElement(EllipsisBase, rest, children);
}