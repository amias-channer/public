/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { createContext, forwardRef, useContext, useLayoutEffect, useRef } from 'react';
import * as Icons from '@revolut/icons';
import { Space } from "../../constants";
import { useMessage, useToggle } from "../../hooks";
import { noop, setRefs } from "../../utils";
import { DetailsCell } from "../Details";
import { ButtonBase } from "../ButtonBase";
import { HStack } from "../HStack";
import { Text } from "../Text";
import { TransitionCollapse } from "../Transitions";
import { DetailsCellStyled } from "./styled";
import { Spacer } from "../Spacer";
var ExpandableCellContext = /*#__PURE__*/createContext(null);
var ExpandableCellBase = /*#__PURE__*/forwardRef(function (props, ref) {
  var cellRef = useRef();

  var _useToggle = useToggle({
    defaultState: Boolean(props.prefersExpanded)
  }),
      expanded = _useToggle[0],
      toggle = _useToggle[1];

  useLayoutEffect(function () {
    if (cellRef.current && cellRef.current.previousElementSibling) {
      cellRef.current.previousElementSibling.setAttribute('data-before-expanded', "" + expanded);
    }
  }, [expanded]);
  return /*#__PURE__*/React.createElement(ExpandableCellContext.Provider, {
    value: {
      expanded: expanded,
      onToggle: toggle
    }
  }, /*#__PURE__*/React.createElement(DetailsCellStyled, _extends({
    "aria-expanded": expanded,
    ref: setRefs(cellRef, ref)
  }, props)));
});
var ExpandableCellTitle = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var labelExpand = _ref.labelExpand,
      labelCollapse = _ref.labelCollapse,
      _ref$onClick = _ref.onClick,
      _onClick = _ref$onClick === void 0 ? noop : _ref$onClick,
      rest = _objectWithoutPropertiesLoose(_ref, ["labelExpand", "labelCollapse", "onClick"]);

  var m = useMessage();
  var context = useContext(ExpandableCellContext);

  if (context === null) {
    return /*#__PURE__*/React.createElement(DetailsCell.Title, _extends({
      ref: ref,
      onClick: _onClick
    }, rest));
  }

  var Icon = context.expanded ? Icons.ShevronUp : Icons.ShevronDown;
  var label = context.expanded ? labelCollapse != null ? labelCollapse : m('action.collapse') : labelExpand != null ? labelExpand : m('action.expand');
  return /*#__PURE__*/React.createElement(DetailsCell.Title, {
    ref: ref,
    use: "div"
  }, /*#__PURE__*/React.createElement(ButtonBase, {
    onClick: function onClick(event) {
      _onClick(event);

      if (!event.defaultPrevented) context.onToggle();
    }
  }, /*#__PURE__*/React.createElement(HStack, {
    space: Space.S_8,
    align: "center"
  }, /*#__PURE__*/React.createElement(Text, rest), /*#__PURE__*/React.createElement(Icon, {
    size: 16,
    "aria-label": label
  }))));
});
/** @private  */

var ExpandableCellNote = /*#__PURE__*/forwardRef(function (props, ref) {
  var context = useContext(ExpandableCellContext);

  if (context === null) {
    return /*#__PURE__*/React.createElement(DetailsCell.Note, _extends({
      ref: ref
    }, props));
  }

  return /*#__PURE__*/React.createElement(DetailsCell.Note, _extends({
    ref: ref
  }, props), /*#__PURE__*/React.createElement(TransitionCollapse, {
    "in": context.expanded
  }, /*#__PURE__*/React.createElement(Spacer, {
    size: Space.S_8
  }), props.children));
});
/**
 * Docs: {@link https://ui-kit.revolut.codes/components/expandable-cell|ExpandableCell}
 */

export var ExpandableCell = Object.assign(ExpandableCellBase, {
  Content: DetailsCell.Content,
  Note: ExpandableCellNote,
  Title: ExpandableCellTitle
});