/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import * as Icons from '@revolut/icons';
import css from '@styled-system/css';
import styled from 'styled-components';
import { ButtonSize, Color, Space } from "../../constants";
import { mixSafe, rgbaSafe } from "../../utils";
import { useMessage } from "../../hooks";
import { Button } from "../Button";
import { IconButton } from "../IconButton";
import { Box } from "../Box";

var ClearButton = function ClearButton(_ref) {
  var onClear = _ref.onClear,
      rest = _objectWithoutPropertiesLoose(_ref, ["onClear"]);

  return /*#__PURE__*/React.createElement(IconButton, _extends({
    use: "span",
    role: "button",
    useIcon: Icons.CrossSmall,
    size: 16,
    onClick: function onClick(event) {
      onClear();

      if (!event.defaultPrevented) {
        event.stopPropagation();
      }
    }
  }, rest));
};

var FilterButtonBase = /*#__PURE__*/styled(Button).withConfig({
  displayName: "FilterButton__FilterButtonBase",
  componentId: "sc-3hvbld-0"
})(function (_ref2) {
  var isActive = _ref2.active,
      theme = _ref2.theme;
  return isActive ? undefined : css({
    backgroundColor: Color.GREY_TONE_10,
    color: Color.FOREGROUND,
    '&:hover': {
      backgroundColor: mixSafe(0.03, theme.colors[Color.BLACK], theme.colors[Color.GREY_TONE_10])
    },
    '&:active': {
      backgroundColor: mixSafe(0.06, theme.colors[Color.BLACK], theme.colors[Color.GREY_TONE_10])
    },
    '&[disabled], &:disabled, &[aria-disabled=true]': {
      color: rgbaSafe(theme.colors[Color.FOREGROUND], 0.3),
      backgroundColor: Color.GREY_TONE_10
    }
  });
});
export var FilterButton = /*#__PURE__*/forwardRef(function (_ref3, ref) {
  var children = _ref3.children,
      onClear = _ref3.onClear,
      labelClear = _ref3.labelClear,
      rest = _objectWithoutPropertiesLoose(_ref3, ["children", "onClear", "labelClear"]);

  var m = useMessage();
  return /*#__PURE__*/React.createElement(FilterButtonBase, _extends({
    ref: ref,
    size: ButtonSize.SM
  }, rest), children, onClear && /*#__PURE__*/React.createElement(Box, {
    use: "span",
    ml: children ? Space.S_8 : Space.NONE
  }, /*#__PURE__*/React.createElement(ClearButton, {
    color: rest.active || rest.disabled ? undefined : Color.GREY_TONE_50,
    "aria-label": labelClear != null ? labelClear : m('action.clear'),
    onClear: onClear
  })));
});