/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useRef } from 'react';
import styled from 'styled-components';
import { useUniversalLayoutEffect } from "../../hooks";
import { getView, px, setRefs, themeFontSize } from "../../utils";
import { Text } from "../Text";
var MAX_POSSIBLE_FONT_SIZE = px(9999); // HACK:
// Without this magic number resize not detectable
// when FitText inside flex or grid, and has it's own width.
// Bug was discovered when FitText component was placed inside ProductWidget.Title.

var MAGIC_NUMBER = 1;
var FitTextBase = /*#__PURE__*/styled(Text).withConfig({
  displayName: "FitText__FitTextBase",
  componentId: "sc-20ubg2-0"
})(["display:block;font-size:max( ", ",min( var(--rui-fit-text,", "),", " ) );min-width:0;white-space:nowrap;"], function (props) {
  return props.min != null ? themeFontSize(props.min) : '0em';
}, MAX_POSSIBLE_FONT_SIZE, function (props) {
  return props.max != null ? themeFontSize(props.max) : '1em';
});
export var FitText = /*#__PURE__*/forwardRef(function (_ref, forwardedRef) {
  var children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["children"]);

  var baseRef = useRef(null);
  var spanRef = useRef(null);
  useUniversalLayoutEffect(function () {
    var baseEl = baseRef.current;
    var spanEl = spanRef.current;

    if (baseEl && spanEl) {
      var view = getView(baseEl);

      if (view.ResizeObserver) {
        var resize = function resize() {
          var style = view.getComputedStyle(baseEl, null);
          var fontSize = parseFloat(style.getPropertyValue('font-size'));
          var scale = (baseEl.offsetWidth + MAGIC_NUMBER) / spanEl.offsetWidth;
          baseEl.style.setProperty('--rui-fit-text', px(scale * fontSize));
        };

        var observer = new view.ResizeObserver(resize);
        resize();
        observer.observe(baseEl);
        return function () {
          return observer.disconnect();
        };
      }
    }
  }, [baseRef, children]);
  return /*#__PURE__*/React.createElement(FitTextBase, _extends({
    ref: setRefs(forwardedRef, baseRef)
  }, rest), /*#__PURE__*/React.createElement("span", {
    ref: spanRef
  }, children));
});