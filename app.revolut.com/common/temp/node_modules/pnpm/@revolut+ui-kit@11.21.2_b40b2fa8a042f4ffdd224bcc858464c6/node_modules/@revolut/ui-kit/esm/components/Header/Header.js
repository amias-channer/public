/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useEffect, useRef, useState } from 'react';
import { Space } from "../../constants";
import { useWindow } from "../../hooks";
import { setRefs } from "../../utils";
import { HeaderBase } from "../HeaderBase";
import { VStack } from "../VStack";
import { TransitionSlide } from "../Transitions";
import { HeaderVariant } from "./variants";
import { BACKGROUND_COLOR_VAR, HeaderDisplayMode, HeaderScrollMode, HeaderSlots, TITLE_ANIMATION_DURATION, TITLE_ANIMATION_OFFSET_Y } from "./constants";
import { useHeaderScrollState } from "./useHeaderScrollState";
import { HeaderActions } from "./HeaderActions";
import { HeaderBackButton, HeaderCloseButton } from "./HeaderNavigationButtons";
import { HeaderDescription } from "./HeaderDescription";
import { HeaderSlotsContext } from "./HeaderSlotsContext";
import { HeaderSticky } from "./HeaderSticky";
import { HeaderStatic } from "./HeaderStatic";
import { HeaderStickyWrapper } from "./HeaderStickyWrapper";
import { HeaderTitle } from "./HeaderTitle";
import { HeaderTitleContext } from "./HeaderTitleContext";
import { StickyHeader } from "./StickyHeader";

function getStickyHeaderProps(mode, props) {
  var backgroundColor = "var(" + BACKGROUND_COLOR_VAR + ", inherit)";

  switch (mode) {
    case HeaderScrollMode.MANUAL:
      return _extends({
        bg: backgroundColor
      }, props);

    case HeaderScrollMode.AUTO:
    default:
      return _extends({
        top: 0,
        zIndex: 1,
        mx: {
          all: Space.N_16,
          lg: Space.N_24
        },
        px: {
          all: Space.S_16,
          lg: Space.S_24
        },
        bg: backgroundColor
      }, props);
  }
}

var RefForwardingHeader = /*#__PURE__*/forwardRef(function (_ref, forwardedRef) {
  var children = _ref.children,
      _ref$scrollMode = _ref.scrollMode,
      scrollMode = _ref$scrollMode === void 0 ? HeaderScrollMode.AUTO : _ref$scrollMode,
      _ref$displayMode = _ref.displayMode,
      displayMode = _ref$displayMode === void 0 ? HeaderDisplayMode.AUTO : _ref$displayMode,
      _ref$displayCollapsed = _ref.displayCollapsedDescription,
      displayCollapsedDescription = _ref$displayCollapsed === void 0 ? false : _ref$displayCollapsed,
      variant = _ref.variant,
      onHeightChange = _ref.onHeightChange,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "scrollMode", "displayMode", "displayCollapsedDescription", "variant", "onHeightChange"]);

  var win = useWindow();
  var stickyProps = getStickyHeaderProps(scrollMode, rest);
  var headerRef = useRef(null);
  var headerStickyRef = useRef(null);
  var titleRef = useRef(null);
  var isScrolled = useHeaderScrollState(scrollMode === HeaderScrollMode.AUTO, headerRef, titleRef);

  var _useState = useState(0),
      headerHeight = _useState[0],
      setHeaderHeight = _useState[1];

  var _useState2 = useState(0),
      headerStickyHeight = _useState2[0],
      setHeaderStickyHeight = _useState2[1];

  useEffect(function () {
    var headerElement = headerRef.current;
    var headerStickyElement = headerStickyRef.current;

    if (win && win.ResizeObserver && headerElement && headerStickyElement) {
      var observer = new win.ResizeObserver(function (entries) {
        var height = 0;
        entries.forEach(function (entry) {
          if (entry.target instanceof win.HTMLElement) {
            var boundingClientRect = entry.target.getBoundingClientRect();
            height += boundingClientRect.height;

            if (entry.target === headerElement) {
              setHeaderHeight(boundingClientRect.height);
            }
          }
        });
        setHeaderStickyHeight(height);
      });
      observer.observe(headerElement);
      observer.observe(headerStickyElement);
      return function () {
        return observer.disconnect();
      };
    }
  }, [win, onHeightChange, headerRef, headerStickyRef]);
  useEffect(function () {
    if (onHeightChange) {
      onHeightChange(headerStickyHeight);
    }
  }, [onHeightChange, headerStickyHeight]);

  if (variant === HeaderVariant.BOTTOM_SHEET || variant === HeaderVariant.MODAL || variant === HeaderVariant.MAIN) {
    return /*#__PURE__*/React.createElement(HeaderSlotsContext.Provider, null, /*#__PURE__*/React.createElement(StickyHeader, _extends({
      ref: setRefs(headerRef, forwardedRef)
    }, stickyProps), /*#__PURE__*/React.createElement(HeaderBase, {
      variant: variant
    }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
      name: HeaderSlots.NAVIGATION_BUTTON
    }), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
      name: HeaderSlots.ACTIONS
    }), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
      name: HeaderSlots.TITLE
    }), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
      name: HeaderSlots.DESCRIPTION
    }), children)), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
      name: HeaderSlots.STATIC
    }), variant === HeaderVariant.MAIN ? /*#__PURE__*/React.createElement(HeaderStickyWrapper, {
      ref: headerStickyRef,
      top: headerHeight
    }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
      name: HeaderSlots.STICKY
    })) : /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
      name: HeaderSlots.STICKY
    }));
  }

  switch (displayMode) {
    case HeaderDisplayMode.LARGE:
      return /*#__PURE__*/React.createElement(HeaderSlotsContext.Provider, null, /*#__PURE__*/React.createElement(StickyHeader, _extends({
        ref: setRefs(headerRef, forwardedRef)
      }, stickyProps), /*#__PURE__*/React.createElement(HeaderBase, {
        variant: HeaderVariant.MODAL
      }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.NAVIGATION_BUTTON
      }), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.ACTIONS
      }))), /*#__PURE__*/React.createElement(HeaderBase, {
        variant: variant
      }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.TITLE
      }), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.DESCRIPTION
      }), children), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.STATIC
      }), /*#__PURE__*/React.createElement(HeaderStickyWrapper, {
        ref: headerStickyRef
      }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.STICKY
      })));

    case HeaderDisplayMode.INLINE:
      return /*#__PURE__*/React.createElement(HeaderSlotsContext.Provider, null, /*#__PURE__*/React.createElement(StickyHeader, _extends({
        ref: setRefs(headerRef, forwardedRef),
        mb: Space.S_8
      }, stickyProps), /*#__PURE__*/React.createElement(HeaderBase, {
        variant: HeaderVariant.MODAL
      }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.NAVIGATION_BUTTON
      }), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.ACTIONS
      }), displayCollapsedDescription ? /*#__PURE__*/React.createElement(VStack, {
        align: "center"
      }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.TITLE
      }), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.DESCRIPTION
      })) : /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.TITLE
      }), children), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.STATIC
      }), /*#__PURE__*/React.createElement(HeaderStickyWrapper, {
        ref: headerStickyRef
      }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.STICKY
      }))));

    case HeaderDisplayMode.AUTO:
      return /*#__PURE__*/React.createElement(HeaderSlotsContext.Provider, null, /*#__PURE__*/React.createElement(HeaderTitleContext.Provider, {
        value: titleRef
      }, /*#__PURE__*/React.createElement(StickyHeader, _extends({
        ref: setRefs(headerRef, forwardedRef)
      }, stickyProps), /*#__PURE__*/React.createElement(HeaderBase, {
        variant: HeaderVariant.MODAL
      }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.NAVIGATION_BUTTON
      }), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.ACTIONS
      }), /*#__PURE__*/React.createElement(TransitionSlide, {
        "in": isScrolled,
        duration: TITLE_ANIMATION_DURATION,
        offsetY: TITLE_ANIMATION_OFFSET_Y
      }, displayCollapsedDescription ? /*#__PURE__*/React.createElement(VStack, {
        align: "center",
        "aria-hidden": true
      }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.TITLE
      }), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.DESCRIPTION
      })) : /*#__PURE__*/React.createElement("span", {
        "aria-hidden": true
      }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.TITLE
      }))))), /*#__PURE__*/React.createElement(HeaderBase, {
        variant: variant
      }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.TITLE
      }), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.DESCRIPTION
      }), children), /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.STATIC
      }), /*#__PURE__*/React.createElement(HeaderStickyWrapper, {
        ref: headerStickyRef
      }, /*#__PURE__*/React.createElement(HeaderSlotsContext.Slot, {
        name: HeaderSlots.STICKY
      }))));

    default:
      return null;
  }
});
export var Header = Object.assign(RefForwardingHeader, {
  Title: HeaderTitle,
  CloseButton: HeaderCloseButton,
  BackButton: HeaderBackButton,
  Actions: HeaderActions,
  Subtitle: HeaderBase.Subtitle,
  Description: HeaderDescription,
  Avatar: HeaderBase.Avatar,
  Bar: HeaderBase.Bar,
  Sticky: HeaderSticky,
  Static: HeaderStatic,

  /** @deprecated use `Header.Bar` */
  ActionBar: HeaderBase.ActionBar
});