/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { isAttached } from "../../utils";
import { HeaderBase } from "../HeaderBase";
import { getLabelId } from "./utils";
import { useAccessibleId } from "../AccessibleId";
import { HeaderSlots } from "./constants";
import { HeaderSlotsContext } from "./HeaderSlotsContext";
import { useHeaderTitleContext } from "./HeaderTitleContext";
export function HeaderTitle(props) {
  var id = useAccessibleId();

  var _ref = useHeaderTitleContext();

  return /*#__PURE__*/React.createElement(HeaderSlotsContext.Fill, {
    name: HeaderSlots.TITLE
  }, /*#__PURE__*/React.createElement(HeaderBase.Title, _extends({
    ref: function ref(element) {
      if (element && _ref) {
        if (_ref.current) {
          if (!isAttached(_ref.current)) {
            // Override only if current ref is not in the document
            _ref.current = element;
          }
        } else {
          // Save ref if current ref is empty
          _ref.current = element;
        }
      }
    },
    id: getLabelId(id)
  }, props)));
}