/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useState } from 'react';
import styled from 'styled-components';
import { rem } from 'polished';
import { color } from 'styled-system';
import { css } from '@styled-system/css';
import { Color } from "../../constants";
import { hasDot } from "../../styles";
import { combine } from "../../utils";
import { ZStack } from "../ZStack";
import { ButtonBase } from "../ButtonBase";
import { IconButtonBadge } from "./IconButtonBadge";
var IconButtonBase = /*#__PURE__*/styled(ButtonBase).withConfig({
  displayName: "IconButton__IconButtonBase",
  componentId: "sc-1xan14r-0"
})(css({
  '&:focus-visible, &.focus-visible': {
    backgroundColor: Color.BACKGROUND,
    color: Color.FOREGROUND
  }
}), color, hasDot({
  top: -2,
  right: -5
}), function (_ref) {
  var size = _ref.size;
  return {
    display: 'block',
    width: rem(size),
    height: rem(size)
  };
}, function (_ref2) {
  var size = _ref2.size,
      tapArea = _ref2.tapArea;

  if (size >= tapArea) {
    return;
  }

  var offset = rem(-(tapArea - size) / 2);
  return {
    position: 'relative',
    '&::before': {
      content: "''",
      position: 'absolute',
      top: offset,
      bottom: offset,
      left: offset,
      right: offset
    }
  };
});
export var RefForwardingIconButton = /*#__PURE__*/forwardRef(function (_ref3, ref) {
  var Icon = _ref3.useIcon,
      _ref3$useHoverIcon = _ref3.useHoverIcon,
      HoverIcon = _ref3$useHoverIcon === void 0 ? false : _ref3$useHoverIcon,
      _ref3$size = _ref3.size,
      size = _ref3$size === void 0 ? 24 : _ref3$size,
      _ref3$tapArea = _ref3.tapArea,
      tapArea = _ref3$tapArea === void 0 ? 44 : _ref3$tapArea,
      children = _ref3.children,
      rest = _objectWithoutPropertiesLoose(_ref3, ["useIcon", "useHoverIcon", "size", "tapArea", "children"]);

  var _useState = useState(false),
      isMouseOver = _useState[0],
      setMouseOver = _useState[1];

  return /*#__PURE__*/React.createElement(IconButtonBase, _extends({
    ref: ref,
    size: size,
    tapArea: tapArea === false ? 0 : tapArea
  }, rest, {
    onMouseEnter: combine(function () {
      return setMouseOver(true);
    }, rest.onMouseEnter),
    onMouseLeave: combine(function () {
      return setMouseOver(false);
    }, rest.onMouseLeave)
  }), /*#__PURE__*/React.createElement(ZStack, null, isMouseOver && HoverIcon ? /*#__PURE__*/React.createElement(HoverIcon, {
    size: size
  }) : /*#__PURE__*/React.createElement(Icon, {
    size: size
  }), children));
});
export var IconButton = Object.assign(RefForwardingIconButton, {
  Badge: IconButtonBadge
});