/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import styled, { css } from 'styled-components';
import { Color, Radius, Transition } from "../../constants";
import { themeColor, themeTransition } from "../../utils";
import { Box } from "../Box";
export var InputBoxVariant = {
  WHITE: 'white',
  GREY: 'grey'
};

/** @private */
export var InputBox = /*#__PURE__*/styled(Box).withConfig({
  displayName: "InputBox",
  componentId: "okizbt-0"
})(["overflow:hidden;", ";"], function (_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? InputBoxVariant.WHITE : _ref$variant,
      ariaInvalid = _ref['aria-invalid'];

  switch (variant) {
    case InputBoxVariant.GREY:
      return css(["transition:", ",", ";color:", ";background-color:", ";:focus-within,:hover:not([aria-disabled='true']){background-color:", ";}&[aria-disabled='true']{color:", ";background-color:", ";}"], themeTransition(Transition.BACKGROUND), themeTransition(Transition.TRANSFORM), themeColor(Color.GREY_TONE_50), themeColor(ariaInvalid ? Color.INPUT_ERROR : Color.GREY_TONE_8), themeColor(ariaInvalid ? Color.INPUT_ERROR_FOCUS : Color.GREY_TONE_10), themeColor(Color.GREY_TONE_20), themeColor(Color.GREY_TONE_5));

    case InputBoxVariant.WHITE:
    default:
      return css(["transition:", ";color:", ";background-color:var( --input-bg,", " );"], themeTransition(Transition.TRANSFORM), themeColor(Color.GREY_TONE_50), themeColor(Color.WIDGET_BACKGROUND));
  }
});
InputBox.defaultProps = {
  radius: Radius.INPUT
};