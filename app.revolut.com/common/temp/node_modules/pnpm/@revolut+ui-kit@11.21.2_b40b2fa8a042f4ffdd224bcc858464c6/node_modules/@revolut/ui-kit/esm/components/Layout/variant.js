/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _LAYOUT_BASE_STYLE;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { rem } from 'polished';
import { themeColor } from "../../utils";
import { Color, Size, Space } from "../../constants";
import { BACKGROUND_COLOR_VAR } from "../Header/constants";
import { LayoutSideBase } from "./LayoutSide";
import { LayoutActionsBase } from "./LayoutActions";
import { Area, ContainerSize, MEDIUM_SIZES, MainSize, SideSize, WIDE_SIZES } from "./constants";
import { SideScroll, SideWrapper } from "../Side";
import { LayoutMenuBase } from "./LayoutMenu";
var GAP = rem(16);
var LAYOUT_BASE_STYLE = (_LAYOUT_BASE_STYLE = {
  display: 'grid',
  gridTemplateRows: ["1fr auto auto 0 0", null, null, '1fr auto auto']
}, _LAYOUT_BASE_STYLE["& > " + LayoutActionsBase] = {
  px: Space.S_16
}, _LAYOUT_BASE_STYLE[BACKGROUND_COLOR_VAR] = function (theme) {
  return themeColor(Color.LAYOUT_BACKGROUND)({
    theme: theme
  });
}, _LAYOUT_BASE_STYLE);
export function layoutVariant(_ref) {
  var _extends2;

  var _ref$container = _ref.container,
      container = _ref$container === void 0 ? ContainerSize.MEDIUM : _ref$container,
      _ref$main = _ref.main,
      main = _ref$main === void 0 ? MainSize.MEDIUM : _ref$main,
      _ref$side = _ref.side,
      side = _ref$side === void 0 ? SideSize.MEDIUM : _ref$side;

  switch (container) {
    case ContainerSize.WIDE:
      return _extends({}, LAYOUT_BASE_STYLE, (_extends2 = {
        gridTemplateAreas: ["\n            \"" + Area.MAIN + "\"\n            \"" + Area.ACTS + "\"\n            \"" + Area.MENU + "\"\n            \"" + Area.SIDE + "\"\n            \"" + Area.TOAST + "\"\n          ", null, "\n            \"" + Area.MENU + " " + Area.MAIN + "   .            .\"\n            \"" + Area.MENU + " " + Area.ACTS + "   .            .\"\n            \"" + Area.SIDE + " " + Area.SIDE + "   " + Area.SIDE + " " + Area.SIDE + "\"\n            \"" + Area.TOAST + " " + Area.TOAST + " " + Area.TOAST + " " + Area.TOAST + "\"\n          ", "\n            \"" + Area.MENU + " " + Area.MAIN + "  . . " + Area.SIDE + "\"\n            \"" + Area.MENU + " " + Area.ACTS + "  . . " + Area.SIDE + "\"\n            \".            " + Area.TOAST + " . . .          \"\n          ", "\n            \"" + Area.MENU + " . " + Area.MAIN + "  . . " + Area.SIDE + "\"\n            \"" + Area.MENU + " . " + Area.ACTS + "  . . " + Area.SIDE + "\"\n            \".            . " + Area.TOAST + " . . .\"\n          "],
        gridTemplateColumns: [null, null, WIDE_SIZES.NAV.MD + " " + WIDE_SIZES.MAIN.MD[main] + " " + GAP, WIDE_SIZES.NAV.LG + " " + WIDE_SIZES.MAIN.LG[main] + " 1fr " + GAP + " auto", WIDE_SIZES.NAV.XL + " " + WIDE_SIZES.NAV_GAP.XL + " " + WIDE_SIZES.MAIN.XL[side][main] + " 1fr " + GAP + " auto", WIDE_SIZES.NAV.XXL + " " + WIDE_SIZES.NAV_GAP.XXL + " " + WIDE_SIZES.MAIN.XXL[side][main] + " 1fr " + GAP + " auto"]
      }, _extends2[LayoutSideBase] = {
        paddingY: [null, null, null, Space.S_16],
        paddingRight: [null, null, null, Space.S_16]
      }, _extends2[SideWrapper] = {
        '--side-width': [null, null, null, WIDE_SIZES.SIDE[side]],
        '--side-width-collapsed': [null, null, null, 0]
      }, _extends2[SideScroll] = {
        maxWidth: 'unset'
      }, _extends2));

    case ContainerSize.MEDIUM:
    default:
      {
        var _extends3, _ref2;

        var sideGap = side === SideSize.WIDE ? rem(24) : '1fr';
        var sideRightGap = side === SideSize.WIDE ? '1fr' : '';
        return _extends({}, LAYOUT_BASE_STYLE, (_extends3 = {
          marginX: 'auto',
          maxWidth: [null, null, null, null, null, side === SideSize.WIDE ? null : Size.LAYOUT],
          gridTemplateAreas: ["\n            \"" + Area.MAIN + "\"\n            \"" + Area.ACTS + "\"\n            \"" + Area.MENU + "\"\n            \"" + Area.SIDE + "\"\n            \"" + Area.TOAST + "\"\n          ", null, "\n            \"" + Area.MENU + " .              " + Area.MAIN + " .            .\"\n            \"" + Area.MENU + " .              " + Area.ACTS + " .            .\"\n            \"" + Area.SIDE + " " + Area.SIDE + "   " + Area.SIDE + " " + Area.SIDE + " " + Area.SIDE + "\"\n            \"" + Area.TOAST + " " + Area.TOAST + " " + Area.TOAST + " " + Area.TOAST + " " + Area.TOAST + "\"\n          ", "\n            \"" + Area.MENU + " . " + Area.MAIN + "  . " + Area.SIDE + "\"\n            \"" + Area.MENU + " . " + Area.ACTS + "  . " + Area.SIDE + "\"\n            \".            . " + Area.TOAST + " . .\"\n          "],
          gridTemplateColumns: [null, null, MEDIUM_SIZES.MENU.MD[side] + " 1fr " + MEDIUM_SIZES.MAIN.SM + " 1fr minmax(" + MEDIUM_SIZES.SIDE.MD[side] + ", auto)", MEDIUM_SIZES.MENU.LG[side] + " " + sideGap + " " + MEDIUM_SIZES.MAIN.LG + " " + sideGap + " minmax(" + MEDIUM_SIZES.SIDE.LG[side] + ", auto)", MEDIUM_SIZES.MENU.XL[side] + " " + sideGap + " " + MEDIUM_SIZES.MAIN.XL + " " + sideGap + " minmax(" + MEDIUM_SIZES.SIDE.XL[side] + ", auto)", MEDIUM_SIZES.MENU.XL[side] + " 1fr " + MEDIUM_SIZES.MAIN.XL + " " + sideGap + " " + MEDIUM_SIZES.SIDE.XXL[side] + " " + sideRightGap]
        }, _extends3[LayoutSideBase] = _extends({
          paddingY: [null, null, null, Space.S_16, null, side === SideSize.WIDE ? Space.S_16 : Space.S_32],
          paddingRight: [null, null, null, side === SideSize.WIDE ? Space.S_16 : Space.S_8, Space.S_16, Space.NONE]
        }, side === SideSize.WIDE ? {
          display: ['none', null, null, 'initial']
        } : {}), _extends3), side === SideSize.WIDE ? (_ref2 = {}, _ref2[LayoutMenuBase] = {
          padding: 0
        }, _ref2) : {});
      }
  }
}