/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import * as Icons from '@revolut/icons';
import styled from 'styled-components';
import css from '@styled-system/css';
import { clamp, themeColor } from "../../utils";
import { Color, Space, TextStyle } from "../../constants";
import { useTheme } from "../../hooks";
import { Circle } from "../Circle";
import { Absolute, Relative } from "../Position";
import { Text } from "../Text";
import { ellipsis, lineClamp } from "../../styles";
export var LimitsChartVariant = {
  CIRCLE: 'circle',
  SEMICIRCLE: 'semicircle'
};
var SIZE = 234;
var STROKE_WIDTH = 8;
var SEMICIRCLE_EMPTY_PART = 0.2;
var LimitsChartTitle = /*#__PURE__*/styled(Text).withConfig({
  displayName: "LimitsChart__LimitsChartTitle",
  componentId: "nvrysd-0"
})(ellipsis);
LimitsChartTitle.defaultProps = {
  variant: TextStyle.H1,
  textAlign: 'center'
};
var LimitsChartDescription = /*#__PURE__*/styled(Text).withConfig({
  displayName: "LimitsChart__LimitsChartDescription",
  componentId: "nvrysd-1"
})(lineClamp);
LimitsChartDescription.defaultProps = {
  variant: TextStyle.SECONDARY,
  color: Color.GREY_TONE_50,
  mt: Space.S_8,
  textAlign: 'center',
  max: 3
};
var SEMICIRCLE_TRANSFORM = "rotate(" + (-270 + 360 * SEMICIRCLE_EMPTY_PART / 2) + "deg)";
var PROGRESS_STYLE_BASE = {
  transformBox: 'fill-box',
  transformOrigin: 'center',
  transition: 'stroke-dashoffset 0.5s'
};

var PROGRESS_STYLE_CIRCLE = _extends({}, PROGRESS_STYLE_BASE, {
  transform: 'rotate(-90deg)'
});

var PROGRESS_STYLE_SEMICIRCLE = _extends({}, PROGRESS_STYLE_BASE, {
  transform: SEMICIRCLE_TRANSFORM
});

var TextWrapper = /*#__PURE__*/styled(Absolute).withConfig({
  displayName: "LimitsChart__TextWrapper",
  componentId: "nvrysd-2"
})(css({
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'center',
  alignItems: 'center',
  paddingX: Space.S_32
}));
var IconWrapper = /*#__PURE__*/styled(Absolute).withConfig({
  displayName: "LimitsChart__IconWrapper",
  componentId: "nvrysd-3"
})(css({
  right: 0,
  bottom: Space.S_8,
  left: 0,
  display: 'flex',
  justifyContent: 'center'
}));
var PointerWrapper = /*#__PURE__*/styled(Absolute).withConfig({
  displayName: "LimitsChart__PointerWrapper",
  componentId: "nvrysd-4"
})(function (_ref) {
  var value = _ref.value;
  return css({
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    display: 'flex',
    justifyContent: 'center',
    padding: Space.S_12,
    transform: "rotate(" + (-180 + 360 * SEMICIRCLE_EMPTY_PART / 2 + (360 - 360 * SEMICIRCLE_EMPTY_PART) * value) + "deg)"
  });
});
export var LimitsChart = function LimitsChart(_ref2) {
  var variant = _ref2.variant,
      bg = _ref2.bg,
      _ref2$color = _ref2.color,
      color = _ref2$color === void 0 ? Color.BLUE : _ref2$color,
      _ref2$value = _ref2.value,
      value = _ref2$value === void 0 ? 0 : _ref2$value,
      Icon = _ref2.useIcon,
      children = _ref2.children,
      rest = _objectWithoutPropertiesLoose(_ref2, ["variant", "bg", "color", "value", "useIcon", "children"]);

  var theme = useTheme();
  var center = SIZE / 2;
  var radius = center - STROKE_WIDTH / 2;
  var strokeDasharray = 2 * Math.PI * radius;
  var strokeDashoffset = strokeDasharray * (1 - clamp(0, 1, value * (variant === LimitsChartVariant.CIRCLE ? 1 : 1 - SEMICIRCLE_EMPTY_PART)));
  var strokeDashoffsetBg = strokeDasharray * (1 - clamp(0, 1, variant === LimitsChartVariant.CIRCLE ? 1 : 1 - SEMICIRCLE_EMPTY_PART));
  return /*#__PURE__*/React.createElement(Relative, {
    size: SIZE
  }, /*#__PURE__*/React.createElement(Circle, _extends({}, rest, {
    "aria-valuemax": 1,
    "aria-valuemin": 0,
    "aria-valuenow": value,
    "aria-valuetext": 100 * value + "%",
    color: color,
    role: "progressbar",
    size: SIZE,
    use: "svg",
    viewBox: "0 0 " + SIZE + " " + SIZE
  }), /*#__PURE__*/React.createElement("circle", {
    style: variant === LimitsChartVariant.CIRCLE ? PROGRESS_STYLE_CIRCLE : PROGRESS_STYLE_SEMICIRCLE,
    cx: center,
    cy: center,
    fill: "none",
    r: radius,
    stroke: themeColor((bg != null ? bg : variant === LimitsChartVariant.CIRCLE) ? Color.GREY_TONE_50 : Color.GREY_TONE_5)({
      theme: theme
    }),
    strokeDasharray: strokeDasharray,
    strokeDashoffset: strokeDashoffsetBg,
    strokeLinecap: "round",
    strokeWidth: STROKE_WIDTH,
    opacity: variant === LimitsChartVariant.CIRCLE ? 0.2 : undefined
  }), /*#__PURE__*/React.createElement("circle", {
    style: variant === LimitsChartVariant.CIRCLE ? PROGRESS_STYLE_CIRCLE : PROGRESS_STYLE_SEMICIRCLE,
    cx: center,
    cy: center,
    fill: "none",
    r: radius,
    stroke: "currentColor",
    strokeDasharray: strokeDasharray,
    strokeDashoffset: strokeDashoffset,
    strokeLinecap: "round",
    strokeWidth: STROKE_WIDTH
  })), /*#__PURE__*/React.createElement(TextWrapper, null, children), Icon && /*#__PURE__*/React.createElement(IconWrapper, null, /*#__PURE__*/React.createElement(Icon, {
    size: 24,
    color: Color.GREY_TONE_50
  })), variant === LimitsChartVariant.SEMICIRCLE && /*#__PURE__*/React.createElement(PointerWrapper, {
    value: value
  }, /*#__PURE__*/React.createElement(Icons.StocksArrowUp, {
    size: 10,
    color: color
  })));
};
LimitsChart.Title = LimitsChartTitle;
LimitsChart.Description = LimitsChartDescription;