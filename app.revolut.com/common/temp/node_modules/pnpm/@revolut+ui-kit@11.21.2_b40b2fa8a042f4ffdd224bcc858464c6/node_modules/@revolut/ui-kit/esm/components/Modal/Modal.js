/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useRef } from 'react';
import { KeyboardEventKey } from "../../constants";
import { useFocusTrap, useScrollLock } from "../../hooks";
import { TransitionFade, TransitionNoop } from "../Transitions";
import { getRefElement, noop } from "../../utils";
import { Portal } from "../Portal";
import { ModalOverlay } from "./ModalOverlay";
export function Modal(_ref) {
  var _ref$isOpen = _ref.isOpen,
      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,
      _ref$focusTrap = _ref.focusTrap,
      focusTrap = _ref$focusTrap === void 0 ? false : _ref$focusTrap,
      _ref$scrollLock = _ref.scrollLock,
      scrollLock = _ref$scrollLock === void 0 ? true : _ref$scrollLock,
      _ref$onEntered = _ref.onEntered,
      onEntered = _ref$onEntered === void 0 ? noop : _ref$onEntered,
      _ref$onExited = _ref.onExited,
      onExited = _ref$onExited === void 0 ? noop : _ref$onExited,
      _ref$onRequestClose = _ref.onRequestClose,
      onRequestClose = _ref$onRequestClose === void 0 ? noop : _ref$onRequestClose,
      _ref$usePortal = _ref.usePortal,
      usePortal = _ref$usePortal === void 0 ? Portal : _ref$usePortal,
      _ref$useTransition = _ref.useTransition,
      useTransition = _ref$useTransition === void 0 ? TransitionFade : _ref$useTransition,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? false : _ref$closeOnEsc,
      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,
      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,
      _ref$onClick = _ref.onClick,
      _onClick = _ref$onClick === void 0 ? noop : _ref$onClick,
      _ref$onKeyDown = _ref.onKeyDown,
      _onKeyDown = _ref$onKeyDown === void 0 ? noop : _ref$onKeyDown,
      _ref$onMouseDown = _ref.onMouseDown,
      _onMouseDown = _ref$onMouseDown === void 0 ? noop : _ref$onMouseDown,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["isOpen", "focusTrap", "scrollLock", "onEntered", "onExited", "onRequestClose", "usePortal", "useTransition", "closeOnEsc", "closeOnOverlayClick", "onClick", "onKeyDown", "onMouseDown", "children"]);

  var ref = useRef(null);
  var mouseDownRef = useRef(null);
  var TransitionComp = useTransition === false ? TransitionNoop : useTransition;
  var PortalComp = usePortal === false ? React.Fragment : usePortal;
  useScrollLock(scrollLock && isOpen);
  useFocusTrap(ref, focusTrap && isOpen, {
    fallbackFocus: getRefElement(ref)
  });
  return /*#__PURE__*/React.createElement(TransitionComp, {
    "in": isOpen,
    onEntered: onEntered,
    onExited: onExited
  }, function (status) {
    return /*#__PURE__*/React.createElement(PortalComp, null, /*#__PURE__*/React.createElement(ModalOverlay, _extends({
      ref: ref,
      onClick: function onClick(event) {
        _onClick(event);

        if (event.target === ref.current && event.target === mouseDownRef.current && closeOnOverlayClick) onRequestClose();
      },
      onKeyDown: function onKeyDown(event) {
        _onKeyDown(event);

        if (closeOnEsc && event.key === KeyboardEventKey.ESCAPE) {
          onRequestClose();
        }
      },
      onMouseDown: function onMouseDown(event) {
        _onMouseDown(event);

        mouseDownRef.current = event.target;
      },
      tabIndex: focusTrap ? -1 : undefined
    }, rest), status !== 'exited' && children));
  });
}
Modal.CloseButton = ModalOverlay.CloseButton;