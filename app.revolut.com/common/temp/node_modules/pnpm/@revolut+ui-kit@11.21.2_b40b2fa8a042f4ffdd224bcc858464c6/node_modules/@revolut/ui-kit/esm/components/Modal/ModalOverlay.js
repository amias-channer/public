/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useEffect, useState } from 'react';
import { Overlay } from "../Overlay";
import { modalLayerManager } from "./ModalManager";
var RefForwardingModalOverlay = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _ref$__layerFilter = _ref.__layerFilter,
      layerFilter = _ref$__layerFilter === void 0 ? false : _ref$__layerFilter,
      rest = _objectWithoutPropertiesLoose(_ref, ["__layerFilter"]);

  var _useState = useState(0),
      _ = _useState[0],
      setRenderCount = _useState[1];

  var index = modalLayerManager.indexOf(setRenderCount);
  var prevLayerFilter = modalLayerManager.getByIndex(index - 1);
  var nextLayerFilter = modalLayerManager.getByIndex(index + 1);
  useEffect(function () {
    modalLayerManager.set(setRenderCount, layerFilter);
    return function () {
      modalLayerManager["delete"](setRenderCount);
    };
  }, [layerFilter]);
  return /*#__PURE__*/React.createElement(Overlay, _extends({
    ref: ref,
    __isTailLayer: index < modalLayerManager.length - 1,
    __layerFilter: layerFilter && nextLayerFilter !== false,
    __noBackground: layerFilter && prevLayerFilter
  }, rest));
});
export var ModalOverlay = Object.assign(RefForwardingModalOverlay, {
  CloseButton: Overlay.CloseButton
});