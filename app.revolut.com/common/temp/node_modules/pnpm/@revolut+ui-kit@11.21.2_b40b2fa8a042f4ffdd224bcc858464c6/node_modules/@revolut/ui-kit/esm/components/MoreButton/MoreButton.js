/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import * as Icons from '@revolut/icons';
import { ButtonVariant, Color } from "../../constants";
import { useMessage } from "../../hooks";
import { noop } from "../../utils";
import { Spinner } from "../Spinner";
import { Avatar } from "../Avatar";
import { Button } from "../Button";
import { IconButton } from "../IconButton";
import { Group } from "../Group";
import { Item } from "../Item";
import { Popup } from "../Popup";
import { Toggle, useToggleContext } from "../Toggle";
import { MoreButtonVariant } from "./variants";

var getMoreButtonActionColor = function getMoreButtonActionColor(variant) {
  if (variant === ButtonVariant.NEGATIVE) {
    return Color.RED;
  }

  return Color.PRIMARY;
};

export function MoreButton(_ref) {
  var children = _ref.children,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? '' : _ref$label,
      ariaLabelProp = _ref['aria-label'],
      _ref$labelDialog = _ref.labelDialog,
      labelDialogProp = _ref$labelDialog === void 0 ? ariaLabelProp : _ref$labelDialog,
      _ref$title = _ref.title,
      titleProp = _ref$title === void 0 ? label || ariaLabelProp : _ref$title,
      _ref$useIcon = _ref.useIcon,
      useIcon = _ref$useIcon === void 0 ? Icons.MoreIOs : _ref$useIcon,
      _ref$onClick = _ref.onClick,
      _onClick = _ref$onClick === void 0 ? noop : _ref$onClick,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? MoreButtonVariant.BUTTON : _ref$variant,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "label", "aria-label", "labelDialog", "title", "useIcon", "onClick", "variant"]);

  var m = useMessage();
  var ariaLabel = ariaLabelProp != null ? ariaLabelProp : label || m('action.more');
  var labelDialog = labelDialogProp != null ? labelDialogProp : ariaLabelProp || m('label.more-dialog');
  var title = titleProp || ariaLabel;

  if (!React.Children.toArray(children).filter(React.isValidElement).length) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Toggle, null, function (_ref2) {
    var isOpen = _ref2.state,
        toggle = _ref2.toggle;
    return /*#__PURE__*/React.createElement(React.Fragment, null, variant === MoreButtonVariant.ICON ? /*#__PURE__*/React.createElement(IconButton, _extends({
      onClick: function onClick(event) {
        _onClick(event);

        if (!event.defaultPrevented) {
          toggle(true);
        }
      },
      "aria-label": ariaLabel,
      title: title,
      useIcon: useIcon
    }, rest)) : /*#__PURE__*/React.createElement(Button, _extends({
      onClick: function onClick(event) {
        _onClick(event);

        if (!event.defaultPrevented) {
          toggle(true);
        }
      },
      size: "sm",
      "aria-label": ariaLabel,
      title: title,
      useIcon: useIcon,
      variant: "secondary"
    }, rest), label), /*#__PURE__*/React.createElement(Popup, {
      isOpen: isOpen,
      variant: "bottom-sheet",
      onExit: function onExit() {
        return toggle(false);
      },
      "aria-label": labelDialog
    }, /*#__PURE__*/React.createElement(Group, null, children)));
  });
}
var MoreButtonAction = /*#__PURE__*/forwardRef(function (_ref3, ref) {
  var children = _ref3.children,
      useIcon = _ref3.useIcon,
      _ref3$onClick = _ref3.onClick,
      _onClick2 = _ref3$onClick === void 0 ? noop : _ref3$onClick,
      variant = _ref3.variant,
      _ref3$pending = _ref3.pending,
      pending = _ref3$pending === void 0 ? false : _ref3$pending,
      props = _objectWithoutPropertiesLoose(_ref3, ["children", "useIcon", "onClick", "variant", "pending"]);

  var toggle = useToggleContext();
  var color = getMoreButtonActionColor(variant);
  return /*#__PURE__*/React.createElement(Item, _extends({
    ref: ref,
    use: "button",
    onClick: function onClick(event) {
      _onClick2(event);

      if (!event.defaultPrevented && toggle) {
        toggle(false);
      }
    }
  }, props), pending ? /*#__PURE__*/React.createElement(Item.Avatar, null, /*#__PURE__*/React.createElement(Avatar, {
    color: color
  }, /*#__PURE__*/React.createElement(Spinner, {
    size: 24
  }))) : useIcon && /*#__PURE__*/React.createElement(Item.Avatar, null, /*#__PURE__*/React.createElement(Avatar, {
    useIcon: useIcon,
    color: color
  })), /*#__PURE__*/React.createElement(Item.Content, {
    color: color
  }, children));
});
MoreButton.Action = MoreButtonAction;