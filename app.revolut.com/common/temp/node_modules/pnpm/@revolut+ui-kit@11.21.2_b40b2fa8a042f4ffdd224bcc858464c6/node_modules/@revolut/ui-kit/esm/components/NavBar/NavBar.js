/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import * as Icons from '@revolut/icons';
import styled from 'styled-components';
import { alignItems, gridArea, gridTemplateAreas, gridTemplateColumns, gridTemplateRows, justifySelf } from 'styled-system';
import { useMessage } from "../../hooks";
import { Space } from "../../constants";
import { Box } from "../Box";
import { Text } from "../Text";
import { Bar } from "../Bar";
import { IconButton } from "../IconButton";
export var NAV_BAR_HEIGHT = '2.75rem';
export var NAV_BAR_GRID_AREAS = {
  NAV_BUTTON: 'nav-button',
  TITLE: 'title',
  ACTIONS: 'actions'
};

/** @private */
export var NavBarWrapper = /*#__PURE__*/styled(Box).withConfig({
  displayName: "NavBar__NavBarWrapper",
  componentId: "sc-1qirrji-0"
})(alignItems, gridTemplateAreas, gridTemplateColumns, gridTemplateRows, {
  display: 'grid',
  alignItems: 'center'
});
NavBarWrapper.defaultProps = {
  height: NAV_BAR_HEIGHT,
  textStyle: 'primary'
};
/** @private */

/** @private */
export var NavBarItem = /*#__PURE__*/styled(Box).withConfig({
  displayName: "NavBar__NavBarItem",
  componentId: "sc-1qirrji-1"
})(gridArea, justifySelf);
NavBarItem.defaultProps = {
  display: 'flex'
};
var NavBarButton = /*#__PURE__*/React.forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(NavBarItem, {
    gridArea: NAV_BAR_GRID_AREAS.NAV_BUTTON,
    justifySelf: "start",
    pr: Space.S_8
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    ref: ref
  }, props)));
});
var NavBarCloseButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var ariaLabel = _ref['aria-label'],
      title = _ref.title,
      rest = _objectWithoutPropertiesLoose(_ref, ["aria-label", "title"]);

  var m = useMessage();
  return /*#__PURE__*/React.createElement(NavBarButton, _extends({
    "aria-label": ariaLabel != null ? ariaLabel : title != null ? undefined : m('action.close'),
    title: title
  }, rest, {
    useIcon: Icons.Cross,
    ref: ref
  }));
});
var NavBarBackButton = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {
  var ariaLabel = _ref2['aria-label'],
      title = _ref2.title,
      rest = _objectWithoutPropertiesLoose(_ref2, ["aria-label", "title"]);

  var m = useMessage();
  return /*#__PURE__*/React.createElement(NavBarButton, _extends({
    "aria-label": ariaLabel != null ? ariaLabel : title != null ? undefined : m('action.back'),
    title: title
  }, rest, {
    useIcon: Icons.BackButtonArrow,
    ref: ref
  }));
});

var NavBarTitle = function NavBarTitle(props) {
  return /*#__PURE__*/React.createElement(NavBarItem, {
    maxWidth: "100%",
    gridArea: NAV_BAR_GRID_AREAS.TITLE,
    justifySelf: "center"
  }, /*#__PURE__*/React.createElement(Text, _extends({
    use: "div",
    variant: "primary",
    ellipsis: true
  }, props)));
};

var NavBarActions = function NavBarActions(_ref3) {
  var children = _ref3.children;
  return /*#__PURE__*/React.createElement(NavBarItem, {
    gridArea: NAV_BAR_GRID_AREAS.ACTIONS,
    justifySelf: "end",
    pl: Space.S_8
  }, /*#__PURE__*/React.createElement(Bar, {
    variant: "icons"
  }, children));
};

export var NavBar = function NavBar(props) {
  return /*#__PURE__*/React.createElement(NavBarWrapper, _extends({
    gridTemplateAreas: "\"" + NAV_BAR_GRID_AREAS.NAV_BUTTON + " " + NAV_BAR_GRID_AREAS.TITLE + " " + NAV_BAR_GRID_AREAS.ACTIONS + "\"",
    gridTemplateColumns: "1fr minmax(0, auto) 1fr"
  }, props));
};
NavBar.CloseButton = NavBarCloseButton;
NavBar.BackButton = NavBarBackButton;
NavBar.Title = NavBarTitle;
NavBar.Actions = NavBarActions;