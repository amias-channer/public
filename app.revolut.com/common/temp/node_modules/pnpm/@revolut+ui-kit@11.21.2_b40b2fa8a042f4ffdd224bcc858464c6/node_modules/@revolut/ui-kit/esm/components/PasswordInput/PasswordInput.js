/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useCallback } from 'react';
import styled from 'styled-components';
import * as Icons from '@revolut/icons';
import { Color, Transition } from "../../constants";
import { noop, themeColor, themeTransition } from "../../utils";
import { useMessage, useToggleState } from "../../hooks";
import { ButtonBase } from "../ButtonBase";
import { Input } from "../../legacy/components/Input";
var ToggleButton = /*#__PURE__*/styled(ButtonBase).withConfig({
  displayName: "PasswordInput__ToggleButton",
  componentId: "uf1728-0"
})(["transition:", ";color:", ";&:hover:not([disabled]){color:", ";}"], themeTransition(Transition.TEXT), themeColor(Color.GREY_TONE_20), themeColor(Color.GREY_TONE_50));

/** @deprecated */
export var PasswordInput = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'password' : _ref$type,
      _ref$typeVisible = _ref.typeVisible,
      typeVisible = _ref$typeVisible === void 0 ? 'text' : _ref$typeVisible,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$hideToggleButton = _ref.hideToggleButton,
      hideToggleButton = _ref$hideToggleButton === void 0 ? false : _ref$hideToggleButton,
      _ref$defaultIsVisible = _ref.defaultIsVisible,
      defaultIsVisible = _ref$defaultIsVisible === void 0 ? false : _ref$defaultIsVisible,
      controlledVisibleState = _ref.isVisible,
      _ref$onVisibilityChan = _ref.onVisibilityChange,
      onVisibilityChange = _ref$onVisibilityChan === void 0 ? noop : _ref$onVisibilityChan,
      labelVisibleProp = _ref.labelVisible,
      labelHiddenProp = _ref.labelHidden,
      rest = _objectWithoutPropertiesLoose(_ref, ["type", "typeVisible", "disabled", "hideToggleButton", "defaultIsVisible", "isVisible", "onVisibilityChange", "labelVisible", "labelHidden"]);

  var m = useMessage();
  var labelVisible = labelVisibleProp != null ? labelVisibleProp : m('action.show');
  var labelHidden = labelHiddenProp != null ? labelHiddenProp : m('action.hide');

  var _useToggleState = useToggleState({
    disabled: disabled,
    defaultState: defaultIsVisible,
    state: controlledVisibleState,
    onChange: onVisibilityChange
  }),
      isVisible = _useToggleState[0],
      toggleVisibility = _useToggleState[1];

  var renderAction = useCallback(function () {
    return hideToggleButton ? null : /*#__PURE__*/React.createElement(ToggleButton, {
      disabled: disabled,
      onClick: function onClick(event) {
        event.preventDefault();
        toggleVisibility();
      },
      "aria-label": isVisible ? labelVisible : labelHidden
    }, isVisible ? /*#__PURE__*/React.createElement(Icons.EyeHide, {
      size: 24
    }) : /*#__PURE__*/React.createElement(Icons.EyeShow, {
      size: 24
    }));
  }, [isVisible, toggleVisibility, disabled, hideToggleButton, labelVisible, labelHidden]);
  return /*#__PURE__*/React.createElement(Input, _extends({
    ref: ref,
    type: isVisible ? typeVisible : type,
    disabled: disabled,
    renderAction: renderAction
  }, rest));
});