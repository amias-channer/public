/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import React, { useCallback, useState } from 'react';
import { UnifiedColorMode } from "../../constants";
import { isFunction, noop } from "../../utils";
import { ElevatedThemeProvider, ThemeProvider } from "../ThemeProvider";
import { TransitionSlide } from "../Transitions";
import { AccessibleId } from "../AccessibleId";
import { Modal } from "../Modal";
import { Scroll } from "../Scroll";
import { Toggle } from "../Toggle";
import { Header } from "../Header";
import { ToastProvider } from "../ToastProvider";
import { ToastContainer } from "../ToastContainer";
import { getDescriptionId, getLabelId } from "../Header/utils";
import { PopupContext } from "./PopupContext";
import { PopupHeader, PopupHeaderBackButton, PopupHeaderCloseButton, PopupHeaderDescription, PopupHeaderTitle } from "./PopupHeader";
import { PopupActions } from "./PopupActions";
import { PopupVariant } from "./variants";
var TRANSITION_OFFSET_Y = -100;

function getHeight(variant, shouldKeepMaxHeight) {
  if (shouldKeepMaxHeight) {
    return '100%';
  }

  if (variant === PopupVariant.BOTTOM_SHEET || variant === PopupVariant.DIALOG || variant === PopupVariant.RESULT) {
    return 'auto';
  }

  return ['100%', null, 'auto'];
}

export function Popup(_ref) {
  var children = _ref.children,
      _ref$defaultIsOpen = _ref.defaultIsOpen,
      defaultIsOpen = _ref$defaultIsOpen === void 0 ? false : _ref$defaultIsOpen,
      controlledOpen = _ref.isOpen,
      labelButtonClose = _ref.labelButtonClose,
      _ref$shouldKeepMaxHei = _ref.shouldKeepMaxHeight,
      shouldKeepMaxHeight = _ref$shouldKeepMaxHei === void 0 ? false : _ref$shouldKeepMaxHei,
      variant = _ref.variant,
      _ref$onExit = _ref.onExit,
      onExit = _ref$onExit === void 0 ? noop : _ref$onExit,
      onExited = _ref.onExited,
      onScroll = _ref.onScroll,
      _ref$focusTrap = _ref.focusTrap,
      focusTrap = _ref$focusTrap === void 0 ? true : _ref$focusTrap,
      _ref$scrollLock = _ref.scrollLock,
      scrollLock = _ref$scrollLock === void 0 ? true : _ref$scrollLock,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,
      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,
      ariaLabel = _ref['aria-label'];

  var _useState = useState(false),
      isEntered = _useState[0],
      setEntered = _useState[1];

  var handleChange = useCallback(function (state) {
    if (!state) onExit();
  }, [onExit]);
  return /*#__PURE__*/React.createElement(ThemeProvider, {
    mode: variant === PopupVariant.COLORFUL ? UnifiedColorMode.LIGHT : undefined
  }, /*#__PURE__*/React.createElement(ElevatedThemeProvider, null, /*#__PURE__*/React.createElement(ToastProvider, null, /*#__PURE__*/React.createElement(PopupContext.Provider, {
    value: variant
  }, /*#__PURE__*/React.createElement(AccessibleId, null, function (_ref2) {
    var id = _ref2.id;
    return /*#__PURE__*/React.createElement(Toggle, {
      defaultState: defaultIsOpen,
      state: controlledOpen,
      onChange: handleChange
    }, function (_ref3) {
      var isOpen = _ref3.state,
          toggle = _ref3.toggle;
      return /*#__PURE__*/React.createElement(Modal, {
        isOpen: isOpen,
        onRequestClose: function onRequestClose() {
          return toggle(false);
        },
        variantKey: "popupStyles",
        variant: variant,
        onExited: onExited,
        focusTrap: focusTrap && isEntered,
        scrollLock: scrollLock,
        closeOnEsc: closeOnEsc && isEntered,
        closeOnOverlayClick: closeOnOverlayClick,
        __layerFilter: true
      }, /*#__PURE__*/React.createElement(TransitionSlide, {
        "in": isOpen,
        duration: 200,
        offsetY: TRANSITION_OFFSET_Y,
        onEnterComplete: function onEnterComplete() {
          return setEntered(true);
        },
        onExitComplete: function onExitComplete() {
          return setEntered(false);
        }
      }, /*#__PURE__*/React.createElement(Scroll, {
        role: "dialog",
        "aria-modal": true,
        "aria-labelledby": getLabelId(id),
        "aria-describedby": getDescriptionId(id),
        "aria-label": ariaLabel,
        height: getHeight(variant, shouldKeepMaxHeight),
        onScroll: onScroll
      }, isFunction(children) ? children({
        isEntered: isEntered,
        isOpen: isOpen,
        toggle: toggle
      }) : children, /*#__PURE__*/React.createElement(ToastContainer, {
        "in": isOpen
      }))), closeOnOverlayClick && /*#__PURE__*/React.createElement(Modal.CloseButton, {
        "aria-label": labelButtonClose,
        onClick: function onClick() {
          return toggle(false);
        },
        hide: "*-md"
      }));
    });
  })))));
}
Popup.Actions = PopupActions;
/** @deprecated use `Header.Avatar` */

Popup.Avatar = Header.Avatar;
/** @deprecated use `Header` */

Popup.Header = PopupHeader;
/** @deprecated use `Header.Title` */

Popup.Title = PopupHeaderTitle;
/** @deprecated use `Header.Description` */

Popup.Description = PopupHeaderDescription;
/** @deprecated use `Header.BackButton` */

Popup.BackButton = PopupHeaderBackButton;
/** @deprecated use `Header.CloseButton` */

Popup.CloseButton = PopupHeaderCloseButton;
/** @deprecated use `Header.Actions` */

Popup.TailActions = Header.Actions;