/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import { clamp, themeColor, themeVariant } from "../../utils";
import { Color } from "../../constants";
import { useTheme } from "../../hooks";
import { Circle } from "../Circle";
export var ProgressCircleSize = {
  SIZE_50: 50,
  SIZE_86: 86,
  SIZE_94: 94,
  SIZE_234: 234
};
var ProgressCircleText = /*#__PURE__*/styled.text.withConfig({
  displayName: "ProgressCircle__ProgressCircleText",
  componentId: "ytgnh9-0"
})(["", " fill:currentColor;"], themeVariant('textStyles.h5'));
ProgressCircleText.defaultProps = {
  x: '50%',
  y: '50%',
  dominantBaseline: 'central',
  textAnchor: 'middle'
};
var PROGRESS_STYLE = {
  transformBox: 'fill-box',
  transformOrigin: 'center',
  transform: 'rotate(-90deg)',
  transition: 'stroke-dashoffset 0.5s'
};
export var ProgressCircle = function ProgressCircle(_ref) {
  var bg = _ref.bg,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? Color.PRIMARY : _ref$color,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? ProgressCircleSize.SIZE_50 : _ref$size,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? 0 : _ref$value,
      _ref$strokeWidth = _ref.strokeWidth,
      strokeWidth = _ref$strokeWidth === void 0 ? 2 : _ref$strokeWidth,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["bg", "color", "size", "value", "strokeWidth", "children"]);

  var theme = useTheme();
  var center = size / 2;
  var radius = center - strokeWidth / 2;
  var strokeDasharray = 2 * Math.PI * radius;
  var strokeDashoffset = strokeDasharray * (1 - clamp(0, 1, value));
  return /*#__PURE__*/React.createElement(Circle, _extends({}, rest, {
    "aria-valuemax": 1,
    "aria-valuemin": 0,
    "aria-valuenow": value,
    "aria-valuetext": 100 * value + "%",
    color: color,
    role: "progressbar",
    size: size,
    use: "svg",
    viewBox: "0 0 " + size + " " + size
  }), bg && /*#__PURE__*/React.createElement("circle", {
    cx: center,
    cy: center,
    fill: "none",
    r: radius,
    stroke: themeColor(bg)({
      theme: theme
    }),
    strokeWidth: strokeWidth
  }), /*#__PURE__*/React.createElement("circle", {
    style: PROGRESS_STYLE,
    cx: center,
    cy: center,
    fill: "none",
    r: radius,
    stroke: "currentColor",
    strokeDasharray: strokeDasharray,
    strokeDashoffset: strokeDashoffset,
    strokeLinecap: "round",
    strokeWidth: strokeWidth
  }), children);
};
ProgressCircle.Text = ProgressCircleText;