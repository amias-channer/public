/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import React, { useCallback, useRef, useState } from 'react';
import { isFunction, noop, px } from "../../utils";
import { useUniversalLayoutEffect } from "../../hooks";
import { ElevatedThemeProvider } from "../ThemeProvider";
import { TransitionSlide } from "../Transitions";
import { AccessibleId } from "../AccessibleId";
import { Scroll } from "../Scroll";
import { Modal } from "../Modal";
import { getDescriptionId, getLabelId } from "../Header/utils";
import { Toggle } from "../Toggle";
import { Sticky } from "../Position";
import { PromptModal } from "./PromptModal";
import { PromptHeader } from "./PromptHeader";
import { PromptActions } from "./PromptActions";
import { PromptSlotNames, PromptSlots } from "./slots";
var TRANSITION_OFFSET_Y = -100;
export function Prompt(_ref) {
  var children = _ref.children,
      _ref$defaultIsOpen = _ref.defaultIsOpen,
      defaultIsOpen = _ref$defaultIsOpen === void 0 ? false : _ref$defaultIsOpen,
      controlledOpen = _ref.isOpen,
      labelButtonClose = _ref.labelButtonClose,
      _ref$onExit = _ref.onExit,
      onExit = _ref$onExit === void 0 ? noop : _ref$onExit,
      onExited = _ref.onExited,
      onScroll = _ref.onScroll,
      _ref$focusTrap = _ref.focusTrap,
      focusTrap = _ref$focusTrap === void 0 ? true : _ref$focusTrap,
      _ref$scrollLock = _ref.scrollLock,
      scrollLock = _ref$scrollLock === void 0 ? true : _ref$scrollLock,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
      ariaLabel = _ref['aria-label'];
  var contentRef = useRef(null);

  var _useState = useState(false),
      isEntered = _useState[0],
      setEntered = _useState[1];

  var _useState2 = useState(false),
      isActionsFilled = _useState2[0],
      setActionsFilled = _useState2[1];

  var handleChange = useCallback(function (state) {
    if (!state) onExit();
  }, [onExit]);
  useUniversalLayoutEffect(function () {
    var element = contentRef.current;

    if (isActionsFilled && element && element.nextElementSibling) {
      var rect = element.nextElementSibling.getBoundingClientRect();
      element.style.bottom = px(rect.height);
    }
  }, [isActionsFilled, contentRef]);
  return /*#__PURE__*/React.createElement(ElevatedThemeProvider, null, /*#__PURE__*/React.createElement(PromptSlots.Provider, null, /*#__PURE__*/React.createElement(AccessibleId, null, function (_ref2) {
    var id = _ref2.id;
    return /*#__PURE__*/React.createElement(Toggle, {
      defaultState: defaultIsOpen,
      state: controlledOpen,
      onChange: handleChange
    }, function (_ref3) {
      var isOpen = _ref3.state,
          toggle = _ref3.toggle;
      return /*#__PURE__*/React.createElement(PromptModal, {
        isOpen: isOpen,
        onRequestClose: function onRequestClose() {
          return toggle(false);
        },
        onExited: onExited,
        focusTrap: focusTrap && isEntered,
        scrollLock: scrollLock,
        closeOnEsc: closeOnEsc && isEntered,
        __layerFilter: true
      }, /*#__PURE__*/React.createElement(TransitionSlide, {
        "in": isOpen,
        duration: 200,
        offsetY: TRANSITION_OFFSET_Y,
        onEnterComplete: function onEnterComplete() {
          return setEntered(true);
        },
        onExitComplete: function onExitComplete() {
          return setEntered(false);
        }
      }, /*#__PURE__*/React.createElement(Scroll, {
        role: "dialog",
        "aria-modal": true,
        "aria-labelledby": getLabelId(id),
        "aria-describedby": getDescriptionId(id),
        "aria-label": ariaLabel,
        onScroll: onScroll
      }, /*#__PURE__*/React.createElement(PromptSlots.Slot, {
        name: PromptSlotNames.HEADER
      }), /*#__PURE__*/React.createElement(Sticky, {
        ref: contentRef,
        mt: "auto",
        zIndex: -1
      }, isFunction(children) ? children({
        isEntered: isEntered,
        isOpen: isOpen,
        toggle: toggle
      }) : children), /*#__PURE__*/React.createElement(PromptSlots.Slot, {
        name: PromptSlotNames.ACTIONS,
        onChange: setActionsFilled
      }))), /*#__PURE__*/React.createElement(Modal.CloseButton, {
        "aria-label": labelButtonClose,
        onClick: function onClick() {
          return toggle(false);
        }
      }));
    });
  })));
}
Prompt.Actions = PromptActions;
Prompt.Header = PromptHeader;