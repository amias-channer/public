/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useRef } from 'react';
import { rem } from 'polished';
import { isFunction, noop, renderNothing } from "../../utils";
import { useMessage } from "../../hooks";
import { AccessibleId } from "../AccessibleId";
import { Radio } from "../Radio";
import { Button } from "../Button";
import { SelectBase, getSearchBaseHeight, useSelectSearch } from "../SelectBase";
import { useRadioSelect } from "./useRadioSelect";
import { RadioSelectIndicatorStyle, RadioSelectLoadingState, RadioSelectType } from "./types";
export function RadioSelect(_ref) {
  var children = _ref.children,
      defaultValue = _ref.defaultValue,
      isDisabled = _ref.disabled,
      onChange = _ref.onChange,
      value = _ref.value,
      options = _ref.options,
      isOpen = _ref.open,
      _ref$searchable = _ref.searchable,
      searchable = _ref$searchable === void 0 ? false : _ref$searchable,
      onSearch = _ref.onSearch,
      onRetry = _ref.onRetry,
      _ref$retryAble = _ref.retryAble,
      retryAble = _ref$retryAble === void 0 ? isFunction(onRetry) : _ref$retryAble,
      _ref$onExited = _ref.onExited,
      _onExited = _ref$onExited === void 0 ? noop : _ref$onExited,
      _ref$onRequestClose = _ref.onRequestClose,
      onRequestClose = _ref$onRequestClose === void 0 ? noop : _ref$onRequestClose,
      estimateSize = _ref.estimateSize,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? RadioSelectType.INSTANT : _ref$type,
      _ref$loadingState = _ref.loadingState,
      loadingState = _ref$loadingState === void 0 ? RadioSelectLoadingState.READY : _ref$loadingState,
      labelList = _ref.labelList,
      labelSearchProp = _ref.labelSearch,
      labelApplyProp = _ref.labelApply,
      labelClearProp = _ref.labelClear,
      labelRetryProp = _ref.labelRetry,
      labelFailedStateProp = _ref.labelFailedState,
      labelEmptyStateProp = _ref.labelEmptyState,
      labelNoResultsProp = _ref.labelNoResults,
      _ref$indicatorStyle = _ref.indicatorStyle,
      indicatorStyle = _ref$indicatorStyle === void 0 ? RadioSelectIndicatorStyle.RADIO : _ref$indicatorStyle,
      _ref$autoClose = _ref.autoClose,
      autoClose = _ref$autoClose === void 0 ? false : _ref$autoClose,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "defaultValue", "disabled", "onChange", "value", "options", "open", "searchable", "onSearch", "onRetry", "retryAble", "onExited", "onRequestClose", "estimateSize", "type", "loadingState", "labelList", "labelSearch", "labelApply", "labelClear", "labelRetry", "labelFailedState", "labelEmptyState", "labelNoResults", "indicatorStyle", "autoClose"]);

  var m = useMessage();
  var labelClear = labelClearProp != null ? labelClearProp : m('action.clear');
  var labelSearch = labelSearchProp != null ? labelSearchProp : m('label.search');
  var labelApply = labelApplyProp != null ? labelApplyProp : m('action.apply');
  var labelRetry = labelRetryProp != null ? labelRetryProp : m('action.retry');
  var labelFailedState = labelFailedStateProp != null ? labelFailedStateProp : m('label.failed-state');
  var labelEmptyState = labelEmptyStateProp != null ? labelEmptyStateProp : m('label.empty-state');
  var labelNoResults = labelNoResultsProp != null ? labelNoResultsProp : m('label.no-results-state');
  var searchRef = useRef(null);
  var scrollRef = useRef(null);
  var search = useSelectSearch(options, onSearch);
  var select = useRadioSelect({
    type: type,
    defaultValue: defaultValue,
    value: value,
    onChange: onChange,
    isDisabled: isDisabled
  });
  return /*#__PURE__*/React.createElement(AccessibleId, null, /*#__PURE__*/React.createElement(SelectBase, _extends({
    open: isOpen,
    scrollRef: scrollRef,
    focusRef: searchable ? searchRef : undefined,
    onRequestClose: onRequestClose,
    onExited: function onExited() {
      search.setInput('');
      select.reset();

      _onExited();
    },
    maxHeight: rem(getSearchBaseHeight(searchable, type === RadioSelectType.CONFIRM))
  }, rest), searchable && /*#__PURE__*/React.createElement(SelectBase.Search, {
    ref: searchRef,
    state: search.state,
    value: search.input,
    labelClear: labelClear,
    "aria-label": labelSearch,
    placeholder: labelSearch,
    onSearch: function onSearch(input) {
      return search.setInput(input);
    },
    readOnly: options.length === 0
  }), {
    pending: /*#__PURE__*/React.createElement(SelectBase.ListSkeleton, {
      "aria-label": labelList,
      "aria-busy": true
    }),
    failed: /*#__PURE__*/React.createElement(SelectBase.FailedState, {
      "aria-label": labelList,
      labelDescription: labelFailedState,
      labelRetry: labelRetry,
      onRetry: onRetry,
      retryAble: retryAble
    }),
    ready: search.result.length === 0 ? /*#__PURE__*/React.createElement(SelectBase.EmptyState, {
      "aria-label": labelList,
      labelDescription: options.length === 0 ? labelEmptyState : labelNoResults
    }) : /*#__PURE__*/React.createElement(SelectBase.VirtualList, {
      scrollRef: scrollRef,
      options: search.result,
      estimateSize: estimateSize,
      "aria-label": labelList
    }, function (_ref2) {
      var virtual = _ref2.virtual,
          option = _ref2.option,
          setActive = _ref2.setActive;
      return /*#__PURE__*/React.createElement(SelectBase.Option, {
        key: option.key,
        option: option,
        virtual: virtual,
        selected: Object.is(select.value, option.value),
        onFocus: setActive,
        onClick: function onClick() {
          return type === RadioSelectType.INSTANT && autoClose && onRequestClose();
        },
        unsafe__enableSelectedSelector: indicatorStyle === RadioSelectIndicatorStyle.HIGHLIGHT
      }, /*#__PURE__*/React.createElement(Radio, select.getProps({
        value: option.value,
        tabIndex: -1,
        hidden: true,
        render: indicatorStyle === RadioSelectIndicatorStyle.HIGHLIGHT ? renderNothing : undefined
      }), isFunction(children) ? children(option) : option.label));
    })
  }[loadingState], type === RadioSelectType.CONFIRM && /*#__PURE__*/React.createElement(SelectBase.Footer, null, /*#__PURE__*/React.createElement(Button, {
    size: "sm",
    width: "100%",
    variant: "secondary",
    onClick: function onClick() {
      select.confirm(null);
      search.setInput('');
      onRequestClose();
    },
    disabled: isDisabled
  }, labelClear), /*#__PURE__*/React.createElement(Button, {
    size: "sm",
    width: "100%",
    onClick: function onClick() {
      select.confirm(select.value);
      search.setInput('');
      onRequestClose();
    },
    disabled: isDisabled
  }, labelApply))));
}