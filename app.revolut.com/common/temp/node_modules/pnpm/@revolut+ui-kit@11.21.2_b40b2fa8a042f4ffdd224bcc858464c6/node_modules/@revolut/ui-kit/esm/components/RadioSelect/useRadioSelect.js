/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import shallowEqual from 'shallowequal';
import { useEffect } from 'react';
import { SelectType } from "../SelectBase";
import { useControlled, useRadioGroup } from "../../hooks";
export function useRadioSelect(_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? SelectType.INSTANT : _ref$type,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue,
      value = _ref.value,
      onChange = _ref.onChange,
      isDisabled = _ref.isDisabled;

  var _useControlled = useControlled({
    defaultValue: defaultValue,
    value: value,
    onChange: onChange
  }),
      externalValue = _useControlled[0],
      externalUpdate = _useControlled[1];

  var _useRadioGroup = useRadioGroup({
    defaultValue: type === SelectType.INSTANT ? defaultValue : externalValue,
    value: type === SelectType.INSTANT ? externalValue : undefined,
    onChange: type === SelectType.INSTANT ? externalUpdate : undefined,
    isDisabled: isDisabled,
    shouldPassEvent: false
  }),
      internalValue = _useRadioGroup[0],
      getProps = _useRadioGroup[1],
      internalUpdate = _useRadioGroup[2];

  var isControlled = value !== undefined;
  useEffect(function () {
    if (type === SelectType.CONFIRM && isControlled) {
      internalUpdate(externalValue);
    }
  }, [type, internalUpdate, isControlled, externalValue]);

  function confirm(input) {
    internalUpdate(input);
    externalUpdate(input);
  }

  function reset() {
    if (!shallowEqual(externalValue, internalValue)) {
      confirm(externalValue);
    }
  }

  return {
    value: internalValue,
    update: internalUpdate,
    confirm: confirm,
    reset: reset,
    getProps: getProps
  };
}