/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import { css } from '@styled-system/css';
import { Color, Space } from "../../constants";
import { Box } from "../Box";
import { rgbaSafe, themeColor } from "../../utils";
/** @private */

/** @private */
export var ScrollActionsGrid = /*#__PURE__*/styled(Box).withConfig({
  displayName: "ScrollActions__ScrollActionsGrid",
  componentId: "sc-2acy9c-0"
})(css({
  position: 'sticky',
  bottom: [Space.N_16, null, Space.N_24],
  marginBottom: [Space.N_16, null, Space.N_24],
  flex: '0 0 auto',
  order: 9999,
  display: 'grid',
  alignItems: 'center',
  marginTop: 'auto',
  paddingTop: Space.S_24,
  gap: Space.S_16,
  paddingBottom: [Space.S_16, null, Space.S_24],
  gridAutoColumns: '1fr',
  '&[aria-orientation=horizontal]': {
    gridAutoFlow: 'column'
  },
  '&[aria-orientation=vertical]': {
    gridAutoFlow: 'row'
  }
}), function (_ref) {
  var gradientColor = _ref.gradientColor,
      theme = _ref.theme;

  try {
    var resultColor = themeColor(gradientColor)({
      theme: theme
    });
    return {
      backgroundImage: "linear-gradient(180deg, " + [rgbaSafe(resultColor, 0) + " 0%", rgbaSafe(resultColor, 0.01) + " 1%", rgbaSafe(resultColor, 0.03) + " 2%", rgbaSafe(resultColor, 0.08) + " 3%", rgbaSafe(resultColor, 0.15) + " 4%", rgbaSafe(resultColor, 0.25) + " 5%", rgbaSafe(resultColor, 0.35) + " 6%", rgbaSafe(resultColor, 0.45) + " 7%", rgbaSafe(resultColor, 0.55) + " 8%", rgbaSafe(resultColor, 0.65) + " 9%", rgbaSafe(resultColor, 0.75) + " 10%", rgbaSafe(resultColor, 0.85) + " 11%", rgbaSafe(resultColor, 0.95) + " 12%", rgbaSafe(resultColor, 0.99) + " 13%", resultColor + " 14%"] + ")"
    };
  } catch (_) {
    return null;
  }
});
export function ScrollActions(_ref2) {
  var _ref2$horizontal = _ref2.horizontal,
      horizontal = _ref2$horizontal === void 0 ? false : _ref2$horizontal,
      _ref2$gradientColor = _ref2.gradientColor,
      gradientColor = _ref2$gradientColor === void 0 ? Color.GROUPED_BACKGROUND : _ref2$gradientColor,
      _ref2$color = _ref2.color,
      color = _ref2$color === void 0 ? Color.GREY_TONE_50 : _ref2$color,
      rest = _objectWithoutPropertiesLoose(_ref2, ["horizontal", "gradientColor", "color"]);

  return /*#__PURE__*/React.createElement(ScrollActionsGrid, _extends({
    "aria-orientation": horizontal ? 'horizontal' : 'vertical',
    gradientColor: gradientColor,
    color: color
  }, rest));
}