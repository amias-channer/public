/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import * as Icons from '@revolut/icons';
import styled from 'styled-components';
import { Color, Radius, Space, TextStyle } from "../../constants";
import { useControlled, useMessage } from "../../hooks";
import { themeColor } from "../../utils";
import { Flex } from "../Flex";
import { Box } from "../Box";
import { InputBase } from "../InputBase";
import { InputBox, InputBoxVariant } from "../InputBox";
import { IconButton } from "../IconButton";
var SearchInputBase = /*#__PURE__*/styled(InputBase).withConfig({
  displayName: "Search__SearchInputBase",
  componentId: "adk8x6-0"
})(["::placeholder{color:", ";}"], themeColor(Color.GREY_TONE_50));
export var Search = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var controlledValue = _ref.value,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue,
      onChange = _ref.onChange,
      labelButtonClear = _ref.labelButtonClear,
      renderAction = _ref.renderAction,
      disabled = _ref.disabled,
      _ref$ariaDisabled = _ref['aria-disabled'],
      ariaDisabled = _ref$ariaDisabled === void 0 ? disabled : _ref$ariaDisabled,
      ariaInvalid = _ref['aria-invalid'],
      rest = _objectWithoutPropertiesLoose(_ref, ["value", "defaultValue", "onChange", "labelButtonClear", "renderAction", "disabled", "aria-disabled", "aria-invalid"]);

  var m = useMessage();

  var _useControlled = useControlled({
    defaultValue: defaultValue,
    value: controlledValue,
    onChange: onChange
  }),
      value = _useControlled[0],
      setValue = _useControlled[1];

  return /*#__PURE__*/React.createElement(InputBox, {
    variant: InputBoxVariant.GREY,
    radius: Radius.SEARCH,
    "aria-disabled": ariaDisabled,
    "aria-invalid": ariaInvalid
  }, /*#__PURE__*/React.createElement(Flex, {
    py: Space.S_6,
    pl: Space.S_6,
    pr: Space.S_8,
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Icons.Search, {
    size: 24,
    color: Color.GREY_TONE_50
  }), /*#__PURE__*/React.createElement(Box, {
    textStyle: TextStyle.SECONDARY,
    color: Color.FOREGROUND,
    mx: Space.S_6,
    flex: "1"
  }, /*#__PURE__*/React.createElement(SearchInputBase, _extends({
    ref: ref,
    onChange: function onChange(event) {
      return setValue(event.currentTarget.value);
    },
    value: value,
    disabled: disabled,
    "aria-invalid": ariaInvalid
  }, rest))), value && /*#__PURE__*/React.createElement(IconButton, {
    useIcon: Icons.CrossCircle,
    onClick: function onClick() {
      return setValue('');
    },
    title: labelButtonClear != null ? labelButtonClear : m('action.clear'),
    color: Color.GREY_TONE_20
  }), renderAction && /*#__PURE__*/React.createElement(Flex, {
    ml: Space.S_6
  }, renderAction())));
});