/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useCallback, useMemo, useState } from 'react';
import { useVirtual } from 'react-virtual';
import { rem } from 'polished';
import { KeyboardEventKey, Space, TextStyle } from "../../constants";
import { useControlled, useResizeObserver, useWindow } from "../../hooks";
import { combine, isFunction, times } from "../../utils";
import { useAccessibleId } from "../AccessibleId";
import { Box } from "../Box";
import { Dropdown } from "../Dropdown";
import { Placeholder } from "../Placeholder";
import { Skeleton } from "../Skeleton";
import { Flex } from "../Flex";
import { useSelectDropdown } from "./useSelectDropdown";
import { SelectBaseSize, SelectSearchState } from "./constants";

var defaultEstimateSize = function defaultEstimateSize() {
  return SelectBaseSize.OPTION;
};
/** @private import `SelectBaseSize` enum instead */


export function getSearchBaseHeight(hasSearch, hasFooter) {
  if (hasSearch === void 0) {
    hasSearch = false;
  }

  if (hasFooter === void 0) {
    hasFooter = false;
  }

  if (hasSearch && hasFooter) return SelectBaseSize.MAX_HEIGHT_SEARCH_FOOTER;
  if (hasSearch) return SelectBaseSize.MAX_HEIGHT_SEARCH;
  if (hasFooter) return SelectBaseSize.MAX_HEIGHT_FOOTER;
  return SelectBaseSize.MAX_HEIGHT;
}

var getListId = function getListId(id) {
  return id !== null ? "list-" + id : undefined;
};

var getOptionId = function getOptionId(id, key) {
  return id !== null && key !== null ? "list-" + id + "-option-" + key : undefined;
};

var getDescriptionId = function getDescriptionId(id) {
  return id !== null ? "list-" + id + "-description" : undefined;
};

function getDropdownSearchState(value, state) {
  switch (state) {
    case SelectSearchState.IDLE:
      return value === '' ? 'default' : 'clearable';

    case SelectSearchState.PENDING:
      return 'pending';

    case SelectSearchState.FAILED:
      return 'failed';
  }
}

var SelectDropdown = /*#__PURE__*/forwardRef(function (_ref, forwardedRef) {
  var onRequestClose = _ref.onRequestClose,
      isOpen = _ref.open,
      _ref$focusTrap = _ref.focusTrap,
      focusTrap = _ref$focusTrap === void 0 ? true : _ref$focusTrap,
      focusRef = _ref.focusRef,
      rest = _objectWithoutPropertiesLoose(_ref, ["onRequestClose", "open", "focusTrap", "focusRef"]);

  var getProps = useSelectDropdown({
    focusRef: focusRef,
    focusTrap: isOpen && focusTrap,
    onEscape: onRequestClose
  });
  return /*#__PURE__*/React.createElement(Dropdown, getProps(_extends({
    ref: forwardedRef,
    isOpen: isOpen,
    boundariesElement: 'viewport',
    flip: false,
    minWidth: rem(SelectBaseSize.MIN_WIDTH),
    maxWidth: rem(SelectBaseSize.MAX_WIDTH),
    maxHeight: rem(getSearchBaseHeight()),
    onClickAway: onRequestClose
  }, rest)));
});
export function SelectBaseList(_ref2) {
  var children = _ref2.children,
      controlledActive = _ref2.activeKey,
      rest = _objectWithoutPropertiesLoose(_ref2, ["children", "activeKey"]);

  var id = useAccessibleId();

  var _useControlled = useControlled({
    defaultValue: null,
    value: controlledActive
  }),
      activeKey = _useControlled[0],
      setActiveKey = _useControlled[1];

  return /*#__PURE__*/React.createElement(Dropdown.Group, _extends({
    id: getListId(id),
    role: "listbox",
    "aria-activedescendant": getOptionId(id, activeKey)
  }, rest), isFunction(children) ? children({
    activeKey: activeKey,
    setActiveKey: setActiveKey
  }) : children);
}
export function SelectBaseVirtualList(_ref3) {
  var scrollRef = _ref3.scrollRef,
      options = _ref3.options,
      children = _ref3.children,
      _ref3$estimateSize = _ref3.estimateSize,
      estimateSize = _ref3$estimateSize === void 0 ? defaultEstimateSize : _ref3$estimateSize,
      rest = _objectWithoutPropertiesLoose(_ref3, ["scrollRef", "options", "children", "estimateSize"]);

  var _useState = useState(null),
      activeKey = _useState[0],
      setActiveKey = _useState[1];

  var keyExtractor = useCallback(function (index) {
    return options[index].key;
  }, [options]);
  var virtualList = useVirtual({
    parentRef: scrollRef,
    size: options.length,
    keyExtractor: keyExtractor,
    useObserver: useResizeObserver,
    overscan: process.env.NODE_ENV === 'test' ? Infinity : 3,
    estimateSize: estimateSize
  });
  var virtualItems = useMemo(function () {
    return virtualList.virtualItems.map(function (virtual) {
      return {
        virtual: virtual,
        option: options[virtual.index],
        setActive: function setActive() {
          return setActiveKey(keyExtractor(virtual.index));
        }
      };
    });
  }, [virtualList.virtualItems, options, keyExtractor]);
  return /*#__PURE__*/React.createElement(SelectBaseList, _extends({
    activeKey: activeKey,
    style: {
      position: 'relative',
      backgroundColor: 'inherit',
      height: virtualList.totalSize + "px"
    }
  }, rest), virtualItems.map(children));
}
export function SelectBaseOption(_ref4) {
  var option = _ref4.option,
      virtual = _ref4.virtual,
      selected = _ref4.selected,
      children = _ref4.children,
      onClick = _ref4.onClick,
      onFocus = _ref4.onFocus,
      onBlur = _ref4.onBlur,
      unsafe__enableSelectedSelector = _ref4.unsafe__enableSelectedSelector;
  var win = useWindow();
  var id = useAccessibleId();
  var handleClick = useCallback(function (event) {
    var input = event.currentTarget.querySelector("input[type='checkbox'], input[type='radio']");

    if (win && input instanceof win.HTMLInputElement) {
      event.preventDefault();
      input.click();
    }
  }, [win]);
  return /*#__PURE__*/React.createElement(Dropdown.Item, {
    id: getOptionId(id, option.key),
    ref: process.env.NODE_ENV === 'test' ? null : virtual == null ? void 0 : virtual.measureRef,
    use: "button",
    role: "option",
    "aria-selected": selected,
    onClick: combine(handleClick, onClick),
    onFocus: onFocus,
    onBlur: onBlur,
    style: virtual ? {
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%',
      minHeight: virtual.size + "px",
      transform: "translateY(" + virtual.start + "px)"
    } : undefined,
    unsafe__enableSelectedSelector: unsafe__enableSelectedSelector
  }, children);
}
var SelectBaseSearch = /*#__PURE__*/forwardRef(function (_ref5, ref) {
  var value = _ref5.value,
      state = _ref5.state,
      onSearch = _ref5.onSearch,
      onAction = _ref5.onAction,
      rest = _objectWithoutPropertiesLoose(_ref5, ["value", "state", "onSearch", "onAction"]);

  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(Dropdown.Group, {
    sticky: "top"
  }, /*#__PURE__*/React.createElement(Dropdown.Search, _extends({
    ref: ref,
    role: "combobox",
    "aria-owns": getListId(id),
    "aria-autocomplete": "list",
    "aria-expanded": true,
    state: getDropdownSearchState(value, state),
    value: value,
    onClear: function onClear() {
      return onSearch('');
    },
    onChange: function onChange(event) {
      return onSearch(event.currentTarget.value);
    },
    onKeyDown: function onKeyDown(event) {
      if (isFunction(onAction) && event.key === KeyboardEventKey.ENTER && state === SelectSearchState.IDLE) {
        event.preventDefault();
        onAction();
      }
    }
  }, rest)));
});

var SelectBaseFooter = function SelectBaseFooter(props) {
  return /*#__PURE__*/React.createElement(Dropdown.Group, {
    sticky: "bottom"
  }, /*#__PURE__*/React.createElement(Box, _extends({
    __css: {
      display: 'grid',
      gridAutoFlow: 'column',
      gridAutoColumns: '1fr',
      columnGap: Space.S_16,
      padding: Space.S_16
    }
  }, props)));
};

var SelectBaseOptionSkeleton = function SelectBaseOptionSkeleton() {
  return /*#__PURE__*/React.createElement(Dropdown.Item, {
    role: "presentation"
  }, /*#__PURE__*/React.createElement(Flex, {
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Flex, {
    size: 24,
    mr: Space.S_16
  }, /*#__PURE__*/React.createElement(Skeleton, {
    size: 18,
    m: "auto"
  })), /*#__PURE__*/React.createElement(Skeleton, {
    flex: "1 1 auto",
    height: 16
  })));
};

var SelectBaseListSkeleton = function SelectBaseListSkeleton(_ref6) {
  var _ref6$count = _ref6.count,
      count = _ref6$count === void 0 ? 3 : _ref6$count,
      rest = _objectWithoutPropertiesLoose(_ref6, ["count"]);

  return /*#__PURE__*/React.createElement(SelectBaseList, rest, times(function (index) {
    return /*#__PURE__*/React.createElement(SelectBaseOptionSkeleton, {
      key: index
    });
  }, count));
};

function SelectBaseEmptyState(_ref7) {
  var labelDescription = _ref7.labelDescription,
      rest = _objectWithoutPropertiesLoose(_ref7, ["labelDescription"]);

  var descriptionId = getDescriptionId(useAccessibleId());
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SelectBaseList, _extends({
    "aria-describedby": descriptionId
  }, rest)), /*#__PURE__*/React.createElement(Placeholder, null, /*#__PURE__*/React.createElement(Placeholder.Image, {
    src: "https://assets.revolut.com/web-ui-kit/images/3D086.png",
    srcSet: "https://assets.revolut.com/web-ui-kit/images/3D086@2x.png 2x, https://assets.revolut.com/web-ui-kit/images/3D086@3x.png 3x",
    size: 104
  }), /*#__PURE__*/React.createElement(Placeholder.Title, {
    use: "p",
    id: descriptionId,
    variant: TextStyle.TILE
  }, labelDescription)));
}

function SelectBaseFailedState(_ref8) {
  var labelDescription = _ref8.labelDescription,
      labelRetry = _ref8.labelRetry,
      retryAble = _ref8.retryAble,
      onRetry = _ref8.onRetry,
      rest = _objectWithoutPropertiesLoose(_ref8, ["labelDescription", "labelRetry", "retryAble", "onRetry"]);

  var descriptionId = getDescriptionId(useAccessibleId());
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SelectBaseList, _extends({
    "aria-describedby": descriptionId
  }, rest)), /*#__PURE__*/React.createElement(Placeholder, null, /*#__PURE__*/React.createElement(Placeholder.Image, {
    src: "https://assets.revolut.com/web-ui-kit/images/3D018.png",
    srcSet: "https://assets.revolut.com/web-ui-kit/images/3D018@2x.png 2x, https://assets.revolut.com/web-ui-kit/images/3D018@3x.png 3x",
    size: 104
  }), /*#__PURE__*/React.createElement(Placeholder.Title, {
    use: "p",
    id: descriptionId,
    variant: TextStyle.TILE
  }, labelDescription), retryAble && /*#__PURE__*/React.createElement(Placeholder.Action, {
    onClick: onRetry
  }, labelRetry)));
}
/** @private */


export var SelectBase = Object.assign(SelectDropdown, {
  List: SelectBaseList,
  VirtualList: SelectBaseVirtualList,
  Search: SelectBaseSearch,
  Option: SelectBaseOption,
  Footer: SelectBaseFooter,
  ListSkeleton: SelectBaseListSkeleton,
  OptionSkeleton: SelectBaseOptionSkeleton,
  EmptyState: SelectBaseEmptyState,
  FailedState: SelectBaseFailedState
});