/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _styled$withConfig;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback, useRef } from 'react';
import styled from 'styled-components';
import { rem } from 'polished';
import { Breakpoint, Color, KeyboardEventKey, Radius, Space, Transition } from "../../constants";
import { getRefElement, isFunction, noop, themeColor, themeRadius, themeTransition } from "../../utils";
import { useFocusTrap, useMatchBreakpoint, useScrollLock } from "../../hooks";
import { mq } from "../../styles";
import { AccessibleId, useAccessibleId } from "../AccessibleId";
import { ElevatedThemeProvider } from "../ThemeProvider";
import { PreventUpdateOnExit, TransitionSlide, isEntered } from "../Transitions";
import { Box } from "../Box";
import { Toggle } from "../Toggle";
import { Scroll } from "../Scroll";
import { Header, HeaderVariant } from "../Header";
import { BACKGROUND_COLOR_VAR } from "../Header/constants";
import { getDescriptionId, getLabelId } from "../Header/utils";
import { MENU_MEDIUM_SIZES, WIDE_SIZES } from "../Layout/constants";
import { Resizer, ResizerKnob } from "./Resizer";
import { ToastProvider } from "../ToastProvider";
import { ToastContainer } from "../ToastContainer";
var TRANSITION_OFFSET_X = -16;
export var SideVariant = {
  MEDIUM: 'medium',
  WIDE: 'wide'
};

/** @private */
export var SideWrapper = /*#__PURE__*/styled(Box).withConfig({
  displayName: "Side__SideWrapper",
  componentId: "bskdwh-0"
})(["--side-width:", ";--side-width-collapsed:unset;height:100%;width:var(--side-width);position:relative;@media ", "{--side-width:", ";--side-width-collapsed:", ";transition:", ";}@media ", "{--side-width:", ";--side-width-collapsed:", ";}@media ", "{--side-width-collapsed:", ";}&[aria-hidden='true']{width:var(--side-width-collapsed);}", ""], function (_ref) {
  var width = _ref.width;
  return width != null ? width : '100%';
}, mq(Breakpoint.LG), function (_ref2) {
  var width = _ref2.width;
  return width != null ? width : rem(360);
}, rem(MENU_MEDIUM_SIZES.LG - 8), themeTransition(Transition.WIDTH), mq(Breakpoint.XL), function (_ref3) {
  var width = _ref3.width;
  return width != null ? width : rem(400);
}, rem(MENU_MEDIUM_SIZES.XL - 16), mq(Breakpoint.XXL), rem(MENU_MEDIUM_SIZES.XXL - 16), (_styled$withConfig = {}, _styled$withConfig[BACKGROUND_COLOR_VAR] = themeColor(Color.GROUPED_BACKGROUND), _styled$withConfig));
/** @private */

export var SideScroll = /*#__PURE__*/styled(Scroll).withConfig({
  displayName: "Side__SideScroll",
  componentId: "bskdwh-1"
})(["width:100%;min-height:100%;max-height:100%;margin:0 auto;&:focus{outline:none;}"]);
var SideContent = /*#__PURE__*/styled(Box).withConfig({
  displayName: "Side__SideContent",
  componentId: "bskdwh-2"
})(["position:", ";right:0;width:100%;min-width:100%;overflow:hidden;background-color:var(", ");& ", "{opacity:0;}@media ", "{border-radius:", ";box-shadow:0px 2px 4px ", ",0px 3px 16px ", ";&:hover ", "{opacity:1;}", ":focus{opacity:1;}}"], function (_ref4) {
  var resizable = _ref4.resizable;
  return resizable ? 'absolute' : undefined;
}, BACKGROUND_COLOR_VAR, ResizerKnob, mq(Breakpoint.LG), themeRadius(Radius.POPUP), themeColor(Color.BLACK_5), themeColor(Color.BLACK_10), ResizerKnob, ResizerKnob);

function SideScrollWithLock(_ref5) {
  var focusTrap = _ref5.focusTrap,
      scrollLock = _ref5.scrollLock,
      rest = _objectWithoutPropertiesLoose(_ref5, ["focusTrap", "scrollLock"]);

  var ref = useRef(null);
  var matchLG = useMatchBreakpoint(Breakpoint.LG);
  useScrollLock(scrollLock && !matchLG);
  useFocusTrap(ref, focusTrap, {
    fallbackFocus: getRefElement(ref)
  });
  return /*#__PURE__*/React.createElement(SideScroll, _extends({
    ref: ref,
    tabIndex: focusTrap ? -1 : undefined
  }, rest));
}

var getSideWidth = function getSideWidth(variant) {
  return variant ? WIDE_SIZES.SIDE[variant] : undefined;
};

var getSideScrollMaxWidth = function getSideScrollMaxWidth(variant) {
  return variant ? '100%' : {
    all: rem(532),
    lg: '100%'
  };
};

export function Side(_ref6) {
  var defaultOpen = _ref6.defaultOpen,
      controlledOpen = _ref6.isOpen,
      _ref6$onExit = _ref6.onExit,
      onExit = _ref6$onExit === void 0 ? noop : _ref6$onExit,
      _ref6$appear = _ref6.appear,
      appear = _ref6$appear === void 0 ? !defaultOpen : _ref6$appear,
      _ref6$focusTrap = _ref6.focusTrap,
      focusTrap = _ref6$focusTrap === void 0 ? true : _ref6$focusTrap,
      _ref6$scrollLock = _ref6.scrollLock,
      scrollLock = _ref6$scrollLock === void 0 ? true : _ref6$scrollLock,
      _ref6$closeOnEsc = _ref6.closeOnEsc,
      closeOnEsc = _ref6$closeOnEsc === void 0 ? true : _ref6$closeOnEsc,
      children = _ref6.children,
      variant = _ref6.variant,
      resizable = _ref6.resizable;
  var handleChange = useCallback(function (state) {
    if (!state) onExit();
  }, [onExit]);
  var contentRef = useRef(null);
  var overlayRef = useRef(null);
  var onResizeStart = useCallback(function () {
    if (!overlayRef.current) return;
    overlayRef.current.style.pointerEvents = 'auto';
  }, []);
  var onResizeEnd = useCallback(function () {
    if (!overlayRef.current) return;
    overlayRef.current.style.pointerEvents = 'none';
  }, []);
  return /*#__PURE__*/React.createElement(ToastProvider, null, /*#__PURE__*/React.createElement(ElevatedThemeProvider, null, /*#__PURE__*/React.createElement(AccessibleId, null, function (_ref7) {
    var id = _ref7.id;
    return /*#__PURE__*/React.createElement(Toggle, {
      defaultState: defaultOpen,
      state: controlledOpen,
      onChange: handleChange
    }, function (_ref8) {
      var isOpen = _ref8.state,
          toggle = _ref8.toggle;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SideWrapper, {
        width: getSideWidth(variant),
        "aria-hidden": !isOpen
      }, /*#__PURE__*/React.createElement(TransitionSlide, {
        "in": isOpen,
        offsetX: TRANSITION_OFFSET_X,
        appear: appear
      }, function (status) {
        return /*#__PURE__*/React.createElement(PreventUpdateOnExit, {
          "in": isEntered(status) && isOpen
        }, /*#__PURE__*/React.createElement(SideContent, {
          height: {
            all: '100vh',
            lg: '100%'
          },
          ref: contentRef,
          resizable: resizable
        }, /*#__PURE__*/React.createElement(SideScrollWithLock, {
          role: "dialog",
          "aria-labelledby": getLabelId(id),
          "aria-describedby": getDescriptionId(id),
          focusTrap: focusTrap && isEntered(status),
          scrollLock: scrollLock,
          onKeyDown: function onKeyDown(event) {
            if (closeOnEsc && event.key === KeyboardEventKey.ESCAPE) {
              toggle(false);
            }
          },
          px: {
            all: Space.S_16,
            lg: Space.S_24
          },
          py: {
            all: Space.S_16,
            md: Space.S_24
          },
          minWidth: {
            all: 'unset',
            lg: 'var(--side-width)'
          },
          maxWidth: getSideScrollMaxWidth(variant)
        }, isFunction(children) ? children({
          isEntered: isEntered(status),
          isOpen: isOpen,
          toggle: toggle
        }) : children, /*#__PURE__*/React.createElement(Box, {
          ref: overlayRef,
          __css: {
            pointerEvents: 'none',
            position: 'fixed',
            top: 0,
            left: 0,
            bottom: 0,
            right: 0
          }
        }), resizable && /*#__PURE__*/React.createElement(Resizer, {
          containerRef: contentRef,
          onResizeStart: onResizeStart,
          onResizeEnd: onResizeEnd
        }))));
      })), /*#__PURE__*/React.createElement(ToastContainer, {
        "in": isOpen
      }));
    });
  })));
}
/** @deprecated use `HeaderProps` */

/** @deprecated use `Header` */
function SideHeader(props) {
  return /*#__PURE__*/React.createElement(Header, _extends({
    variant: HeaderVariant.ITEM,
    top: {
      all: Space.N_16,
      md: Space.N_24
    },
    mt: {
      all: Space.N_16,
      md: Space.N_24
    },
    bg: "inherit"
  }, props));
}
/** @deprecated use `HeaderTitleProps` */


/** @deprecated use `Header.Title` */
function SideTitle(props) {
  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(Header.Title, _extends({
    id: getLabelId(id)
  }, props));
}
/** @deprecated use `HeaderDescriptionProps` */


/** @deprecated use `Header.Description` */
function SideDescription(props) {
  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(Header.Description, _extends({
    id: getDescriptionId(id)
  }, props));
}

export var SideActions = function SideActions(props) {
  return /*#__PURE__*/React.createElement(Scroll.Actions, _extends({
    gradientColor: Color.GROUPED_BACKGROUND,
    px: {
      all: Space.S_16,
      lg: Space.S_24
    },
    mx: {
      all: Space.N_16,
      lg: Space.N_24
    }
  }, props));
};
Side.Actions = SideActions;
/** @deprecated use `Header.Avatar` */

Side.Avatar = Header.Avatar;
/** @deprecated use `Header` */

Side.Header = SideHeader;
/** @deprecated use `Header.Title` */

Side.Title = SideTitle;
/** @deprecated use `Header.Description` */

Side.Description = SideDescription;
/** @deprecated use `Header.BackButton` */

Side.BackButton = Header.BackButton;
/** @deprecated use `Header.CloseButton` */

Side.CloseButton = Header.CloseButton;
/** @deprecated use `Header.Subtitle` */

Side.Subtitle = Header.Subtitle;
/** @deprecated use `Header.Actions` */

Side.TailActions = Header.Actions;
/** @deprecated use `Header.Bar` */

Side.Bar = Header.Bar;
/** @deprecated use `Header.Bar` */

Side.ActionBar = Header.ActionBar;