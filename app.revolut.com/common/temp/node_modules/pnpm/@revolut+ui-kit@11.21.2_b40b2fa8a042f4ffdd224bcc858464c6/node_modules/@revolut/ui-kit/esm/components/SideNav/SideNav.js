/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import * as Icons from '@revolut/icons';
import { rem } from 'polished';
import { Color, Space } from "../../constants";
import { isFunction } from "../../utils";
import { Box } from "../Box";
import { Flex } from "../Flex";
import { IconButton } from "../IconButton";
import { Text } from "../Text";
import { Ellipsis } from "../Ellipsis";
import { AccessibleId, useAccessibleId } from "../AccessibleId";
import { Avatar, AvatarBadgePosition, AvatarVariant } from "../Avatar";
import { SideNavAvatar, SideNavContainer, SideNavDescriptionBase, SideNavHeaderBase, SideNavHeaderButton, SideNavTitleBase } from "./styles";
import { getHeaderLabelId } from "./utils";
import { CollapsedLabelLocation } from "./constants";
import { SideNavProvider, useSideNavContext } from "./SideNavContext";
import { useResponsivePropGetter } from "./useResponsivePropGetter";
import { useLabelHide } from "./useLabelHide";
import { SideNavItems } from "./SideNavItems";
import { SideNavItem, SideNavItemAvatar, SideNavItemMenu } from "./SideNavItem";
import { SideNavDroppable } from "./SideNavDroppable";

function getSideNavWidth(collapsedLabelLocation) {
  return collapsedLabelLocation === CollapsedLabelLocation.UNDER ? rem(70) : rem(56);
}

function getSideNavMaxWidth(_ref) {
  var collapseOn = _ref.collapseOn,
      collapsed = _ref.collapsed,
      collapsedLabelLocation = _ref.collapsedLabelLocation;

  if (collapsed === undefined) {
    var _ref2;

    return _ref2 = {
      all: getSideNavWidth(collapsedLabelLocation)
    }, _ref2[collapseOn] = rem(200), _ref2;
  }

  return collapsed ? getSideNavWidth(collapsedLabelLocation) : rem(200);
}

export var SideNavBase = /*#__PURE__*/forwardRef(function (_ref3, ref) {
  var children = _ref3.children,
      collapsed = _ref3.collapsed,
      collapseOn = _ref3.collapseOn,
      collapsedLabelLocation = _ref3.collapsedLabelLocation,
      disabled = _ref3.disabled,
      rest = _objectWithoutPropertiesLoose(_ref3, ["children", "collapsed", "collapseOn", "collapsedLabelLocation", "disabled"]);

  return /*#__PURE__*/React.createElement(SideNavProvider, {
    collapsed: collapsed,
    collapseOn: collapseOn,
    collapsedLabelLocation: collapsedLabelLocation,
    disabled: disabled
  }, function (value) {
    return /*#__PURE__*/React.createElement(SideNavContainer, _extends({
      use: "nav",
      ref: ref,
      minWidth: getSideNavWidth(value.collapsedLabelLocation),
      maxWidth: getSideNavMaxWidth(value)
    }, rest), children);
  });
});
var SideNavHeader = /*#__PURE__*/forwardRef(function (_ref4, ref) {
  var children = _ref4.children,
      _ref4$use = _ref4.use,
      use = _ref4$use === void 0 ? 'button' : _ref4$use,
      rest = _objectWithoutPropertiesLoose(_ref4, ["children", "use"]);

  var propGetter = useResponsivePropGetter();

  var _useSideNavContext = useSideNavContext(),
      disabled = _useSideNavContext.disabled;

  return /*#__PURE__*/React.createElement(AccessibleId, null, function (_ref5) {
    var id = _ref5.id;
    return /*#__PURE__*/React.createElement(SideNavHeaderButton, _extends({
      ref: ref,
      "aria-labelledby": use === 'button' || use === 'a' ? getHeaderLabelId(id) : undefined,
      use: use,
      disabled: disabled
    }, rest), /*#__PURE__*/React.createElement(SideNavHeaderBase, {
      px: propGetter(Space.S_16, Space.S_16, Space.S_12),
      py: Space.S_12,
      use: "span"
    }, children));
  });
});

var SideNavTitle = function SideNavTitle(props) {
  var _useSideNavContext2 = useSideNavContext(),
      collapsed = _useSideNavContext2.collapsed,
      collapseOn = _useSideNavContext2.collapseOn;

  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(SideNavTitleBase, _extends({
    lineClamp: 2,
    hide: collapsed != null ? collapsed : "*-" + collapseOn,
    id: getHeaderLabelId(id)
  }, props));
};

var SideNavDescription = function SideNavDescription(_ref6) {
  var children = _ref6.children,
      rest = _objectWithoutPropertiesLoose(_ref6, ["children"]);

  var _useSideNavContext3 = useSideNavContext(),
      collapsed = _useSideNavContext3.collapsed,
      collapseOn = _useSideNavContext3.collapseOn;

  return /*#__PURE__*/React.createElement(SideNavDescriptionBase, _extends({
    display: "flex",
    hide: collapsed != null ? collapsed : "*-" + collapseOn
  }, rest), /*#__PURE__*/React.createElement(Ellipsis, null, /*#__PURE__*/React.createElement(Text, null, children)), isFunction(rest.onClick) && /*#__PURE__*/React.createElement(Text, {
    ml: Space.S_4
  }, /*#__PURE__*/React.createElement(Icons.ShevronDownSmall, {
    size: 16
  })));
};

var SideNavAppButton = function SideNavAppButton(_ref7) {
  var onClear = _ref7.onClear,
      children = _ref7.children,
      labelClear = _ref7.labelClear,
      _ref7$bg = _ref7.bg,
      bg = _ref7$bg === void 0 ? Color.LIGHT_BLUE : _ref7$bg,
      image = _ref7.image,
      imageSet = _ref7.imageSet,
      _ref7$use = _ref7.use,
      use = _ref7$use === void 0 ? 'div' : _ref7$use,
      rest = _objectWithoutPropertiesLoose(_ref7, ["onClear", "children", "labelClear", "bg", "image", "imageSet", "use"]);

  var _useLabelHide = useLabelHide(),
      whenLabelHidden = _useLabelHide[0],
      whenLabelVisible = _useLabelHide[1];

  return /*#__PURE__*/React.createElement(SideNav.Header, _extends({
    use: use
  }, rest), /*#__PURE__*/React.createElement(SideNav.Avatar, null, /*#__PURE__*/React.createElement(Avatar, {
    size: 32,
    variant: AvatarVariant.APP,
    bg: bg,
    image: image,
    imageSet: imageSet
  }, onClear && /*#__PURE__*/React.createElement(Avatar.Badge, {
    hide: whenLabelVisible,
    position: AvatarBadgePosition.TOP_RIGHT,
    useIcon: Icons.Cross,
    bg: Color.GREY_TONE_50,
    use: "button",
    onClick: onClear,
    "aria-label": labelClear
  }))), /*#__PURE__*/React.createElement(SideNavTitleBase, {
    display: "block",
    width: "100%",
    hide: whenLabelHidden
  }, /*#__PURE__*/React.createElement(Flex, {
    width: "100%",
    justifyContent: "space-between",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(SideNav.Title, {
    lineClamp: 2
  }, children), onClear && /*#__PURE__*/React.createElement(Box, {
    use: "span",
    ml: Space.S_8
  }, /*#__PURE__*/React.createElement(IconButton, {
    useIcon: Icons.CrossCircle,
    color: Color.GREY_TONE_50,
    onClick: onClear,
    "aria-label": labelClear
  })))));
};

export var SideNav = Object.assign(SideNavBase, {
  Avatar: SideNavAvatar,
  Header: SideNavHeader,
  Item: SideNavItem,
  ItemAvatar: SideNavItemAvatar,
  ItemLabel: Text,
  ItemMenu: SideNavItemMenu,
  Droppable: SideNavDroppable,
  Items: SideNavItems,
  Title: SideNavTitle,
  Description: SideNavDescription,
  AppButton: SideNavAppButton
});