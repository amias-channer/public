/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import React, { createContext, useContext, useMemo } from 'react';
import { isFunction } from "../../utils";
import { Breakpoint } from "../../constants";
import { CollapsedLabelLocation } from "./constants";
var DEFAULT_CONTEXT_VALUE = {
  collapsed: undefined,
  collapseOn: Breakpoint.XL,
  collapsedLabelLocation: CollapsedLabelLocation.TOOLTIP,
  disabled: false
};
var SideNavContext = /*#__PURE__*/createContext(DEFAULT_CONTEXT_VALUE);
/** @private */

export var useSideNavContext = function useSideNavContext() {
  return useContext(SideNavContext);
};
export function SideNavProvider(_ref) {
  var _ref$collapsed = _ref.collapsed,
      collapsed = _ref$collapsed === void 0 ? DEFAULT_CONTEXT_VALUE.collapsed : _ref$collapsed,
      _ref$collapseOn = _ref.collapseOn,
      collapseOn = _ref$collapseOn === void 0 ? DEFAULT_CONTEXT_VALUE.collapseOn : _ref$collapseOn,
      _ref$collapsedLabelLo = _ref.collapsedLabelLocation,
      collapsedLabelLocation = _ref$collapsedLabelLo === void 0 ? DEFAULT_CONTEXT_VALUE.collapsedLabelLocation : _ref$collapsedLabelLo,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? DEFAULT_CONTEXT_VALUE.disabled : _ref$disabled,
      children = _ref.children;
  var contextValue = useMemo(function () {
    return {
      collapsed: collapsed,
      collapseOn: collapseOn,
      collapsedLabelLocation: collapsedLabelLocation,
      disabled: disabled
    };
  }, [collapsed, collapseOn, collapsedLabelLocation, disabled]);
  return /*#__PURE__*/React.createElement(SideNavContext.Provider, {
    value: contextValue
  }, isFunction(children) ? children(contextValue) : children);
}