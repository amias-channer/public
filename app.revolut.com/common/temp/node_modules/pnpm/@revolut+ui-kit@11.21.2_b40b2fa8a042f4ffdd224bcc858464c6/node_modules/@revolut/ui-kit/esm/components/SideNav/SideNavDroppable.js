/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { isFunction } from "../../utils";
import { Relative } from "../Position";
import { DragAndDrop } from "../DragAndDrop";
import { SideNavDropArea } from "./SideNavDropArea";
export function SideNavDroppable(_ref) {
  var _context$over, _context$over$data, _context$over$data$cu, _context$over$data$cu2;

  var id = _ref.id,
      active = _ref.active,
      children = _ref.children,
      label = _ref.label,
      disabled = _ref.disabled,
      data = _ref.data,
      rest = _objectWithoutPropertiesLoose(_ref, ["id", "active", "children", "label", "disabled", "data"]);

  var context = DragAndDrop.useContext();
  var droppable = DragAndDrop.useDroppable({
    id: id,
    disabled: disabled,
    data: data
  });
  var isOver = droppable.isOver || ((_context$over = context.over) == null ? void 0 : (_context$over$data = _context$over.data) == null ? void 0 : (_context$over$data$cu = _context$over$data.current) == null ? void 0 : (_context$over$data$cu2 = _context$over$data$cu.sortable) == null ? void 0 : _context$over$data$cu2.containerId) === id;
  return /*#__PURE__*/React.createElement(Relative, {
    ref: droppable.setNodeRef
  }, isFunction(children) ? children(droppable) : children, /*#__PURE__*/React.createElement(SideNavDropArea, _extends({
    active: active,
    over: isOver
  }, rest), label));
}