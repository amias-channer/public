/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useState } from 'react';
import * as Icons from '@revolut/icons';
import { Space } from "../../constants";
import { isString } from "../../utils";
import { IconButton } from "../IconButton";
import { Tooltip } from "../Tooltip";
import { AccessibleId } from "../AccessibleId";
import { SideNavItemBase, SideNavItemMenuContainer } from "./styles";
import { getItemLabelId } from "./utils";
import { CollapsedLabelLocation, SideNavItemSlotName } from "./constants";
import { useSideNavContext } from "./SideNavContext";
import { useLabelHide } from "./useLabelHide";
import { SideNavItemLayout } from "./SideNavItemLayout";
import { SideNavSlots } from "./SideNavSlots";
export var SideNavItem = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      _ref$draggable = _ref.draggable,
      draggable = _ref$draggable === void 0 ? false : _ref$draggable,
      _ref$hasDot = _ref.hasDot,
      hasDot = _ref$hasDot === void 0 ? false : _ref$hasDot,
      title = _ref.title,
      useIcon = _ref.useIcon,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "draggable", "hasDot", "title", "useIcon"]);

  var _useSideNavContext = useSideNavContext(),
      collapsedLabelLocation = _useSideNavContext.collapsedLabelLocation,
      disabled = _useSideNavContext.disabled;

  var _useLabelHide = useLabelHide(),
      _ = _useLabelHide[0],
      whenLabelVisible = _useLabelHide[1];

  var _useState = useState(false),
      hasMenu = _useState[0],
      setHasMenu = _useState[1];

  var message = title || children;
  var ariaLabel = isString(message) ? message : undefined;
  var isLabelUnder = collapsedLabelLocation === CollapsedLabelLocation.UNDER;
  return /*#__PURE__*/React.createElement(SideNavSlots.Provider, null, /*#__PURE__*/React.createElement(AccessibleId, null, function (_ref2) {
    var id = _ref2.id;
    return /*#__PURE__*/React.createElement(SideNavItemBase, _extends({
      ref: ref,
      "aria-label": ariaLabel,
      "aria-labelledby": getItemLabelId(id),
      disabled: disabled,
      draggable: draggable
    }, rest), /*#__PURE__*/React.createElement(Tooltip, {
      use: false,
      hide: isLabelUnder || whenLabelVisible,
      message: message,
      ml: hasMenu ? Space.S_24 : Space.S_16,
      placement: "right",
      boundariesElement: "viewport"
    }, /*#__PURE__*/React.createElement(SideNavItemLayout, {
      draggable: draggable,
      hasDot: hasDot,
      useIcon: useIcon,
      hasMenu: hasMenu,
      setHasMenu: setHasMenu
    }, children)));
  }));
});
export var SideNavItemAvatar = function SideNavItemAvatar(props) {
  return /*#__PURE__*/React.createElement(SideNavSlots.Fill, _extends({
    name: SideNavItemSlotName.AVATAR
  }, props));
};
export function SideNavItemMenu(_ref3) {
  var children = _ref3.children,
      rest = _objectWithoutPropertiesLoose(_ref3, ["children"]);

  var _useLabelHide2 = useLabelHide(),
      whenLabelHidden = _useLabelHide2[0],
      whenLabelVisible = _useLabelHide2[1];

  return /*#__PURE__*/React.createElement(SideNavSlots.Fill, {
    name: SideNavItemSlotName.MENU
  }, /*#__PURE__*/React.createElement(SideNavItemMenuContainer, {
    collapsed: true,
    hide: whenLabelVisible
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    use: "span",
    role: "button",
    useIcon: Icons.MoreAndroid
  }, rest))), /*#__PURE__*/React.createElement(SideNavItemMenuContainer, {
    hide: whenLabelHidden
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    use: "span",
    role: "button",
    useIcon: Icons.MoreIOs
  }, rest))), children);
}