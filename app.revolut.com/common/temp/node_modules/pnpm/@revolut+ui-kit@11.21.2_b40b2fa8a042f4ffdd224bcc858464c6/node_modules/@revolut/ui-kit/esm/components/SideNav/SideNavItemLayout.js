/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/
import _styled from "styled-components";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import * as Icons from '@revolut/icons';
import { Space, TextStyle } from "../../constants";
import { Box } from "../Box";
import { Text } from "../Text";
import { TransitionFade } from "../Transitions";
import { useAccessibleId } from "../AccessibleId";
import { SideNavDraggableIcon, SideNavItemBase, SideNavItemLayoutBase, SideNavItemsBadge } from "./styles";
import { getItemLabelId } from "./utils";
import { CollapsedLabelLocation, SideNavItemSlotName } from "./constants";
import { SideNavSlots } from "./SideNavSlots";
import { useResponsivePropGetter } from "./useResponsivePropGetter";
import { useLabelHide } from "./useLabelHide";
import { useSideNavContext } from "./SideNavContext";

var _StyledText = /*#__PURE__*/_styled(Text).withConfig({
  displayName: "SideNavItemLayout___StyledText",
  componentId: "sli56-0"
})({
  '> *': {
    minWidth: 0
  }
});

export var SideNavItemLayout = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref2;

  var _ref$draggable = _ref.draggable,
      draggable = _ref$draggable === void 0 ? false : _ref$draggable,
      _ref$hasDot = _ref.hasDot,
      hasDot = _ref$hasDot === void 0 ? false : _ref$hasDot,
      Icon = _ref.useIcon,
      children = _ref.children,
      hasMenu = _ref.hasMenu,
      setHasMenu = _ref.setHasMenu,
      rest = _objectWithoutPropertiesLoose(_ref, ["draggable", "hasDot", "useIcon", "children", "hasMenu", "setHasMenu"]);

  var id = useAccessibleId();

  var _useSideNavContext = useSideNavContext(),
      collapsedLabelLocation = _useSideNavContext.collapsedLabelLocation;

  var _useLabelHide = useLabelHide(),
      whenLabelHidden = _useLabelHide[0];

  var isLabelUnder = collapsedLabelLocation === CollapsedLabelLocation.UNDER;
  var propGetter = useResponsivePropGetter();
  return /*#__PURE__*/React.createElement(SideNavItemLayoutBase, _extends({
    ref: ref,
    use: "span",
    px: propGetter(Space.S_4, Space.S_16),
    flexDirection: propGetter('column', 'row')
  }, rest), /*#__PURE__*/React.createElement(Box, {
    use: "span"
  }, Icon && /*#__PURE__*/React.createElement(Icon, {
    size: 24
  }), /*#__PURE__*/React.createElement(SideNavSlots.Slot, {
    name: SideNavItemSlotName.AVATAR
  })), /*#__PURE__*/React.createElement(_StyledText, {
    id: getItemLabelId(id),
    mt: propGetter(Space.S_4, Space.NONE),
    ml: propGetter(undefined, Space.S_16),
    mr: propGetter(undefined, 'auto'),
    pr: hasMenu ? propGetter(undefined, Space.S_16) : undefined,
    textAlign: propGetter('center', 'unset'),
    variant: propGetter(TextStyle.TINY, TextStyle.PRIMARY),
    display: "grid",
    hide: isLabelUnder ? false : whenLabelHidden
  }, children), /*#__PURE__*/React.createElement(TransitionFade, {
    "in": draggable === true
  }, /*#__PURE__*/React.createElement(SideNavDraggableIcon, {
    hide: whenLabelHidden,
    use: "span"
  }, /*#__PURE__*/React.createElement(Icons.Drag, null))), !draggable && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SideNavSlots.Slot, {
    name: SideNavItemSlotName.MENU,
    onChange: setHasMenu
  }), hasDot && /*#__PURE__*/React.createElement(SideNavItemsBadge, {
    position: propGetter('absolute', undefined),
    right: propGetter(Space.S_8, undefined),
    top: propGetter(18, undefined),
    __css: (_ref2 = {}, _ref2[SideNavItemBase + ":hover &"] = hasMenu ? {
      display: 'none'
    } : {}, _ref2)
  })));
});