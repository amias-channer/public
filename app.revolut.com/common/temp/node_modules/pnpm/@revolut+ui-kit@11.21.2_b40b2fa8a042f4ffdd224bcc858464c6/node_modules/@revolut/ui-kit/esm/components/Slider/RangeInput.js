/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { rem } from 'polished';
import { useMessage } from "../../hooks";
import { noop } from "../../utils";
import { Relative } from '..';
import { BG_COLOR, FG_COLOR, MAX, MIN, STEP, THUMB_SIZE, TRACK_GAP } from "./constants";
import { StyledInput } from "./StyledInput";
import { Thumb } from "./Thumb";
import { Track } from "./Track";
import { Wrapper } from "./Wrapper";
import { useRange } from "./useRange";
import { useFocussed } from "./useFocussed";
var HALF_THUMB_SIZE = THUMB_SIZE / 2;
var THUMB_GAP = HALF_THUMB_SIZE + TRACK_GAP;
export var RangeInput = function RangeInput(_ref) {
  var _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      value = _ref.value,
      defaultValue = _ref.defaultValue,
      _ref$min = _ref.min,
      limitMin = _ref$min === void 0 ? MIN : _ref$min,
      _ref$max = _ref.max,
      limitMax = _ref$max === void 0 ? MAX : _ref$max,
      _ref$step = _ref.step,
      step = _ref$step === void 0 ? STEP : _ref$step,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      labelMin = _ref.labelMin,
      labelMax = _ref.labelMax,
      rest = _objectWithoutPropertiesLoose(_ref, ["onChange", "value", "defaultValue", "min", "max", "step", "disabled", "labelMin", "labelMax"]);

  var _useFocussed = useFocussed(),
      focusedMin = _useFocussed[0],
      setFocussedMin = _useFocussed[1],
      setBlurredMin = _useFocussed[2];

  var _useFocussed2 = useFocussed(),
      focusedMax = _useFocussed2[0],
      setFocussedMax = _useFocussed2[1],
      setBlurredMax = _useFocussed2[2];

  var _ref2 = defaultValue || [],
      defaultMin = _ref2[0],
      defaultMax = _ref2[1];

  var _ref3 = value || [],
      valueMin = _ref3[0],
      valueMax = _ref3[1];

  var _useRange = useRange({
    defaultMin: defaultMin,
    defaultMax: defaultMax,
    valueMin: valueMin,
    valueMax: valueMax,
    limitMin: limitMin,
    limitMax: limitMax,
    step: step,
    onChange: onChange
  }),
      min = _useRange.min,
      max = _useRange.max,
      onChangeMin = _useRange.onChangeMin,
      onChangeMax = _useRange.onChangeMax,
      adjustLeft = _useRange.adjustLeft,
      adjustMiddle = _useRange.adjustMiddle,
      adjustRight = _useRange.adjustRight;

  var percent = (limitMax - limitMin) / 100;
  var percentageMin = (min - limitMin) / percent;
  var percentageMax = (max - limitMin) / percent;
  var m = useMessage();
  return /*#__PURE__*/React.createElement(Wrapper, _extends({
    disabled: disabled
  }, rest), /*#__PURE__*/React.createElement(Relative, {
    m: "0 " + rem(HALF_THUMB_SIZE),
    height: THUMB_SIZE
  }, /*#__PURE__*/React.createElement(Track, {
    "data-testid": "minimum-track",
    left: rem(-HALF_THUMB_SIZE),
    right: "calc(" + rem(THUMB_GAP) + " + " + (100 - percentageMin) + "%)",
    onClick: adjustLeft,
    rounded: "left",
    bg: BG_COLOR
  }), /*#__PURE__*/React.createElement(Track, {
    left: "calc(" + percentageMin + "% + " + rem(THUMB_GAP) + ")",
    right: "calc(" + (100 - percentageMax) + "% + " + rem(THUMB_GAP) + ")",
    onClick: adjustMiddle,
    bg: FG_COLOR
  }), /*#__PURE__*/React.createElement(Track, {
    "data-testid": "maximum-track",
    right: rem(-HALF_THUMB_SIZE),
    left: "calc(" + percentageMax + "% + " + rem(THUMB_GAP) + ")",
    onClick: adjustRight,
    rounded: "right",
    bg: BG_COLOR
  }), /*#__PURE__*/React.createElement(Thumb, {
    position: percentageMin + "%",
    focused: focusedMin
  }), /*#__PURE__*/React.createElement(Thumb, {
    position: percentageMax + "%",
    focused: focusedMax
  })), /*#__PURE__*/React.createElement(StyledInput, {
    value: min,
    min: limitMin,
    max: limitMax,
    step: step,
    onChange: onChangeMin,
    "aria-label": labelMin || m('label.min'),
    disabled: disabled,
    onFocus: setFocussedMin,
    onBlur: setBlurredMin
  }), /*#__PURE__*/React.createElement(StyledInput, {
    value: max,
    min: limitMin,
    max: limitMax,
    step: step,
    onChange: onChangeMax,
    "aria-label": labelMax || m('label.max'),
    disabled: disabled,
    onFocus: setFocussedMax,
    onBlur: setBlurredMax
  }));
};