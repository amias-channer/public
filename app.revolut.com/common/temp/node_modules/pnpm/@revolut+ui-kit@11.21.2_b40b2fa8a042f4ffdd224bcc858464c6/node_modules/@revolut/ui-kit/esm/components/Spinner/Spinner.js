/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled, { css, keyframes } from 'styled-components';
import { Radius } from "../../constants";
import { Box } from "../Box";
var SPINNER_MAX_SIZE = 0.6;

var getMaxStrokeDasharray = function getMaxStrokeDasharray(circumference) {
  return circumference * SPINNER_MAX_SIZE + "px, " + circumference + "px";
};

var spinKeyframes = function spinKeyframes(circumference) {
  return keyframes(["0%{stroke-dasharray:1px,", "px;stroke-dashoffset:0px;transform:rotate(0deg);}50%{stroke-dasharray:", ";stroke-dashoffset:-", "px;transform:rotate(180deg);}100%{stroke-dasharray:", ";stroke-dashoffset:-", "px;transform:rotate(360deg);}"], circumference, getMaxStrokeDasharray(circumference), circumference * 0.15, getMaxStrokeDasharray(circumference), circumference);
};

var SpinnerCircle = /*#__PURE__*/styled.circle.withConfig({
  displayName: "Spinner__SpinnerCircle",
  componentId: "sc-1lua4ko-0"
})(function (props) {
  return css(["animation-name:", ";animation-duration:", "ms;animation-iteration-count:infinite;animation-timing-function:linear;transform-origin:center;"], spinKeyframes(props.strokeDasharray), props.duration);
});
export var Spinner = function Spinner(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 24 : _ref$size,
      _ref$strokeWidth = _ref.strokeWidth,
      strokeWidth = _ref$strokeWidth === void 0 ? 2 : _ref$strokeWidth,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? 1700 : _ref$duration,
      rest = _objectWithoutPropertiesLoose(_ref, ["size", "strokeWidth", "duration"]);

  var center = size / 2;
  var radius = (size - strokeWidth) / 2;
  var circumference = (size - strokeWidth) * Math.PI;
  return /*#__PURE__*/React.createElement(Box, _extends({
    radius: Radius.ROUND,
    use: "svg",
    viewBox: "0 0 " + size + " " + size,
    size: size
  }, rest), /*#__PURE__*/React.createElement(SpinnerCircle, {
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeWidth: strokeWidth,
    strokeDasharray: circumference,
    strokeDashoffset: "0px",
    duration: duration,
    cx: center,
    cy: center,
    r: radius
  }));
};