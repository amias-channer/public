/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import * as Icons from '@revolut/icons';
import styled from 'styled-components';
import { css } from '@styled-system/css';
import { Color, Space } from "../../constants";
import { isNumber, times } from "../../utils";
import { useMessage } from "../../hooks";
import { Checkbox } from "../Checkbox";
import { RadioGroup } from "../RadioGroup";
import { Box } from "../Box";
export var StarsVariant = {
  DEFAULT: 'default',
  STATIC: 'static'
};
var DEFAULT_NUMBER_OF_STARTS = 5;
var StarsContainer = /*#__PURE__*/styled(Box).withConfig({
  displayName: "Stars__StarsContainer",
  componentId: "jr8ens-0"
})(css({
  columnGap: Space.S_8,
  display: 'grid',
  gridAutoColumns: 'min-content',
  gridAutoFlow: 'column'
}), function (props) {
  return {
    opacity: props.isDisabled ? 0.5 : 1
  };
});

var isChecked = function isChecked(state) {
  return state.value && state.value > state.index || false;
};

export var Stars = function Stars(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === void 0 ? Color.BLUE : _ref$color,
      _ref$maxNumber = _ref.maxNumber,
      maxNumber = _ref$maxNumber === void 0 ? DEFAULT_NUMBER_OF_STARTS : _ref$maxNumber,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 24 : _ref$size,
      labelRateProp = _ref.labelRate,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? StarsVariant.DEFAULT : _ref$variant,
      rest = _objectWithoutPropertiesLoose(_ref, ["color", "maxNumber", "size", "labelRate", "variant"]);

  var m = useMessage();
  var labelRate = labelRateProp != null ? labelRateProp : m('action.rate');
  var maxNumberOfStars = isNumber(maxNumber) && maxNumber > 0 ? maxNumber : DEFAULT_NUMBER_OF_STARTS;
  return /*#__PURE__*/React.createElement(StarsContainer, {
    isDisabled: rest.disabled
  }, variant === StarsVariant.STATIC ? times(function (index) {
    var Icon = isChecked({
      value: rest.value,
      index: index
    }) ? Icons.StarFilled : Icons.StarEmpty;
    return /*#__PURE__*/React.createElement(Icon, {
      key: index,
      size: size,
      color: color
    });
  }, maxNumberOfStars) : /*#__PURE__*/React.createElement(RadioGroup, rest, function (group) {
    return times(function (index) {
      return /*#__PURE__*/React.createElement(Checkbox, _extends({}, group.getInputProps({
        value: index + 1
      }), {
        key: index,
        title: labelRate + " " + (index + 1),
        "aria-label": labelRate + " " + (index + 1),
        checked: isChecked({
          value: group.value,
          index: index
        }),
        render: function render(_ref2) {
          var isActive = _ref2.isActive;
          return isActive ? /*#__PURE__*/React.createElement(Icons.StarFilled, {
            size: size,
            color: color
          }) : /*#__PURE__*/React.createElement(Icons.StarEmpty, {
            size: size,
            color: color
          });
        }
      }));
    }, maxNumberOfStars);
  }));
};