/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import { css } from '@styled-system/css';
import { Color, Space, TextStyle } from "../../constants";
import { Text } from "../Text";
var IconContainer = /*#__PURE__*/styled(Text).withConfig({
  displayName: "Status__IconContainer",
  componentId: "c6r34f-0"
})(css({
  alignItems: 'center',
  display: 'flex',
  marginBottom: 'auto',
  '::before': {
    content: '"X"',
    visibility: 'hidden',
    width: 0
  }
}));

function getSize(variant) {
  switch (variant) {
    case TextStyle.H5:
      return 24;

    case TextStyle.SMALL:
      return 10;

    default:
      return 16;
  }
}

export var Status = function Status(_ref) {
  var children = _ref.children,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? Color.GREY_TONE_50 : _ref$color,
      iconColor = _ref.iconColor,
      Icon = _ref.useIcon,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? TextStyle.PRIMARY : _ref$variant,
      _ref$iconSize = _ref.iconSize,
      iconSize = _ref$iconSize === void 0 ? getSize(variant) : _ref$iconSize,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "color", "iconColor", "useIcon", "variant", "iconSize"]);

  return /*#__PURE__*/React.createElement(Text, _extends({
    use: "span",
    display: "flex",
    color: color,
    variant: variant
  }, rest), Icon && /*#__PURE__*/React.createElement(IconContainer, {
    mr: iconSize <= 10 ? Space.S_4 : Space.S_8
  }, /*#__PURE__*/React.createElement(Icon, {
    size: iconSize,
    color: iconColor != null ? iconColor : 'inherit'
  })), /*#__PURE__*/React.createElement(Text, null, children));
};