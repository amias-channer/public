/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _VARIANT_TIMEOUT;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { StatusPopupVariant } from "./variants";
import { StatusIcon } from "./StatusIcon";
import { DismissTimeout, StatusPopupBase } from "../StatusPopupBase";
var VARIANT_TIMEOUT = (_VARIANT_TIMEOUT = {}, _VARIANT_TIMEOUT[StatusPopupVariant.SUCCESS] = DismissTimeout.SHORT, _VARIANT_TIMEOUT[StatusPopupVariant.SUCCESS_OPTIONAL] = DismissTimeout.LONG, _VARIANT_TIMEOUT[StatusPopupVariant.SUCCESS_RESULT] = undefined, _VARIANT_TIMEOUT[StatusPopupVariant.PENDING] = DismissTimeout.LONG, _VARIANT_TIMEOUT[StatusPopupVariant.LOADING] = undefined, _VARIANT_TIMEOUT[StatusPopupVariant.WARNING] = undefined, _VARIANT_TIMEOUT[StatusPopupVariant.ERROR] = undefined, _VARIANT_TIMEOUT[StatusPopupVariant.OFFLINE] = DismissTimeout.LONG, _VARIANT_TIMEOUT);
export var StatusPopup = function StatusPopup(_ref) {
  var children = _ref.children,
      variant = _ref.variant,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "variant"]);

  return /*#__PURE__*/React.createElement(StatusPopupBase, _extends({
    timeout: VARIANT_TIMEOUT[variant]
  }, rest), function (_ref2) {
    var isEntered = _ref2.isEntered;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StatusIcon, {
      variant: variant,
      autoPlay: isEntered
    }), children);
  });
};
StatusPopup.Title = StatusPopupBase.Title;
StatusPopup.Description = StatusPopupBase.Description;
StatusPopup.Actions = StatusPopupBase.Actions;