/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import createSlots from 'nano-slots';
import { Color, Radius, Size, Space, TextStyle } from "../../constants";
import { isFunction, noop } from "../../utils";
import { Box } from "../Box";
import { Flex } from "../Flex";
import { Text } from "../Text";
import { useAccessibleId } from "../AccessibleId";
import { Popup } from "../Popup";
import { getDescriptionId, getLabelId } from "../Header/utils";
import { PopupVariant } from "../Popup/variants";
import { TimerProgressBar } from "../TimerProgressBar";
var ACTIONS_SLOT_NAME = 'actions';
var StatusPopupSlotsContext = createSlots();
export var DismissTimeout = {
  SHORT: 1800,
  LONG: 3000
};

/** @private */
export var StatusPopupBase = function StatusPopupBase(_ref) {
  var children = _ref.children,
      timeout = _ref.timeout,
      _ref$closable = _ref.closable,
      closable = _ref$closable === void 0 ? true : _ref$closable,
      _ref$onExit = _ref.onExit,
      _onExit = _ref$onExit === void 0 ? noop : _ref$onExit,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "timeout", "closable", "onExit"]);

  return /*#__PURE__*/React.createElement(StatusPopupSlotsContext.Provider, null, /*#__PURE__*/React.createElement(Popup, _extends({
    variant: PopupVariant.RESULT,
    onExit: function onExit() {
      if (!closable) {
        return;
      }

      _onExit();
    }
  }, rest), function (_ref2) {
    var isOpen = _ref2.isOpen,
        isEntered = _ref2.isEntered,
        toggle = _ref2.toggle;
    return /*#__PURE__*/React.createElement(React.Fragment, null, isEntered ? /*#__PURE__*/React.createElement(StatusPopupBaseTimerProgressBar, {
      timeout: timeout,
      onExit: function onExit() {
        return toggle(false);
      }
    }) : /*#__PURE__*/React.createElement(StatusPopupBaseTimerProgressBar, null), /*#__PURE__*/React.createElement(Flex, {
      pt: Space.S_32,
      pb: Space.S_8,
      flexDirection: "column",
      alignItems: "center"
    }, isFunction(children) ? children({
      isEntered: isEntered,
      isOpen: isOpen,
      toggle: toggle
    }) : children), /*#__PURE__*/React.createElement(StatusPopupSlotsContext.Slot, {
      name: ACTIONS_SLOT_NAME
    }, /*#__PURE__*/React.createElement(Box, {
      pt: Space.S_16
    })));
  }));
};

var StatusPopupBaseTimerProgressBar = function StatusPopupBaseTimerProgressBar(props) {
  return /*#__PURE__*/React.createElement(TimerProgressBar, _extends({
    width: Size.S_40,
    height: Size.S_4,
    radius: Radius.BUTTON_SM,
    bg: Color.GREY_TONE_5,
    m: "auto"
  }, props));
};

var StatusPopupBaseActions = function StatusPopupBaseActions(_ref3) {
  var children = _ref3.children;
  return /*#__PURE__*/React.createElement(StatusPopupSlotsContext.Fill, {
    name: ACTIONS_SLOT_NAME
  }, /*#__PURE__*/React.createElement(Popup.Actions, null, children));
};

function StatusPopupBaseTitle(props) {
  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(Text, _extends({
    id: getLabelId(id),
    variant: TextStyle.H5,
    textAlign: "center",
    mt: Space.S_24,
    color: Color.FOREGROUND
  }, props));
}

function StatusPopupBaseDescription(props) {
  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(Text, _extends({
    id: getDescriptionId(id),
    variant: TextStyle.CAPTION,
    textAlign: "center",
    mt: Space.S_24,
    color: Color.GREY_TONE_50
  }, props));
}

StatusPopupBase.Title = StatusPopupBaseTitle;
StatusPopupBase.Description = StatusPopupBaseDescription;
StatusPopupBase.Actions = StatusPopupBaseActions;