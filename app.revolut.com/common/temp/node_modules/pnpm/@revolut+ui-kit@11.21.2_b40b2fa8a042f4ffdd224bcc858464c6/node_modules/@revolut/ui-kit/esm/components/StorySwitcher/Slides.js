/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback, useState } from 'react';
import styled from 'styled-components';
import css from '@styled-system/css';
import { Color, KeyboardEventKey, Radius, Space } from "../../constants";
import { useKeyDown, useMessage, useOnHold } from "../../hooks";
import { noop } from "../../utils";
import { Absolute } from "../Position";
import { TimerProgressBar } from "../TimerProgressBar";
import { Flex } from "../Flex";
import { SliderBox } from "../SliderBox";
import { useAccessibleId } from "../AccessibleId";
import { STORY_TIMEOUT } from "./constants";
import { SlidesContext } from "./SlidesContext";
import { StorySwitcherContext } from "./StorySwitcherContext";
export var Slides = function Slides(_ref) {
  var labelButtonPrev = _ref.labelButtonPrev,
      labelButtonNext = _ref.labelButtonNext,
      close = _ref.close,
      children = _ref.children,
      _ref$onFinish = _ref.onFinish,
      onFinish = _ref$onFinish === void 0 ? noop : _ref$onFinish,
      waitOnLastSlide = _ref.waitOnLastSlide;
  var m = useMessage();
  var slides = React.Children.toArray(children).filter(React.isValidElement);

  var _useState = useState(0),
      currentSlide = _useState[0],
      setCurrentSlide = _useState[1];

  var isFirstSlide = currentSlide === 0;
  var isLastSlide = currentSlide === slides.length - 1;
  var id = useAccessibleId();
  var prevSlide = useCallback(function () {
    setCurrentSlide(function (slide) {
      return slide > 0 ? slide - 1 : slide;
    });
  }, [setCurrentSlide]);
  var nextSlide = useCallback(function () {
    if (isLastSlide) {
      onFinish();
    } else {
      setCurrentSlide(function (slide) {
        return slide + 1;
      });
    }
  }, [isLastSlide, setCurrentSlide, onFinish]);
  var onClick = useCallback(function (event) {
    var rect = event.currentTarget.getBoundingClientRect();

    if (event.clientX < rect.x + rect.width / 2) {
      prevSlide();
    } else {
      nextSlide();
    }
  }, [prevSlide, nextSlide]);

  var _useOnHold = useOnHold({
    onClick: onClick
  }),
      isHold = _useOnHold.isHold,
      handlers = _objectWithoutPropertiesLoose(_useOnHold, ["isHold"]);

  useKeyDown(KeyboardEventKey.ESCAPE, close);
  useKeyDown(KeyboardEventKey.ARROW_LEFT, prevSlide);
  useKeyDown(KeyboardEventKey.ARROW_RIGHT, nextSlide);
  return /*#__PURE__*/React.createElement(SlidesContext.Provider, {
    value: isHold
  }, /*#__PURE__*/React.createElement(SliderBox, {
    hasPrev: !isFirstSlide,
    hasNext: !isLastSlide,
    labelButtonPrev: labelButtonPrev != null ? labelButtonPrev : m('action.prev-slide'),
    labelButtonNext: labelButtonNext != null ? labelButtonNext : m('action.next-slide'),
    onPrevClick: prevSlide,
    onNextClick: nextSlide,
    fillSpace: "none",
    height: "100%",
    flex: "1"
  }, slides.map(function (slide, index) {
    return /*#__PURE__*/React.createElement(StorySwitcherContext.Provider, {
      // eslint-disable-next-line react/no-array-index-key
      key: index,
      value: {
        id: currentSlide !== index ? null : id,
        active: currentSlide === index
      }
    }, /*#__PURE__*/React.createElement(Slide, _extends({
      hide: currentSlide !== index ? true : undefined
    }, handlers), slide));
  }), /*#__PURE__*/React.createElement(SlidesProgressWrapper, null, slides.map(function (_, index) {
    return /*#__PURE__*/React.createElement(TimerProgressBar // eslint-disable-next-line react/no-array-index-key
    , {
      key: index,
      timeout: currentSlide === index ? STORY_TIMEOUT : undefined,
      flex: "1",
      height: Space.S_2,
      ml: Space.S_2,
      bg: index < currentSlide ? Color.WHITE : Color.WHITE_40,
      activeBg: Color.WHITE,
      radius: Radius.STORY,
      onAnimationEnd: waitOnLastSlide ? undefined : nextSlide,
      paused: isHold
    });
  }))));
};
var Slide = /*#__PURE__*/styled(Flex).withConfig({
  displayName: "Slides__Slide",
  componentId: "sc-1kf82yb-0"
})(css({
  flex: '1',
  flexDirection: 'column',
  overflow: 'hidden',
  transform: 'translate3d(0, 0, 0)',
  // Safari fix
  borderRadius: [null, null, Radius.STORY]
}));
var SlidesProgressWrapper = /*#__PURE__*/styled(Absolute).withConfig({
  displayName: "Slides__SlidesProgressWrapper",
  componentId: "sc-1kf82yb-1"
})(css({
  display: 'flex',
  top: Space.S_24,
  left: Space.S_24,
  right: Space.S_24,
  pl: Space.S_2,
  ml: Space.N_2
}));