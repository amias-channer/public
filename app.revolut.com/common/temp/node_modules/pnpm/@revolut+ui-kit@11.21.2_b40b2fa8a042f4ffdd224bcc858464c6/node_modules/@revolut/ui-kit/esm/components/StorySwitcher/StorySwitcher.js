/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import React, { useCallback, useState } from 'react';
import { isFunction, noop } from "../../utils";
import { useMessage } from "../../hooks";
import { TransitionSlide } from "../Transitions";
import { Color } from "../../constants";
import { Toggle } from "../Toggle";
import { Box } from "../Box";
import { AccessibleId } from "../AccessibleId";
import { TRANSITION_OFFSET_Y } from "./constants";
import { StyledModal } from "./styles";
import { getLabelId } from "./utils";
import { Slides } from "./Slides";
import { CloseButton } from "./CloseButton";
export function StorySwitcher(_ref) {
  var _ref$defaultIsOpen = _ref.defaultIsOpen,
      defaultIsOpen = _ref$defaultIsOpen === void 0 ? false : _ref$defaultIsOpen,
      controlledOpen = _ref.isOpen,
      _ref$onExit = _ref.onExit,
      onExit = _ref$onExit === void 0 ? noop : _ref$onExit,
      _ref$onFinish = _ref.onFinish,
      _onFinish = _ref$onFinish === void 0 ? noop : _ref$onFinish,
      labelButtonClose = _ref.labelButtonClose,
      labelButtonPrev = _ref.labelButtonPrev,
      labelButtonNext = _ref.labelButtonNext,
      _ref$waitOnLastSlide = _ref.waitOnLastSlide,
      waitOnLastSlide = _ref$waitOnLastSlide === void 0 ? false : _ref$waitOnLastSlide,
      children = _ref.children;

  var m = useMessage();

  var _useState = useState(false),
      isEntered = _useState[0],
      setEntered = _useState[1];

  var handleChange = useCallback(function (state) {
    if (!state) onExit();
  }, [onExit]);
  return /*#__PURE__*/React.createElement(AccessibleId, null, function (_ref2) {
    var id = _ref2.id;
    return /*#__PURE__*/React.createElement(Toggle, {
      defaultState: defaultIsOpen,
      state: controlledOpen,
      onChange: handleChange
    }, function (_ref3) {
      var isOpen = _ref3.state,
          toggle = _ref3.toggle;
      return /*#__PURE__*/React.createElement(StyledModal, {
        isOpen: isOpen,
        onRequestClose: function onRequestClose() {
          return toggle(false);
        },
        __layerFilter: true
      }, /*#__PURE__*/React.createElement(TransitionSlide, {
        "in": isOpen,
        offsetY: TRANSITION_OFFSET_Y,
        onEnterComplete: function onEnterComplete() {
          return setEntered(true);
        },
        onExitComplete: function onExitComplete() {
          return setEntered(false);
        }
      }, /*#__PURE__*/React.createElement(Box, {
        role: "dialog",
        "aria-modal": true,
        color: Color.WHITE_80,
        "aria-labelledby": getLabelId(id)
      }, /*#__PURE__*/React.createElement(Slides, {
        onFinish: function onFinish() {
          toggle(false);

          _onFinish();
        },
        close: function close() {
          return toggle(false);
        },
        labelButtonPrev: labelButtonPrev,
        labelButtonNext: labelButtonNext,
        waitOnLastSlide: waitOnLastSlide
      }, isFunction(children) ? children({
        isEntered: isEntered,
        isOpen: isOpen,
        toggle: toggle
      }) : children), /*#__PURE__*/React.createElement(CloseButton, {
        labelButtonClose: labelButtonClose != null ? labelButtonClose : m('action.close'),
        onClick: function onClick() {
          return toggle(false);
        }
      }))));
    });
  });
}