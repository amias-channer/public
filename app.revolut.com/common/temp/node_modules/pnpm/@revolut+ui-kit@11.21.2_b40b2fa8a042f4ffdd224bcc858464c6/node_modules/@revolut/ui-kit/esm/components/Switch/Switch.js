/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { Color, Transition } from "../../constants";
import { themeColor, themeTransition } from "../../utils";
import { Box } from "../Box";
import { Checkbox } from "../Checkbox";
import { SWITCH_BORDER, SWITCH_HEIGHT, SWITCH_KNOB, SWITCH_WIDTH } from "./constants";

var getBaseColor = function getBaseColor(state) {
  if (state.isDisabled) return Color.GREY_TONE_10;
  return state.isActive ? Color.PRIMARY : Color.GREY_TONE_20;
};

var getKnobColor = function getKnobColor(state) {
  return state.isDisabled ? Color.GREY_TONE_20 : Color.WHITE;
};

var SwitchBase = /*#__PURE__*/styled(Box).withConfig({
  displayName: "Switch__SwitchBase",
  componentId: "sc-1815cfr-0"
})(["width:", ";height:", ";padding:", ";border-radius:", ";background-color:", ";"], SWITCH_WIDTH, SWITCH_HEIGHT, SWITCH_BORDER, SWITCH_HEIGHT, function (props) {
  return themeColor(getBaseColor(props));
});
var SwitchKnob = /*#__PURE__*/styled(Box).withConfig({
  displayName: "Switch__SwitchKnob",
  componentId: "sc-1815cfr-1"
})(["width:", ";height:", ";border-radius:", ";background-color:", ";transition:", ";box-shadow:0 0 2px 0 rgba(0,0,0,0.12),0 2px 2px 0 rgba(0,0,0,0.2);transform:translateX( ", " );"], SWITCH_KNOB, SWITCH_KNOB, SWITCH_KNOB, function (props) {
  return themeColor(getKnobColor(props));
}, themeTransition(Transition.TRANSFORM), function (props) {
  return props.isActive ? "calc(" + SWITCH_WIDTH + " - (" + SWITCH_BORDER + " * 2) - " + SWITCH_KNOB + ")" : 0;
});
export var Switch = /*#__PURE__*/forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(Checkbox, _extends({
    ref: ref,
    render: function render(state) {
      return /*#__PURE__*/React.createElement(SwitchBase, state, /*#__PURE__*/React.createElement(SwitchKnob, state));
    }
  }, props));
});
Switch.displayName = 'Switch';