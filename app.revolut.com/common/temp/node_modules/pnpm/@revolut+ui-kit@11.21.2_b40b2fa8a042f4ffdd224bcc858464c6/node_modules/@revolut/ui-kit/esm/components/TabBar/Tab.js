/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useRef } from 'react';
import { NavLink } from 'react-router-dom';
import { rem } from 'polished';
import { useUniversalLayoutEffect, useWindow } from "../../hooks";
import { setRefs } from "../../utils";
import { ButtonBase } from "../ButtonBase";
import { useTabBarContext } from "./TabBarContext";
import { useActiveRouteMatch } from "./useActiveRouteMatch";
import { Box } from "../Box";
import { Space } from "../../constants";
import { Badge, BadgeSize, BadgeVariant, Relative } from '..';
var DOT_OFFSET = 8.5;
var NAVIGATION_TAB_MARGIN = 4;
var TabBase = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var Icon = _ref.useIcon,
      hasDot = _ref.hasDot,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["useIcon", "hasDot", "children"]);

  var win = useWindow();
  var tabRef = useRef(null);
  var setTabRects = useTabBarContext();
  var isSelected = rest['aria-selected'] === true;
  useUniversalLayoutEffect(function () {
    var element = tabRef.current;

    if (setTabRects && isSelected && element && win && win.ResizeObserver) {
      var rect;

      var updateRect = function updateRect() {
        return setTabRects(function (prev) {
          var next = prev.filter(function (item) {
            return item !== rect;
          });
          rect = {
            top: element.offsetTop - parseInt(win.getComputedStyle(element).marginTop),
            left: element.offsetLeft,
            width: element.offsetWidth,
            height: element.offsetHeight
          };
          return [].concat(next, [rect]);
        });
      };

      updateRect();
      var resizeObserver = new win.ResizeObserver(function (_ref2) {
        var entry = _ref2[0];

        if (entry.target instanceof win.HTMLElement) {
          updateRect();
        }
      });
      var mutationObserver = new win.MutationObserver(function () {
        updateRect();
      });

      if (element.parentElement) {
        resizeObserver.observe(element.parentElement);
        mutationObserver.observe(element.parentElement, {
          childList: true
        });
      }

      return function () {
        setTabRects(function (prev) {
          return prev.filter(function (item) {
            return item !== rect;
          });
        });
        resizeObserver.disconnect();
        mutationObserver.disconnect();
      };
    }
  }, [win, isSelected, setTabRects, tabRef, children]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ButtonBase, _extends({
    ref: setRefs(tabRef, ref),
    role: "tab"
  }, rest), Icon && /*#__PURE__*/React.createElement(Box, {
    use: "span",
    mr: children ? Space.S_8 : Space.NONE
  }, /*#__PURE__*/React.createElement(Icon, {
    size: 16
  })), children), hasDot && /*#__PURE__*/React.createElement(Relative, {
    size: 0,
    right: rem(BadgeSize.SIZE_5 + NAVIGATION_TAB_MARGIN + DOT_OFFSET),
    top: rem(DOT_OFFSET)
  }, /*#__PURE__*/React.createElement(Badge, {
    display: "flex",
    variant: BadgeVariant.DOT,
    m: Space.NONE
  })));
});
var TabLink = /*#__PURE__*/forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(TabBase, _extends({
    ref: ref,
    "aria-selected": useActiveRouteMatch(props) !== null
  }, props));
});
export var Tab = /*#__PURE__*/forwardRef(function (_ref3, ref) {
  var _ref3$use = _ref3.use,
      use = _ref3$use === void 0 ? NavLink : _ref3$use,
      rest = _objectWithoutPropertiesLoose(_ref3, ["use"]);

  switch (use) {
    case NavLink:
      {
        return /*#__PURE__*/React.createElement(TabLink, _extends({
          ref: ref,
          use: use
        }, rest));
      }

    default:
      return /*#__PURE__*/React.createElement(TabBase, _extends({
        ref: ref,
        use: use
      }, rest));
  }
});