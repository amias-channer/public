/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useRef, useState } from 'react';
import styled from 'styled-components';
import { themeColor, themeTransition } from "../../utils";
import { Breakpoint, Color, Space, Transition } from "../../constants";
import { useElementScroll } from "../../hooks";
import { Flex } from "../Flex";
import { SliderBox } from "../SliderBox";
import { TabBarContext } from "./TabBarContext";
import { TabBarBehaviour, TabBarVariant } from "./constants";
import { Tab } from "./Tab";
import { TabSkeleton } from "./TabSkeleton";
import { getBehaviourStyles } from "./utils";
var TabBarFlex = /*#__PURE__*/styled(Flex).withConfig({
  displayName: "TabBar__TabBarFlex",
  componentId: "sc-1hosdu4-0"
})(["position:relative;z-index:0;box-shadow:inset 0 -1px 0px ", ";&::before{content:", ";position:absolute;transform-origin:top left;transition:", ";}&[aria-orientation='horizontal']::before{width:", ";transform:", ";}&[aria-orientation='vertical']::before{transform:", ";}[role='tab']{position:relative;white-space:nowrap;}-ms-overflow-style:none;scrollbar-width:none;&::-webkit-scrollbar{display:none;}", ""], function (props) {
  return props.withBorder ? themeColor(Color.GREY_TONE_10) : 'none';
}, function (_ref) {
  var rect = _ref.rect;
  return rect ? "''" : 'none';
}, themeTransition(Transition.TAB_BAR_INDICATOR), function (_ref2) {
  var rect = _ref2.rect;
  return (rect == null ? void 0 : rect.width) + "px";
}, function (_ref3) {
  var rect = _ref3.rect;
  return "translateX(" + (rect == null ? void 0 : rect.left) + "px) translateY(" + (rect == null ? void 0 : rect.top) + "px)";
}, function (_ref4) {
  var rect = _ref4.rect;
  return "translateY(" + (rect == null ? void 0 : rect.top) + "px)";
}, function (props) {
  return getBehaviourStyles(props.behaviour, props.variant);
});
export var TabBar = function TabBar(_ref5) {
  var _ref5$variant = _ref5.variant,
      variant = _ref5$variant === void 0 ? TabBarVariant.DEFAULT : _ref5$variant,
      _ref5$behaviour = _ref5.behaviour,
      behaviour = _ref5$behaviour === void 0 ? TabBarBehaviour.AUTO : _ref5$behaviour,
      _ref5$border = _ref5.border,
      border = _ref5$border === void 0 ? false : _ref5$border,
      _ref5$vertical = _ref5.vertical,
      vertical = _ref5$vertical === void 0 ? false : _ref5$vertical,
      children = _ref5.children,
      props = _objectWithoutPropertiesLoose(_ref5, ["variant", "behaviour", "border", "vertical", "children"]);

  var _useState = useState([]),
      rects = _useState[0],
      setRects = _useState[1];

  var ref = useRef(null);

  var _useElementScroll = useElementScroll({
    ref: ref,
    align: 'side'
  }),
      scrollLeft = _useElementScroll.scrollLeft,
      scrollRight = _useElementScroll.scrollRight,
      hasMoreLeft = _useElementScroll.hasMoreLeft,
      hasMoreRight = _useElementScroll.hasMoreRight;

  return /*#__PURE__*/React.createElement(SliderBox, {
    fillSpace: "none",
    buttonTransformSpace: Space.S_4,
    hasNext: hasMoreRight,
    hasPrev: hasMoreLeft,
    onPrevClick: scrollLeft,
    onNextClick: scrollRight,
    hideButtons: behaviour === TabBarBehaviour.WRAP || "*-" + Breakpoint.MD,
    hideButtonsPreview: false,
    showGradient: true,
    showPlaceholders: false
  }, /*#__PURE__*/React.createElement(TabBarFlex, _extends({
    ref: ref,
    role: "tablist",
    variant: variant,
    variantKey: "tabBarStyles",
    behaviour: behaviour,
    "aria-orientation": vertical ? 'vertical' : 'horizontal',
    flexDirection: vertical ? 'column' : 'row',
    withBorder: border,
    rect: rects[rects.length - 1]
  }, props), /*#__PURE__*/React.createElement(TabBarContext.Provider, {
    value: setRects
  }, children)));
};
TabBar.Item = Tab;
TabBar.ItemSkeleton = TabSkeleton;