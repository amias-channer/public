/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useMemo } from 'react';
import { useLocation, useRouteMatch } from 'react-router-dom';
import { createLocation } from 'history';
import { isFunction } from "../../utils";

/** @private */
export function useActiveRouteMatch(_ref) {
  var toPath = _ref.to,
      propsLocation = _ref.location,
      rest = _objectWithoutPropertiesLoose(_ref, ["to", "location"]);

  var location = useLocation();
  var path = useMemo(function () {
    var currentLocation = propsLocation || location;
    var resolvedToLocation = isFunction(toPath) ? toPath(currentLocation) : toPath;
    var normalizedToLocation = typeof resolvedToLocation === 'string' ? createLocation(resolvedToLocation, null, undefined, currentLocation) : resolvedToLocation;
    return normalizedToLocation == null ? void 0 : normalizedToLocation.pathname;
  }, [location, toPath, propsLocation]);
  return useRouteMatch(_extends({
    path: path
  }, rest));
}