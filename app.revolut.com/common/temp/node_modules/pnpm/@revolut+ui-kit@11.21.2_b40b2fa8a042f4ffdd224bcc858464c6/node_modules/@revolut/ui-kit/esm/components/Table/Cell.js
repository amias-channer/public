/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { Ellipsis } from "../Ellipsis";
import { EmptyCell } from "./EmptyCell";
import { CellBase, CellBaseType } from "./CellBase";
export var Cell = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      renderStart = _ref.renderStart,
      renderEnd = _ref.renderEnd,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? CellBaseType.CONTENT : _ref$type,
      _ref$tooltip = _ref.tooltip,
      tooltip = _ref$tooltip === void 0 ? 'auto' : _ref$tooltip,
      _ref$ellipsis = _ref.ellipsis,
      ellipsis = _ref$ellipsis === void 0 ? true : _ref$ellipsis,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "renderStart", "renderEnd", "type", "tooltip", "ellipsis"]);

  return /*#__PURE__*/React.createElement(CellBase, _extends({
    type: type,
    ref: ref
  }, rest), renderStart && /*#__PURE__*/React.createElement(CellBase.Start, null, renderStart()), /*#__PURE__*/React.createElement(CellBase.Main, null, children == null ? /*#__PURE__*/React.createElement(EmptyCell, null) : ellipsis === false ? children : /*#__PURE__*/React.createElement(Ellipsis, {
    tooltip: tooltip
  }, children)), renderEnd && /*#__PURE__*/React.createElement(CellBase.End, null, renderEnd()));
});