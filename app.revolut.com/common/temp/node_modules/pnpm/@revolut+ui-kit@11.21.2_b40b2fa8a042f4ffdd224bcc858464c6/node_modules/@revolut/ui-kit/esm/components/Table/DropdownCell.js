/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import * as Icons from '@revolut/icons';
import { Color } from "../../constants";
import { IconButton } from "../IconButton";
import { Cell } from "./Cell";
import { useDropdownCell } from "./useDropdownCell";
export function DropdownCell(_ref) {
  var _ref$labelToggle = _ref.labelToggle,
      labelToggle = _ref$labelToggle === void 0 ? 'Open dropdown' : _ref$labelToggle,
      placeholder = _ref.placeholder,
      children = _ref.children,
      renderDropdown = _ref.renderDropdown,
      _onClick = _ref.onClick,
      rest = _objectWithoutPropertiesLoose(_ref, ["labelToggle", "placeholder", "children", "renderDropdown", "onClick"]);

  var state = useDropdownCell();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Cell, _extends({
    use: "label",
    onClick: function onClick(event) {
      _onClick == null ? void 0 : _onClick(event);

      if (!event.defaultPrevented) {
        event.stopPropagation();
      }
    },
    ref: state.anchorRef,
    renderEnd: function renderEnd() {
      return /*#__PURE__*/React.createElement(IconButton, {
        "aria-haspopup": "listbox",
        "aria-label": labelToggle,
        useIcon: Icons.ShevronDownSmall,
        color: Color.GREY_TONE_50,
        size: 16,
        onClick: function onClick() {
          return state.setOpen(!state.isOpen);
        }
      });
    }
  }, rest), children != null ? children : placeholder), renderDropdown == null ? void 0 : renderDropdown(state));
}