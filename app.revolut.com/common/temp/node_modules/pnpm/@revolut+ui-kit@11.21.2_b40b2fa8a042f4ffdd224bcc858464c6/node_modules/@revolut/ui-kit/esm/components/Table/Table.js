/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback, useMemo, useRef } from 'react';
import styled, { css } from 'styled-components';
import { rem } from 'polished';
import { useExpanded, useFilters, useFlexLayout, useMountedLayoutEffect, useResizeColumns, useRowSelect, useSortBy, useTable } from 'react-table';
import { Color, Radius } from "../../constants";
import { useDocument, useMessage } from "../../hooks";
import { getScrollEventTarget, getScrollingParent, isReactKey, merge, noop, renderNothing, rgbaSafe, themeColor, themeRadius } from "../../utils";
import { TableLoadingState } from "./types";
import { Relative, Sticky } from "../Position";
import { TableBody } from "./TableBody";
import { TableHeader } from "./TableHeader";
import { TableFilter } from "./TableFilter";
import { RowBase } from "./RowBase";
import { ContactCell } from "./ContactCell";
import { CheckboxCell } from "./CheckboxCell";
import { Cell } from "./Cell";
import { CellBaseType } from "./CellBase";
import { EmptyCell } from "./EmptyCell";
import { ActionsCell } from "./ActionsCell";
import { StatusCell } from "./StatusCell";
import { TagCell } from "./TagCell";
import { DropdownCell } from "./DropdownCell";
import { TableIntersectionSkeleton } from "./TableIntersectionSkeleton";
import { TableBodySkeleton } from "./TableBodySkeleton";
import { TableFailedState } from "./TableFailedState";
import { TableEmptyState } from "./TableEmptyState";
import { useRowDisabled } from "./useRowDisabled";
import { ROW_HEIGHT, SHOW_LOCK_SHADOW_ATTR, TableRowHeight } from "./constants";
import * as filterTypes from "./filterTypes";
import { useScrollSync } from "./useScrollSync";
import { ExpandedRowContent } from "./ExpandedRowContent";
var Wrapper = /*#__PURE__*/styled(Relative).withConfig({
  displayName: "Table__Wrapper",
  componentId: "sc-12vmvym-0"
})(["", ""], function (props) {
  var tableDepth = props['data-table-depth'];
  var color = themeColor(Color.FOREGROUND)(props);
  return css(["&[", "][data-table-depth='", "'] ", ":not([data-table-depth='", "'] *){[aria-colindex='1']{position:sticky !important;z-index:1;left:0;background-color:inherit;box-shadow:inherit;&::after{content:'';position:absolute;left:0;right:0;top:0;bottom:0;box-shadow:0px 0px 4px ", ",0px 0px 16px ", ";clip-path:inset(0px -16px 0px 0px);pointer-events:none;}}}--rui-table-row-height:", ";"], SHOW_LOCK_SHADOW_ATTR, tableDepth, RowBase, tableDepth + 1, rgbaSafe(color, 0.05), rgbaSafe(color, 0.08), rem(ROW_HEIGHT[props.rowHeight]));
});
var CornerMask = /*#__PURE__*/styled(Sticky).withConfig({
  displayName: "Table__CornerMask",
  componentId: "sc-12vmvym-1"
})(["height:", ";margin-top:-", ";"], themeRadius(Radius.WIDGET), themeRadius(Radius.WIDGET));
var TableStickyHeader = /*#__PURE__*/styled(Sticky).withConfig({
  displayName: "Table__TableStickyHeader",
  componentId: "sc-12vmvym-2"
})(["&::-webkit-scrollbar{display:none;}-ms-overflow-style:none;scrollbar-width:none;"]);

var DefaultCell = function DefaultCell(_ref) {
  var value = _ref.value,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? CellBaseType.CONTENT : _ref$type,
      tooltip = _ref.tooltip,
      ellipsis = _ref.ellipsis;
  return /*#__PURE__*/React.createElement(Cell, {
    type: type,
    tooltip: tooltip,
    ellipsis: ellipsis
  }, value);
};

function isKeyed(data) {
  return 'key' in data && isReactKey(data.key);
}

var defaultGetRowId = function defaultGetRowId(data, index, parentRow) {
  var key = isKeyed(data) ? data.key : index;
  return "" + (parentRow ? [parentRow.id, key].join('.') : key);
};

var DEFAULT_OPTIONS = {
  getRowId: defaultGetRowId,
  isMultiSortEvent: function isMultiSortEvent() {
    return true;
  },
  filterTypes: filterTypes,
  defaultColumn: {
    Cell: DefaultCell,
    Filter: renderNothing
  }
};
export function Table(_ref2) {
  var _ref2$loadingState = _ref2.loadingState,
      loadingState = _ref2$loadingState === void 0 ? TableLoadingState.READY : _ref2$loadingState,
      _ref2$disabled = _ref2.disabled,
      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
      _ref2$selectable = _ref2.selectable,
      selectable = _ref2$selectable === void 0 ? false : _ref2$selectable,
      _ref2$expandable = _ref2.expandable,
      expandable = _ref2$expandable === void 0 ? false : _ref2$expandable,
      _ref2$disabledRowsExp = _ref2.disabledRowsExpandable,
      disabledRowsExpandable = _ref2$disabledRowsExp === void 0 ? false : _ref2$disabledRowsExp,
      _ref2$lockFirstColumn = _ref2.lockFirstColumn,
      lockFirstColumn = _ref2$lockFirstColumn === void 0 ? false : _ref2$lockFirstColumn,
      labelSelectAllProp = _ref2.labelSelectAll,
      labelSelectProp = _ref2.labelSelect,
      labelExpandProp = _ref2.labelExpand,
      labelSortAscProp = _ref2.labelSortAsc,
      labelSortDescProp = _ref2.labelSortDesc,
      labelSortCancelProp = _ref2.labelSortCancel,
      labelEmptyStateProp = _ref2.labelEmptyState,
      labelNoResultsProp = _ref2.labelNoResults,
      labelFailedStateProp = _ref2.labelFailedState,
      labelRetryProp = _ref2.labelRetry,
      renderExpandedRowContent = _ref2.renderExpandedRowContent,
      _ref2$onSortBy = _ref2.onSortBy,
      onSortBy = _ref2$onSortBy === void 0 ? noop : _ref2$onSortBy,
      _ref2$onFilter = _ref2.onFilter,
      onFilter = _ref2$onFilter === void 0 ? noop : _ref2$onFilter,
      _ref2$onSelect = _ref2.onSelect,
      onSelect = _ref2$onSelect === void 0 ? noop : _ref2$onSelect,
      onRowClick = _ref2.onRowClick,
      onRetry = _ref2.onRetry,
      _ref2$onRequestMore = _ref2.onRequestMore,
      onRequestMore = _ref2$onRequestMore === void 0 ? noop : _ref2$onRequestMore,
      _ref2$hasMore = _ref2.hasMore,
      hasMore = _ref2$hasMore === void 0 ? false : _ref2$hasMore,
      stickyHeaderTop = _ref2.stickyHeaderTop,
      _ref2$overscan = _ref2.overscan,
      overscan = _ref2$overscan === void 0 ? 128 : _ref2$overscan,
      _ref2$rowHeight = _ref2.rowHeight,
      rowHeight = _ref2$rowHeight === void 0 ? TableRowHeight.NORMAL : _ref2$rowHeight,
      estimateSizeProp = _ref2.estimateSize,
      intersectTestId = _ref2.intersectTestId,
      skeletonTestId = _ref2.skeletonTestId,
      _ref2$depth = _ref2.depth,
      tableDepth = _ref2$depth === void 0 ? 0 : _ref2$depth,
      rest = _objectWithoutPropertiesLoose(_ref2, ["loadingState", "disabled", "selectable", "expandable", "disabledRowsExpandable", "lockFirstColumn", "labelSelectAll", "labelSelect", "labelExpand", "labelSortAsc", "labelSortDesc", "labelSortCancel", "labelEmptyState", "labelNoResults", "labelFailedState", "labelRetry", "renderExpandedRowContent", "onSortBy", "onFilter", "onSelect", "onRowClick", "onRetry", "onRequestMore", "hasMore", "stickyHeaderTop", "overscan", "rowHeight", "estimateSize", "intersectTestId", "skeletonTestId", "depth"]);

  var m = useMessage();
  var labelRetry = labelRetryProp != null ? labelRetryProp : m('action.retry');
  var labelSelect = labelSelectProp != null ? labelSelectProp : m('action.select');
  var labelExpand = labelExpandProp != null ? labelExpandProp : m('action.expand');
  var labelSelectAll = labelSelectAllProp != null ? labelSelectAllProp : m('action.select-all');
  var labelSortAsc = labelSortAscProp != null ? labelSortAscProp : m('action.sort-asc');
  var labelSortDesc = labelSortDescProp != null ? labelSortDescProp : m('action.sort-dsc');
  var labelSortCancel = labelSortCancelProp != null ? labelSortCancelProp : m('action.sort-cancel');
  var labelEmptyState = labelEmptyStateProp != null ? labelEmptyStateProp : m('label.empty-state');
  var labelNoResults = labelNoResultsProp != null ? labelNoResultsProp : m('label.no-results-state');
  var labelFailedState = labelFailedStateProp != null ? labelFailedStateProp : m('label.failed-state');
  var doc = useDocument();
  var scrollRef = useRef(null);
  var headerRef = useRef(null);
  var bodyRef = useRef(null);
  var tableRef = useRef(null);
  var estimateSize = useMemo(function () {
    return estimateSizeProp != null ? estimateSizeProp : function () {
      return ROW_HEIGHT[rowHeight];
    };
  }, [estimateSizeProp, rowHeight]);
  var plugins = [];

  if (expandable) {
    plugins.push(useExpanded);
  }

  if (selectable) {
    plugins.push(useRowSelect);
  }

  if (!rest.disableResizing) {
    plugins.push(useResizeColumns);
  }

  var options = merge(DEFAULT_OPTIONS, rest);

  var _useTable = useTable.apply(void 0, [options, useFlexLayout, useFilters, useSortBy].concat(plugins, [useRowDisabled])),
      getTableProps = _useTable.getTableProps,
      headerGroups = _useTable.headerGroups,
      prepareRow = _useTable.prepareRow,
      rows = _useTable.rows,
      getToggleAllRowsSelectedProps = _useTable.getToggleAllRowsSelectedProps,
      isAllRowsSelected = _useTable.isAllRowsSelected,
      state = _useTable.state,
      allColumns = _useTable.allColumns,
      totalColumnsWidth = _useTable.totalColumnsWidth;

  useMountedLayoutEffect(function () {
    onSelect(state.selectedRowIds);
  }, [onSelect, state.selectedRowIds]);
  useMountedLayoutEffect(function () {
    onFilter(state.filters);
  }, [onFilter, state.filters]);
  useMountedLayoutEffect(function () {
    onSortBy(state.sortBy);
  }, [onSortBy, state.sortBy]);
  var scrollableRefs = useMemo(function () {
    return [headerRef, bodyRef];
  }, []);
  var scrollLeftCallback = useCallback(function (scrollLeft) {
    var tableEl = tableRef.current;

    if (lockFirstColumn && tableEl) {
      if (scrollLeft > 0) {
        tableEl.setAttribute(SHOW_LOCK_SHADOW_ATTR, 'true');
      } else {
        tableEl.removeAttribute(SHOW_LOCK_SHADOW_ATTR);
      }
    }
  }, [lockFirstColumn]);
  useScrollSync(scrollableRefs, scrollLeftCallback);
  var isNestedTable = tableDepth > 0;
  var tableRadius = isNestedTable ? Radius.UNSET : Radius.WIDGET;
  return /*#__PURE__*/React.createElement(Wrapper, _extends({
    ref: function ref(node) {
      tableRef.current = node;

      if (doc && node) {
        scrollRef.current = getScrollEventTarget(getScrollingParent(node.parentElement, doc));
      }
    }
  }, getTableProps(), {
    zIndex: 0,
    "aria-busy": loadingState === TableLoadingState.FILTERING || loadingState === TableLoadingState.SORTING || loadingState === TableLoadingState.PENDING,
    "aria-colcount": allColumns.length,
    "aria-rowcount": hasMore ? -1 : rest.data.length,
    "aria-describedby": rest['aria-describedby'],
    "aria-labelledby": rest['aria-labelledby'],
    "aria-label": rest['aria-label'],
    "aria-hidden": rest['aria-hidden'],
    "data-table-depth": tableDepth,
    title: rest.title,
    rowHeight: rowHeight
  }), /*#__PURE__*/React.createElement(TableStickyHeader, {
    ref: headerRef,
    tabIndex: disabled ? 0 : undefined,
    zIndex: 2,
    top: stickyHeaderTop,
    overflow: "auto",
    borderTopLeftRadius: tableRadius,
    borderTopRightRadius: tableRadius,
    tableDepth: tableDepth
  }, /*#__PURE__*/React.createElement(TableHeader, {
    headerGroups: headerGroups,
    selectable: selectable,
    getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps,
    isAllRowsSelected: isAllRowsSelected,
    labelSelectAll: labelSelectAll,
    labelSortAsc: labelSortAsc,
    labelSortDesc: labelSortDesc,
    labelSortCancel: labelSortCancel,
    disabled: disabled,
    disableSortRemove: rest.disableSortRemove,
    disableResizing: rest.disableResizing,
    tableDepth: tableDepth
  })), !isNestedTable && /*#__PURE__*/React.createElement(CornerMask, {
    zIndex: 1,
    top: stickyHeaderTop,
    bg: Color.GREY_TONE_5
  }), /*#__PURE__*/React.createElement(Relative, {
    ref: bodyRef,
    tabIndex: disabled || loadingState === TableLoadingState.FILTERING || loadingState === TableLoadingState.SORTING ? 0 : undefined,
    overflow: "auto",
    borderBottomLeftRadius: tableRadius,
    borderBottomRightRadius: tableRadius,
    color: Color.FOREGROUND,
    bg: Color.WIDGET_BACKGROUND
  }, (loadingState === TableLoadingState.READY || loadingState === TableLoadingState.NO_RESULTS || loadingState === TableLoadingState.FILTERING || loadingState === TableLoadingState.SORTING) && (rows.length > 0 ? /*#__PURE__*/React.createElement(TableBody, {
    rows: rows,
    scrollRef: scrollRef,
    prepareRow: prepareRow,
    onRowClick: onRowClick,
    selectable: selectable,
    expandable: expandable,
    disabledRowsExpandable: disabledRowsExpandable,
    labelSelect: labelSelect,
    labelExpand: labelExpand,
    overscan: overscan,
    estimateSize: estimateSize,
    tableDepth: tableDepth,
    totalColumnsWidth: totalColumnsWidth,
    renderExpandedRowContent: renderExpandedRowContent,
    disabled: disabled || loadingState === TableLoadingState.FILTERING || loadingState === TableLoadingState.SORTING,
    state: state
  }) : /*#__PURE__*/React.createElement(TableEmptyState, {
    labelDescription: loadingState === TableLoadingState.NO_RESULTS ? labelNoResults : labelEmptyState
  })), loadingState === TableLoadingState.PENDING && /*#__PURE__*/React.createElement(TableBodySkeleton, {
    "data-testid": skeletonTestId
  }), loadingState === TableLoadingState.FAILED && /*#__PURE__*/React.createElement(TableFailedState, {
    labelDescription: labelFailedState,
    labelRetry: labelRetry,
    onRetry: onRetry
  }), hasMore && /*#__PURE__*/React.createElement(Sticky, {
    left: 0
  }, /*#__PURE__*/React.createElement(TableIntersectionSkeleton, {
    onIntersect: onRequestMore,
    "data-testid": intersectTestId
  }))));
}
Table.ContactCell = ContactCell;
Table.CheckboxCell = CheckboxCell;
Table.Cell = Cell;
Table.EmptyCell = EmptyCell;
Table.Filter = TableFilter;
Table.ActionsCell = ActionsCell;
Table.StatusCell = StatusCell;
Table.TagCell = TagCell;
Table.DropdownCell = DropdownCell;
Table.ExpandedRowContent = ExpandedRowContent;