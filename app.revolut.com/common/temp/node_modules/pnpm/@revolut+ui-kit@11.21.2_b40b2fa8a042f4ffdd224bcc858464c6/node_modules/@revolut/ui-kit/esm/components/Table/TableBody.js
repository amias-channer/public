/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback, useRef } from 'react';
import { rem } from 'polished';
import { TextStyle } from "../../constants";
import { useVirtualViewport } from "../../hooks";
import { Relative } from "../Position";
import { TableVirtualRowResizable } from "./TableVirtualRow";
export function TableBody(_ref) {
  var scrollRef = _ref.scrollRef,
      rows = _ref.rows,
      prepareRow = _ref.prepareRow,
      overscan = _ref.overscan,
      estimateSize = _ref.estimateSize,
      selectable = _ref.selectable,
      rest = _objectWithoutPropertiesLoose(_ref, ["scrollRef", "rows", "prepareRow", "overscan", "estimateSize", "selectable"]);

  var parentRef = useRef(null);
  var keyExtractor = useCallback(function (index) {
    return rows[index].id;
  }, [rows]);
  var virtualList = useVirtualViewport({
    parentRef: parentRef,
    size: rows.length,
    overscan: overscan,
    estimateSize: estimateSize,
    keyExtractor: keyExtractor,
    scrollRef: scrollRef
  });
  return /*#__PURE__*/React.createElement(Relative, {
    ref: parentRef,
    role: "rowgroup",
    height: rem(virtualList.totalSize),
    textStyle: TextStyle.CAPTION
  }, virtualList.virtualItems.map(function (virtual) {
    var row = rows[virtual.index];
    prepareRow(row);
    var isLastSubRow = virtual.index < rows.length - 1 && row.depth > rows[virtual.index + 1].depth;
    return /*#__PURE__*/React.createElement(TableVirtualRowResizable, _extends({
      key: row.id,
      virtualStart: virtual.start,
      virtualMeasure: virtual.measureRef,
      isLastSubRow: isLastSubRow,
      selectable: selectable,
      isSelected: row.isSelected,
      row: row
    }, rest));
  }));
}