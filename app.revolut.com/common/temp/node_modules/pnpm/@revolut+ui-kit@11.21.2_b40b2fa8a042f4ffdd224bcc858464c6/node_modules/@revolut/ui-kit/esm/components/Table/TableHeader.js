/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { rem } from 'polished';
import styled from 'styled-components';
import { AccessibleId } from "../AccessibleId";
import { Color, UnifiedColorMode } from "../../constants";
import { hasValue, renderNothing, rgbaSafe, themeColor } from "../../utils";
import { DEFAULT_ROW_HEIGHT, EXPAND_PADDING_STEP } from "./constants";
import { Absolute, Relative } from "../Position";
import { Ellipsis } from "../Ellipsis";
import { ButtonBase } from "../ButtonBase";
import { Checkbox } from "../Checkbox";
import { Box } from "../Box";
import { HeaderCell } from "./HeaderCell";
import { TableSortButton } from "./TableSortButton";
import { TableResizer } from "./TableResizer";
import { RowBase } from "./RowBase";

var getLabelId = function getLabelId(id) {
  return id ? "table-header-label-" + id : undefined;
};

var getAriaSort = function getAriaSort(canSort, isSorted, isSortedDesc) {
  if (!canSort) {
    return undefined;
  }

  if (isSorted) {
    return isSortedDesc ? 'descending' : 'ascending';
  }

  return 'none';
};

var overrideHeaderGroupStyle = function overrideHeaderGroupStyle(props) {
  return _extends({}, props, {
    style: _extends({}, props.style, {
      width: 'fit-content',
      minWidth: '100%'
    })
  });
};

var TableHeaderRow = /*#__PURE__*/styled(RowBase).withConfig({
  displayName: "TableHeader__TableHeaderRow",
  componentId: "sc-1oel4ev-0"
})(["background-color:", ";box-shadow:", ";"], themeColor(Color.WIDGET_BACKGROUND), function (_ref) {
  var tableDepth = _ref.tableDepth,
      theme = _ref.theme;

  if (tableDepth === 0) {
    return "inset 0px 100px 0px " + themeColor(Color.GREY_TONE_5)({
      theme: theme
    });
  }

  var base = theme.mode === UnifiedColorMode.DARK ? 0.03 : 0.1;
  var step = theme.mode === UnifiedColorMode.DARK ? 0.08 : 0.03;
  var shadowColor = rgbaSafe(themeColor(Color.GREY_TONE_50)({
    theme: theme
  }), base + tableDepth * step);
  return "inset 0px 100px 0px " + shadowColor;
});
export function TableHeader(_ref2) {
  var headerGroups = _ref2.headerGroups,
      disabled = _ref2.disabled,
      disableSortRemove = _ref2.disableSortRemove,
      disableResizing = _ref2.disableResizing,
      selectable = _ref2.selectable,
      getToggleAllRowsSelectedProps = _ref2.getToggleAllRowsSelectedProps,
      isAllRowsSelected = _ref2.isAllRowsSelected,
      labelSelectAll = _ref2.labelSelectAll,
      labelSortAsc = _ref2.labelSortAsc,
      labelSortDesc = _ref2.labelSortDesc,
      labelSortCancel = _ref2.labelSortCancel,
      tableDepth = _ref2.tableDepth;
  return /*#__PURE__*/React.createElement(Relative, {
    role: "rowgroup",
    color: isAllRowsSelected ? Color.BLUE : Color.GREY_TONE_50
  }, headerGroups.map(function (headerGroup) {
    return /*#__PURE__*/React.createElement(TableHeaderRow, _extends({
      tableDepth: tableDepth
    }, headerGroup.getHeaderGroupProps(overrideHeaderGroupStyle)), headerGroup.headers.map(function (column, index) {
      var canSort = !disabled && column.canSort;
      var canFilter = !disabled && column.canFilter && column.Filter && column.Filter !== renderNothing;

      var _column$getHeaderProp = column.getHeaderProps(),
          key = _column$getHeaderProp.key,
          columnHeaderProps = _objectWithoutPropertiesLoose(_column$getHeaderProp, ["key"]);

      return /*#__PURE__*/React.createElement(AccessibleId, {
        key: key
      }, function (_ref3) {
        var id = _ref3.id;
        return /*#__PURE__*/React.createElement(HeaderCell, _extends({
          color: column.isSorted || hasValue(column.filterValue) ? Color.BLUE : undefined,
          align: column.align,
          "aria-colindex": index + 1,
          "aria-sort": getAriaSort(canSort, column.isSorted, column.isSortedDesc),
          "aria-labelledby": getLabelId(id)
        }, columnHeaderProps), index === 0 && (selectable || tableDepth > 0) && /*#__PURE__*/React.createElement(HeaderCell.Start, null, selectable && /*#__PURE__*/React.createElement(Checkbox, _extends({}, getToggleAllRowsSelectedProps(), {
          "aria-label": labelSelectAll,
          title: labelSelectAll,
          disabled: disabled
        })), tableDepth > 0 && /*#__PURE__*/React.createElement(Box, {
          size: 16,
          ml: rem(EXPAND_PADDING_STEP * tableDepth)
        })), /*#__PURE__*/React.createElement(HeaderCell.Main, null, disabled || !column.canSort ? /*#__PURE__*/React.createElement(Ellipsis, {
          tooltip: "auto",
          id: getLabelId(id)
        }, column.render('Header')) : /*#__PURE__*/React.createElement(ButtonBase, _extends({}, column.getSortByToggleProps({
          title: undefined,
          // Needed for ellipsis, because by default button behaves like inline-block element, even with display: block.
          style: {
            width: '100%',
            height: "var(--rui-table-row-height, " + rem(DEFAULT_ROW_HEIGHT) + ")"
          }
        }), {
          id: getLabelId(id)
        }), /*#__PURE__*/React.createElement(Ellipsis, {
          tooltip: "auto"
        }, column.render('Header')))), (canSort || canFilter) && /*#__PURE__*/React.createElement(HeaderCell.End, null, canSort && /*#__PURE__*/React.createElement(TableSortButton, {
          column: column,
          labelSortAsc: labelSortAsc,
          labelSortDesc: labelSortDesc,
          labelSortCancel: labelSortCancel,
          disableSortRemove: disableSortRemove
        }), canFilter && column.render('Filter')), !disableResizing && column.canResize && /*#__PURE__*/React.createElement(Absolute, {
          right: 4
        }, /*#__PURE__*/React.createElement(TableResizer, {
          column: column
        })));
      });
    }));
  }));
}