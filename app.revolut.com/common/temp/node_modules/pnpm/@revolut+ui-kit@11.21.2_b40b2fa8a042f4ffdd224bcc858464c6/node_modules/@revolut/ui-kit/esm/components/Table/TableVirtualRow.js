/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useEffect, useMemo, useRef } from 'react';
import { focusable } from 'tabbable';
import styled from 'styled-components';
import * as Icons from '@revolut/icons';
import { rem } from 'polished';
import { parseBoolean } from "../../utils";
import { Color, Space } from "../../constants";
import { Box } from "../Box";
import { Checkbox } from "../Checkbox";
import { IconButton } from "../IconButton";
import { BUTTON_SIZE, EXPAND_PADDING_STEP } from "./constants";
import { TableBodyRow } from "./TableBodyRow";
import { CellBase, CellBaseType } from "./CellBase";
import { useVirtualRowResizeObserver } from "./useVirtualRowResizeObserver";
import { useGetRowBg } from "./useGetRowBg";
export function TableVirtualRowResizable(_ref) {
  var virtualMeasure = _ref.virtualMeasure,
      virtualStart = _ref.virtualStart,
      tableDepth = _ref.tableDepth,
      totalColumnsWidth = _ref.totalColumnsWidth,
      renderExpandedRowContent = _ref.renderExpandedRowContent,
      row = _ref.row,
      virtualRowProps = _objectWithoutPropertiesLoose(_ref, ["virtualMeasure", "virtualStart", "tableDepth", "totalColumnsWidth", "renderExpandedRowContent", "row"]);

  var containerRef = useRef(null);
  var getRowBg = useGetRowBg();
  useVirtualRowResizeObserver(containerRef, virtualMeasure);
  var style = useMemo(function () {
    return {
      position: 'absolute',
      top: 0,
      left: 0,
      minWidth: '100%',
      width: "" + rem(totalColumnsWidth),
      transform: "translateY(" + rem(virtualStart) + ")"
    };
  }, [virtualStart, totalColumnsWidth]);
  var depth = row.depth + tableDepth;
  return /*#__PURE__*/React.createElement(Box, {
    style: style,
    ref: containerRef
  }, /*#__PURE__*/React.createElement(TableVirtualRow, _extends({
    row: row,
    depth: depth,
    shadowColor: getRowBg(depth),
    canExpand: Boolean(row.canExpand || renderExpandedRowContent)
  }, virtualRowProps)), row.isExpanded && (renderExpandedRowContent == null ? void 0 : renderExpandedRowContent({
    row: row,
    value: row.original,
    depth: depth + 1,
    bg: getRowBg(depth + 1),
    leftOffset: rem(BUTTON_SIZE + EXPAND_PADDING_STEP * (depth + 1))
  })));
}

function TableVirtualRowBase(_ref2) {
  var isLastSubRow = _ref2.isLastSubRow,
      isSelected = _ref2.isSelected,
      row = _ref2.row,
      disabled = _ref2.disabled,
      onRowClick = _ref2.onRowClick,
      selectable = _ref2.selectable,
      expandable = _ref2.expandable,
      disabledRowsExpandable = _ref2.disabledRowsExpandable,
      labelSelect = _ref2.labelSelect,
      labelExpand = _ref2.labelExpand,
      canExpand = _ref2.canExpand,
      depth = _ref2.depth,
      shadowColor = _ref2.shadowColor;
  var rowRef = useRef(null);
  var expandButtonRef = useRef(null);
  var rowProps = row.getRowProps();
  var isDisabled = disabled || parseBoolean(rowProps['aria-disabled']);
  useEffect(function () {
    var rowEl = rowRef.current;

    if (rowEl && isDisabled) {
      var elements = focusable(rowEl);
      var indices = new Map();

      for (var _iterator = _createForOfIteratorHelperLoose(elements), _step; !(_step = _iterator()).done;) {
        var el = _step.value;

        if (!disabledRowsExpandable || el !== expandButtonRef.current) {
          indices.set(el, el.tabIndex);
          el.tabIndex = -1;
        }
      }

      return function () {
        for (var _iterator2 = _createForOfIteratorHelperLoose(indices), _step2; !(_step2 = _iterator2()).done;) {
          var _step2$value = _step2.value,
              el = _step2$value[0],
              index = _step2$value[1];
          el.tabIndex = index;
        }
      };
    }
  }, [rowRef, expandButtonRef, disabledRowsExpandable, isDisabled]);
  var isFirstSubRow = row.index === 0 && row.depth !== 0;
  return /*#__PURE__*/React.createElement(TableBodyRow, _extends({
    ref: rowRef,
    tabIndex: -1,
    shadowColor: shadowColor,
    onClick: onRowClick ? function () {
      return onRowClick(row.original);
    } : undefined,
    onClickCapture: function onClickCapture(event) {
      if (isDisabled && (!disabledRowsExpandable || event.target !== expandButtonRef.current)) {
        event.stopPropagation();
      }
    },
    isSelected: isSelected,
    isFirstSubRow: isFirstSubRow,
    isLastSubRow: isLastSubRow,
    depth: depth,
    "aria-level": depth + 1,
    "aria-rowindex": row.index + 1,
    "aria-selected": isSelected
  }, rowProps, {
    "aria-disabled": isDisabled
  }), row.cells.map(function (cell, cellIndex) {
    if (cellIndex === 0 && (selectable || expandable || depth > 0)) {
      return /*#__PURE__*/React.createElement(CellBase, _extends({
        type: canExpand && !row.isExpanded ? CellBaseType.HEADER : CellBaseType.CONTENT,
        align: cell.column.align,
        "aria-colindex": cellIndex + 1
      }, cell.getCellProps()), /*#__PURE__*/React.createElement(CellBase.Start, null, selectable && /*#__PURE__*/React.createElement(Box, {
        mr: expandable ? Space.S_8 : undefined
      }, /*#__PURE__*/React.createElement(CheckboxPrefix, _extends({}, row.getToggleRowSelectedProps(), {
        "aria-label": labelSelect,
        title: labelSelect
      }))), (expandable || depth > 0) && (canExpand ? /*#__PURE__*/React.createElement(Box, {
        ml: rem(EXPAND_PADDING_STEP * depth)
      }, /*#__PURE__*/React.createElement(ExpandIconButton, _extends({
        ref: expandButtonRef
      }, row.getToggleRowExpandedProps(), {
        disabledRowsExpandable: disabledRowsExpandable,
        "aria-label": labelExpand,
        title: labelExpand,
        isExpanded: row.isExpanded
      }))) : /*#__PURE__*/React.createElement(Box, {
        size: BUTTON_SIZE,
        ml: rem(EXPAND_PADDING_STEP * depth)
      }))), /*#__PURE__*/React.createElement(CellBase.Main, null, cell.render('Cell', {
        type: CellBaseType.BODY,
        tooltip: cell.column.tooltip,
        ellipsis: cell.column.ellipsis
      })));
    }

    return /*#__PURE__*/React.createElement(CellBase, _extends({
      type: CellBaseType.BODY,
      align: cell.column.align,
      "aria-colindex": cellIndex + 1
    }, cell.getCellProps()), /*#__PURE__*/React.createElement(CellBase.Main, null, cell.render('Cell', {
      tooltip: cell.column.tooltip,
      ellipsis: cell.column.ellipsis
    })));
  }));
}

export var TableVirtualRow = /*#__PURE__*/React.memo(TableVirtualRowBase);
var StyledIconButton = /*#__PURE__*/styled(IconButton).withConfig({
  displayName: "TableVirtualRow__StyledIconButton",
  componentId: "u0rd6l-0"
})(function (_ref3) {
  var disabledRowsExpandable = _ref3.disabledRowsExpandable;
  return disabledRowsExpandable ? {
    pointerEvents: 'auto'
  } : {};
});
var ExpandIconButton = /*#__PURE__*/forwardRef(function (_ref4, ref) {
  var isExpanded = _ref4.isExpanded,
      _onClick = _ref4.onClick,
      disabledRowsExpandable = _ref4.disabledRowsExpandable,
      rest = _objectWithoutPropertiesLoose(_ref4, ["isExpanded", "onClick", "disabledRowsExpandable"]);

  return /*#__PURE__*/React.createElement(StyledIconButton, _extends({
    ref: ref,
    useIcon: isExpanded ? Icons.ShevronDownSmall : Icons.ShevronRight,
    size: BUTTON_SIZE,
    color: Color.GREY_TONE_20,
    disabledRowsExpandable: disabledRowsExpandable,
    onClick: function onClick(event) {
      _onClick == null ? void 0 : _onClick(event);

      if (!event.defaultPrevented) {
        event.stopPropagation();
      }
    }
  }, rest));
});

var CheckboxPrefix = function CheckboxPrefix(_ref5) {
  var _onClick2 = _ref5.onClick,
      rest = _objectWithoutPropertiesLoose(_ref5, ["onClick"]);

  return /*#__PURE__*/React.createElement(Checkbox, _extends({
    onClick: function onClick(event) {
      _onClick2 == null ? void 0 : _onClick2(event);

      if (!event.defaultPrevented) {
        event.stopPropagation();
      }
    }
  }, rest));
};