/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { actions, ensurePluginOrder } from 'react-table';
var pluginName = 'useRowDisabled';
export function useRowDisabled(hooks) {
  hooks.getRowProps.push(getRowProps);
  hooks.stateReducers.push(reducer);
  hooks.useInstance.push(useInstance);
}
useRowDisabled.pluginName = pluginName;

function getRowProps(props, _ref) {
  var instance = _ref.instance,
      row = _ref.row;
  var _instance$manualRowDi = instance.manualRowDisabledKey,
      manualRowDisabledKey = _instance$manualRowDi === void 0 ? 'isDisabled' : _instance$manualRowDi;
  var disabled = false;

  if (row.original && row.original[manualRowDisabledKey]) {
    disabled = true;
  } else {
    disabled = row.isDisabled;
  }

  return [props, {
    'aria-disabled': disabled
  }];
}

function reducer(state, action) {
  if (action.type === actions.init) {
    var _state$disabledRowIds;

    return _extends({}, state, {
      disabledRowIds: (_state$disabledRowIds = state.disabledRowIds) != null ? _state$disabledRowIds : {}
    });
  }

  return state;
}

function useInstance(instance) {
  var rows = instance.rows,
      plugins = instance.plugins,
      disabledRowIds = instance.state.disabledRowIds;
  ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'], pluginName);
  var disabledFlatRows = React.useMemo(function () {
    var disabledFlatRowsResult = [];
    rows.forEach(function (row) {
      row.isDisabled = Boolean(disabledRowIds[row.id]);

      if (row.isDisabled) {
        disabledFlatRowsResult.push(row);
      }
    });
    return disabledFlatRowsResult;
  }, [rows, disabledRowIds]);
  Object.assign(instance, {
    disabledFlatRows: disabledFlatRows
  });
}