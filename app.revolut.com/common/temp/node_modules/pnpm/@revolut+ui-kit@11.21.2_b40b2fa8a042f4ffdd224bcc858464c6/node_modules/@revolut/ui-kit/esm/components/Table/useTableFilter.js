/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { useCallback, useRef } from 'react';
import { useToggle } from "../../hooks";
import { combine, hasValue } from "../../utils";
export function useTableFilter(column, onToggleChange) {
  var anchorRef = useRef(null);
  var isEnabled = hasValue(column.filterValue);

  var _useToggle = useToggle({
    onChange: onToggleChange
  }),
      isOpen = _useToggle[0],
      setOpen = _useToggle[1];

  var getDropdownProps = useCallback(function (props) {
    return _extends({
      placement: 'bottom-end'
    }, props, {
      anchorRef: anchorRef,
      open: isOpen,
      onClickAway: combine(function () {
        return setOpen(false);
      }, props.onClickAway)
    });
  }, [anchorRef, isOpen, setOpen]);
  var getSelectProps = useCallback(function (props) {
    return _extends({
      placement: 'bottom-end'
    }, props, {
      anchorRef: anchorRef,
      open: isOpen,
      onRequestClose: combine(function () {
        return setOpen(false);
      }, props.onRequestClose)
    });
  }, [anchorRef, isOpen, setOpen]);
  var getCheckboxGroupProps = useCallback(function (props) {
    return _extends({}, props, {
      value: Array.isArray(column.filterValue) ? column.filterValue : [],
      onChange: combine(column.setFilter, props.onChange)
    });
  }, [column.filterValue, column.setFilter]);
  var getRadioGroupProps = useCallback(function (props) {
    var _column$filterValue;

    return _extends({}, props, {
      value: (_column$filterValue = column.filterValue) != null ? _column$filterValue : null,
      onChange: combine(column.setFilter, props.onChange)
    });
  }, [column.filterValue, column.setFilter]);
  var getCheckboxSelectProps = useCallback(function (props) {
    return getSelectProps(getCheckboxGroupProps(props));
  }, [getSelectProps, getCheckboxGroupProps]);
  var getRadioSelectProps = useCallback(function (props) {
    return getSelectProps(getRadioGroupProps(props));
  }, [getSelectProps, getRadioGroupProps]);
  return {
    anchorRef: anchorRef,
    isEnabled: isEnabled,
    isOpen: isOpen,
    setOpen: setOpen,
    getDropdownProps: getDropdownProps,
    getSelectProps: getSelectProps,
    getCheckboxGroupProps: getCheckboxGroupProps,
    getRadioGroupProps: getRadioGroupProps,
    getCheckboxSelectProps: getCheckboxSelectProps,
    getRadioSelectProps: getRadioSelectProps
  };
}