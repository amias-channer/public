/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import * as Icons from '@revolut/icons';
import * as SS from 'styled-system';
import styled from 'styled-components';
import { rem } from 'polished';
import { themeColor, themeTextStyle } from "../../utils";
import { Color, Radius, Space, TextStyle } from "../../constants";
import { ButtonBase } from "../ButtonBase";
import { IconButton } from "../IconButton";
import { Box } from "../Box";
export var TagVariant = {
  PLAIN: 'plain',
  FADED: 'faded',
  OUTLINED: 'outlined'
};

function ClearButton(_ref) {
  var _onClick = _ref.onClick,
      rest = _objectWithoutPropertiesLoose(_ref, ["onClick"]);

  return /*#__PURE__*/React.createElement(Box, {
    ml: Space.S_4
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    useIcon: Icons.CrossSmall,
    size: 12,
    tapArea: 24,
    onClick: function onClick(event) {
      _onClick == null ? void 0 : _onClick(event);

      if (!event.defaultPrevented) {
        event.stopPropagation();
      }
    }
  }, rest)));
}

var BASE_STYLE = {
  display: 'flex',
  height: rem(20),
  width: 'max-content',
  alignItems: 'center',
  borderRadius: Radius.TAG,
  paddingX: Space.S_8,
  "> [role='presentation']": {
    marginRight: Space.S_4
  }
};
var TagBase = /*#__PURE__*/styled(ButtonBase).withConfig({
  displayName: "Tag__TagBase",
  componentId: "sc-19krplv-0"
})(themeTextStyle(TextStyle.TINY), function (props) {
  var _props$bg, _variants;

  return SS.variant({
    variants: (_variants = {}, _variants[TagVariant.PLAIN] = _extends({}, BASE_STYLE, {
      color: Color.WHITE,
      backgroundColor: props.color
    }), _variants[TagVariant.FADED] = _extends({}, BASE_STYLE, {
      color: props.color,
      backgroundColor: (_props$bg = props.bg) != null ? _props$bg : Color.ACTION_BACKGROUND
    }), _variants[TagVariant.OUTLINED] = _extends({}, BASE_STYLE, {
      color: props.color,
      backgroundColor: props.bg
    }, SS.system({
      color: {
        property: 'border',
        scale: 'colors',
        transform: function transform(value) {
          return "1px solid " + themeColor(value)(props);
        }
      }
    })(props)), _variants)
  })(props);
});

var getDefaultColor = function getDefaultColor(variant) {
  return variant === TagVariant.PLAIN ? Color.DEEP_GREY : Color.BLUE;
};

var RefForwardingTag = /*#__PURE__*/forwardRef(function (_ref2, ref) {
  var Icon = _ref2.useIcon,
      children = _ref2.children,
      color = _ref2.color,
      bg = _ref2.bg,
      _ref2$variant = _ref2.variant,
      variant = _ref2$variant === void 0 ? TagVariant.PLAIN : _ref2$variant,
      rest = _objectWithoutPropertiesLoose(_ref2, ["useIcon", "children", "color", "bg", "variant"]);

  return /*#__PURE__*/React.createElement(TagBase, _extends({
    ref: ref,
    use: "span",
    color: color != null ? color : getDefaultColor(variant),
    variant: variant,
    bg: bg
  }, rest), Icon ? /*#__PURE__*/React.createElement(Icon, {
    size: 12,
    role: "presentation"
  }) : null, children);
});
export var Tag = Object.assign(RefForwardingTag, {
  ClearButton: ClearButton
});