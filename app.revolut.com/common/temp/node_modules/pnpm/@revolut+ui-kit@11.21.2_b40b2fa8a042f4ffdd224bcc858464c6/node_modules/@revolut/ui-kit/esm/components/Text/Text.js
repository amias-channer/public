/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import styled from 'styled-components';
import { display, fontFamily, fontSize, fontWeight, letterSpacing, lineHeight, system, textAlign } from 'styled-system';
import { TextStyle } from "../../constants";
import { hide } from "../../styles";
import { isUnifiedTheme } from "../../utils";
import { Box } from "../Box";
import { ellipsis, lineClamp, textOverflow, whiteSpace } from "./styles";
var textDecoration = system({
  textDecoration: true
});
export var Text = /*#__PURE__*/styled(Box).withConfig({
  displayName: "Text",
  componentId: "sc-1be7qv6-0"
})(function (props) {
  return !isUnifiedTheme(props.theme) && props.legacyInlineBlock ? [{
    display: 'inline-block'
  }, display, hide] // COMPAT: Remove with `DefaultTheme`
  : null;
}, fontFamily, fontSize, fontWeight, letterSpacing, lineHeight, textAlign, textDecoration, ellipsis, textOverflow, lineClamp, whiteSpace);
Text.defaultProps = {
  use: 'span',
  variantKey: 'textStyles',
  variant: TextStyle.DEFAULT,
  legacyInlineBlock: true
};
/** @deprecated use `TextProps`, will be removed with `TextBox` */

/** @deprecated use `Text` */
// @ts-expect-error As we override `span` to `div` in `defaultProps`
export var TextBox = /*#__PURE__*/styled(Text).withConfig({
  displayName: "Text__TextBox",
  componentId: "sc-1be7qv6-1"
})([""]);
TextBox.defaultProps = {
  use: 'div',
  legacyInlineBlock: false
};
export var H1 = function H1(props) {
  return /*#__PURE__*/React.createElement(TextBox, _extends({
    use: "h1",
    variant: TextStyle.H1
  }, props));
};
export var H2 = function H2(props) {
  return /*#__PURE__*/React.createElement(TextBox, _extends({
    use: "h2",
    variant: TextStyle.H2
  }, props));
};
export var H3 = function H3(props) {
  return /*#__PURE__*/React.createElement(TextBox, _extends({
    use: "h3",
    variant: TextStyle.H3
  }, props));
};
export var H4 = function H4(props) {
  return /*#__PURE__*/React.createElement(TextBox, _extends({
    use: "h4",
    variant: TextStyle.H4
  }, props));
};
export var H5 = function H5(props) {
  return /*#__PURE__*/React.createElement(TextBox, _extends({
    use: "h5",
    variant: TextStyle.H5
  }, props));
};
export var H6 = function H6(props) {
  return /*#__PURE__*/React.createElement(TextBox, _extends({
    use: "h6",
    variant: TextStyle.H6
  }, props));
};
export var Paragraph = function Paragraph(props) {
  return /*#__PURE__*/React.createElement(TextBox, _extends({
    use: "p",
    variant: TextStyle.PRIMARY
  }, props));
};
export var Caption = function Caption(props) {
  return /*#__PURE__*/React.createElement(TextBox, _extends({
    use: "p",
    variant: TextStyle.CAPTION
  }, props));
};
export var Small = function Small(props) {
  return /*#__PURE__*/React.createElement(TextBox, _extends({
    use: "small",
    variant: TextStyle.SMALL
  }, props));
};