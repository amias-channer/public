/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback, useRef } from 'react';
import { isNumber, noop, setRefs } from "../../utils";
import { useUniversalLayoutEffect, useWindow } from "../../hooks";
import { TextAreaBase } from "../TextAreaBase/TextAreaBase";

function resize(el) {
  if (el === null) {
    return;
  }

  el.style.height = 'auto'; // required to properly repaint layout

  el.style.height = el.scrollHeight + "px";
  el.scrollTop = el.scrollHeight;
}

function cleanup(el) {
  el.style.height = '';
  el.style.maxHeight = '';
}

export var TextAreaAutosize = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$autosize = _ref.autosize,
      autosize = _ref$autosize === void 0 ? true : _ref$autosize,
      _ref$rows = _ref.rows,
      rows = _ref$rows === void 0 ? 1 : _ref$rows,
      maxRows = _ref.maxRows,
      value = _ref.value,
      _ref$onInput = _ref.onInput,
      onInput = _ref$onInput === void 0 ? noop : _ref$onInput,
      rest = _objectWithoutPropertiesLoose(_ref, ["autosize", "rows", "maxRows", "value", "onInput"]);

  var win = useWindow();
  var textAreaRef = useRef(null);
  var handleInput = useCallback(function (event) {
    var el = event.currentTarget;

    if (autosize) {
      resize(el);
    }

    onInput(event);
  }, [onInput, autosize]);
  useUniversalLayoutEffect(function () {
    var el = textAreaRef.current;

    if (el === null || win === null) {
      return noop;
    }

    if (isNumber(maxRows)) {
      var style = win.getComputedStyle(el);
      var lineHeight = parseInt(style.lineHeight, 10);
      var maxHeight = maxRows * lineHeight;
      var nextHeight = Math.min(el.scrollHeight, maxHeight);
      el.style.maxHeight = nextHeight + "px";
    }

    if (autosize) {
      resize(el);
      return function () {
        cleanup(el);
      };
    }

    return noop;
  }, [win, textAreaRef, value, autosize, rows, maxRows]);
  return /*#__PURE__*/React.createElement(TextAreaBase, _extends({
    ref: setRefs(textAreaRef, ref),
    rows: rows,
    value: value,
    onInput: handleInput
  }, rest));
});