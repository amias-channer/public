/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _Object$assign;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { createContext, forwardRef, useContext, useEffect, useRef, useState } from 'react';
import styled from 'styled-components';
import { Color, Space, TextStyle, Transition } from "../../constants";
import { themeTransition } from "../../utils";
import { useContainsChildWithTag, useMessage, useUniversalLayoutEffect } from "../../hooks";
import { Widget } from "../Widget";
import { Box } from "../Box";
import { VStack } from "../VStack";
import { Text } from "../Text";
import { TextButton } from "../TextButton";
var SUMMARY_TAG = '__text__widget__summary__tag__';
var TextWidgetContext = /*#__PURE__*/createContext(null);

function useTextWidgetContext() {
  var value = useContext(TextWidgetContext);

  if (value === null) {
    throw new Error('You can access `TextWidgetContext` only in components inside `TextWidget` component');
  }

  return value;
}

var TextWidgetAnimatedWrapper = /*#__PURE__*/styled(Box).withConfig({
  displayName: "TextWidget__TextWidgetAnimatedWrapper",
  componentId: "sc-13ra1yh-0"
})(["transition:", ";"], themeTransition(Transition.HEIGHT));
var TextWidgetBase = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _animatedWrapperRef$c;

  var children = _ref.children,
      _ref$prefersShowMore = _ref.prefersShowMore,
      prefersShowMore = _ref$prefersShowMore === void 0 ? false : _ref$prefersShowMore,
      labelShowLess = _ref.labelShowLess,
      labelShowMore = _ref.labelShowMore,
      showButtonProps = _ref.showButtonProps,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "prefersShowMore", "labelShowLess", "labelShowMore", "showButtonProps"]);

  var m = useMessage();

  var _useState = useState(prefersShowMore),
      isShownMore = _useState[0],
      setIsShownMore = _useState[1];

  var animatedWrapperRef = useRef(null);
  var contentWrapperRef = useRef(null);
  var wrapperHeight = animatedWrapperRef == null ? void 0 : (_animatedWrapperRef$c = animatedWrapperRef.current) == null ? void 0 : _animatedWrapperRef$c.scrollHeight;
  var hasSummary = useContainsChildWithTag(children, SUMMARY_TAG);
  useUniversalLayoutEffect(function () {
    var animatedWrapperEl = animatedWrapperRef.current;
    var contentWrapperEl = contentWrapperRef.current;

    if (!animatedWrapperEl || !contentWrapperEl) {
      return;
    }

    if (hasSummary && animatedWrapperEl.scrollHeight) {
      animatedWrapperEl.style.height = contentWrapperEl.scrollHeight + "px";
    }

    var cleanupAnimatedWrapperStyle = function cleanupAnimatedWrapperStyle() {
      animatedWrapperEl.style.height = '';
    };

    animatedWrapperEl.addEventListener('transitionend', cleanupAnimatedWrapperStyle);
    return function () {
      animatedWrapperEl.removeEventListener('transitionend', cleanupAnimatedWrapperStyle);
    };
  }, [isShownMore, hasSummary]);
  useEffect(function () {
    // Clean up height style at the initial render
    var animatedWrapperEl = animatedWrapperRef.current;

    if (animatedWrapperEl) {
      animatedWrapperEl.style.height = '';
    }
  }, [animatedWrapperRef]);
  var label = isShownMore ? labelShowLess != null ? labelShowLess : m('action.show-less') : labelShowMore != null ? labelShowMore : m('action.show-more');
  return /*#__PURE__*/React.createElement(TextWidgetContext.Provider, {
    value: hasSummary && !isShownMore
  }, /*#__PURE__*/React.createElement(Widget, _extends({
    ref: ref
  }, rest), /*#__PURE__*/React.createElement(VStack, {
    p: Space.S_16
  }, hasSummary ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextWidgetAnimatedWrapper, {
    overflow: "hidden",
    ref: animatedWrapperRef,
    style: {
      height: wrapperHeight != null ? wrapperHeight : wrapperHeight + "px"
    }
  }, /*#__PURE__*/React.createElement(VStack, {
    ref: contentWrapperRef
  }, children)), /*#__PURE__*/React.createElement(TextWidget.ShowButton, _extends({
    onClick: function onClick() {
      return setIsShownMore(function (v) {
        return !v;
      });
    },
    title: label
  }, showButtonProps), label)) : children)));
});

var TextWidgetSummary = function TextWidgetSummary(props) {
  var isSummary = useTextWidgetContext();

  if (!isSummary) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Text, _extends({
    use: "div",
    order: 2,
    variant: TextStyle.CAPTION,
    color: Color.FOREGROUND
  }, props));
};

var TextWidgetContent = function TextWidgetContent(props) {
  var isSummary = useTextWidgetContext();

  if (isSummary) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Text, _extends({
    use: "div",
    order: 2,
    variant: TextStyle.CAPTION,
    color: Color.FOREGROUND
  }, props));
};

var TextWidgetTitle = /*#__PURE__*/styled(Text).withConfig({
  displayName: "TextWidget__TextWidgetTitle",
  componentId: "sc-13ra1yh-1"
})(["order:-9999;"]);
TextWidgetTitle.defaultProps = {
  variant: TextStyle.PRIMARY,
  mb: Space.S_8
};
var TextWidgetShowButton = /*#__PURE__*/styled(TextButton).withConfig({
  displayName: "TextWidget__TextWidgetShowButton",
  componentId: "sc-13ra1yh-2"
})(["order:9999;"]);
TextWidgetShowButton.defaultProps = {
  textStyle: TextStyle.CAPTION,
  mt: Space.S_8
};
var TaggedSummary = Object.assign(TextWidgetSummary, (_Object$assign = {}, _Object$assign[SUMMARY_TAG] = true, _Object$assign));
export var TextWidget = Object.assign(TextWidgetBase, {
  Title: TextWidgetTitle,
  Content: TextWidgetContent,

  /** @deprecated */
  Excerpt: TaggedSummary,
  Summary: TaggedSummary,
  ShowButton: TextWidgetShowButton
});