/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useMemo } from 'react';
import * as Styled from 'styled-components';
import { UnifiedColorMode } from "../../constants";
import { hasColorMode, isString, isUnifiedTheme, merge } from "../../utils";
import { useTheme } from "../../hooks";
import { ELEVATED_COLOR_MODES } from "../../tokens/unified";
import { DefaultTheme } from "../../themes";
export function ThemeProvider(_ref) {
  var _useTheme;

  var theme = _ref.theme,
      mode = _ref.mode,
      rest = _objectWithoutPropertiesLoose(_ref, ["theme", "mode"]);

  var prevTheme = (_useTheme = useTheme()) != null ? _useTheme : DefaultTheme;
  var nextTheme = useMemo(function () {
    var result = theme == null ? prevTheme : merge(prevTheme, theme);

    if (isString(mode) && hasColorMode(result, mode)) {
      var colors = result.colorModes[mode];
      if (colors) return merge(result, {
        mode: mode,
        colors: colors
      });
    }

    return result;
  }, [prevTheme, theme, mode]);
  return /*#__PURE__*/React.createElement(Styled.ThemeProvider, _extends({
    theme: nextTheme
  }, rest));
}
/** @private */

export function ElevatedThemeProvider(_ref2) {
  var children = _ref2.children;
  var theme = useTheme();

  if (isUnifiedTheme(theme) && (theme.mode === UnifiedColorMode.LIGHT || theme.mode === UnifiedColorMode.DARK)) {
    return /*#__PURE__*/React.createElement(ThemeProvider, {
      mode: ELEVATED_COLOR_MODES[theme.mode]
    }, children);
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, children);
}