/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _TileVariant$SMALL, _variants;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { rem, rgba } from 'polished';
import React from 'react';
import styled from 'styled-components';
import { variant } from 'styled-system';
import { getArrayElementFromString, themeColor } from "../../utils";
import { Color } from "../../constants";
import { Skeleton } from "../Skeleton";
import { Tile } from "./Tile";
import { TileVariant } from "./variants";
var DEFAULT_GRADIENT = 'linear-gradient(220deg, rgba(128,156,182,0.2) 0%, rgba(128,92,245, 0.2) 100%)';
var TILE_GRADIENTS = ['linear-gradient(220deg, rgba(238,122,64,0.3) 0%, rgba(233,80,164,0.3) 50%, rgba(128,92,245,0.3) 100%)', 'linear-gradient(220deg, rgba(128,156,182,0.3) 0%, rgba(6,102,235,0.3) 100%)', 'linear-gradient(220deg, rgba(192,84,211,0.3) 0%, rgba(0,190,144,0.3) 100%)'];
var TextSkeleton = /*#__PURE__*/styled(Skeleton).withConfig({
  displayName: "TileSkeleton__TextSkeleton",
  componentId: "sc-1ymbxrl-0"
})(function (_ref) {
  var theme = _ref.theme;
  return {
    backgroundColor: rgba(themeColor(Color.BACKGROUND)({
      theme: theme
    }), 0.3)
  };
});

var TileTitleSkeleton = function TileTitleSkeleton() {
  return /*#__PURE__*/React.createElement(Tile.Title, null, /*#__PURE__*/React.createElement(TileTitleSkeletonInner, null));
};

var TileTitleSkeletonInner = /*#__PURE__*/styled(TextSkeleton).withConfig({
  displayName: "TileSkeleton__TileTitleSkeletonInner",
  componentId: "sc-1ymbxrl-1"
})([""]);
TileTitleSkeletonInner.defaultProps = {
  height: rem(24),
  width: rem(142)
};

var TileDescriptionSkeleton = function TileDescriptionSkeleton() {
  return /*#__PURE__*/React.createElement(Tile.Description, null, /*#__PURE__*/React.createElement(TextSkeleton, {
    height: rem(16),
    width: rem(56)
  }));
};

export var TileSkeletonLayout = function TileSkeletonLayout(_ref2) {
  var uuid = _ref2.uuid,
      children = _ref2.children,
      rest = _objectWithoutPropertiesLoose(_ref2, ["uuid", "children"]);

  return /*#__PURE__*/React.createElement(Tile, _extends({
    role: "presentation"
  }, rest), children != null ? children : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TileSkeleton.Title, null), /*#__PURE__*/React.createElement(TileSkeleton.Description, null)));
};
export var TileSkeleton = Object.assign(styled(TileSkeletonLayout).withConfig({
  displayName: "TileSkeleton",
  componentId: "sc-1ymbxrl-2"
})(function (_ref3) {
  var uuid = _ref3.uuid;
  return {
    background: uuid ? getArrayElementFromString(uuid, TILE_GRADIENTS) : DEFAULT_GRADIENT
  };
}, variant({
  variants: (_variants = {}, _variants[TileVariant.SMALL] = (_TileVariant$SMALL = {}, _TileVariant$SMALL[TileTitleSkeletonInner] = {
    height: rem(16),
    width: rem(96)
  }, _TileVariant$SMALL), _variants)
})), {
  Title: TileTitleSkeleton,
  Description: TileDescriptionSkeleton
});