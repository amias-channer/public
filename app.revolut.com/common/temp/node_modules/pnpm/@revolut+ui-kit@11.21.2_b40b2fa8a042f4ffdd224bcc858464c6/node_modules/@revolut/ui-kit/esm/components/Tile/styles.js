/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _TileSize, _TileVariant$SMALL, _TileVariant$WIDGET, _TileVariant$VOUCHER_, _variants, _ariaPressedTrue, _TileVariant$LARGE, _TileVariant$SMALL2, _enabledHoverL2, _TileVariant$WIDGET2, _TileVariant$VOUCHER, _variants2;

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { css } from '@styled-system/css';
import { color, variant } from 'styled-system';
import styled from 'styled-components';
import { rem, rgba } from 'polished';
import { Color, Radius, Size, Space, TextStyle } from "../../constants";
import { themeColor, themeSpace, themeTextStyle } from "../../utils";
import { Absolute, Relative } from "../Position";
import { Box } from "../Box";
import { ButtonBase } from "../ButtonBase";
import { Status } from "../Status";
import { Text } from "../Text";
import { Video } from "../Video";
import { TileVariant } from "./variants";
import { getDescriptionId, getLabelId } from "./utils";
import { useAccessibleId } from "../AccessibleId";
import { ellipsis } from "../../styles";
var MEDIA_CONTENT_SHADOW = '0px 4px 16px rgba(0, 0, 0, 0.15)';
export var TileSize = (_TileSize = {}, _TileSize[TileVariant.LARGE] = {
  aspectRatio: 343 / 284,
  minWidth: [rem(288), rem(312)],
  height: rem(284)
}, _TileSize[TileVariant.SMALL] = {
  aspectRatio: 168 / 180,
  minWidth: 'auto',
  height: rem(180)
}, _TileSize[TileVariant.WIDGET] = {
  aspectRatio: 168 / 180,
  minWidth: 'auto',
  height: rem(180)
}, _TileSize[TileVariant.VOUCHER] = {
  aspectRatio: 343 / 218,
  minWidth: [rem(288), rem(312)],
  height: rem(218)
}, _TileSize[TileVariant.VOUCHER_SMALL] = {
  aspectRatio: 168 / 180,
  minWidth: 'auto',
  height: rem(180)
}, _TileSize);
export var TileAvatar = /*#__PURE__*/styled(Box).withConfig({
  displayName: "styles__TileAvatar",
  componentId: "sc-1efpx3r-0"
})({
  gridColumn: 'avatar',
  gridRow: 1,
  justifySelf: 'start'
});
TileAvatar.defaultProps = {
  size: Size.S_56
};
export var TileAction = /*#__PURE__*/styled(Box).withConfig({
  displayName: "styles__TileAction",
  componentId: "sc-1efpx3r-1"
})({
  gridColumn: 'action / end',
  gridRow: 1,
  justifySelf: 'end'
});
export var TileStatus = /*#__PURE__*/styled(Status).withConfig({
  displayName: "styles__TileStatus",
  componentId: "sc-1efpx3r-2"
})(css({
  alignSelf: 'end',
  gridColumn: '1 / end',
  order: 2,
  color: 'inherit',
  opacity: 0.8
}));
var TileTitleBase = /*#__PURE__*/styled(Text).withConfig({
  displayName: "styles__TileTitleBase",
  componentId: "sc-1efpx3r-3"
})(themeTextStyle(TextStyle.H1), {
  alignSelf: 'end',
  gridColumn: '1 / end',
  order: 3
});
export var TileTitle = function TileTitle(props) {
  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(TileTitleBase, _extends({
    id: getLabelId(id)
  }, props));
};
TileTitle.defaultProps = {
  lineClamp: 3
};
var TileDescriptionBase = /*#__PURE__*/styled(Text).withConfig({
  displayName: "styles__TileDescriptionBase",
  componentId: "sc-1efpx3r-4"
})(themeTextStyle(TextStyle.SMALL), {
  alignSelf: 'end',
  gridColumn: '1 / end',
  order: 4
});
export var TileDescription = function TileDescription(props) {
  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(TileDescriptionBase, _extends({
    id: getDescriptionId(id)
  }, props));
};
TileDescription.defaultProps = {
  lineClamp: 4
};
export var TileContent = /*#__PURE__*/styled(Box).withConfig({
  displayName: "styles__TileContent",
  componentId: "sc-1efpx3r-5"
})({
  gridColumn: '1 / end',
  order: 5
});
export var TileFooter = /*#__PURE__*/styled(Box).withConfig({
  displayName: "styles__TileFooter",
  componentId: "sc-1efpx3r-6"
})(themeTextStyle(TextStyle.SMALL), css({
  display: 'grid',
  gap: Space.S_16,
  paddingX: Space.S_24,
  paddingY: Space.S_16,
  wordBreak: 'break-word'
}));
export var TileImage = /*#__PURE__*/styled(Box).withConfig({
  displayName: "styles__TileImage",
  componentId: "sc-1efpx3r-7"
})(function (_ref) {
  var image = _ref.image;
  return {
    background: "url(" + image + ")"
  };
}, css({
  order: 1,
  gridColumn: '1 / end',
  borderRadius: Radius.WIDGET,
  backgroundSize: 'cover',
  backgroundRepeat: 'no-repeat',
  backgroundPosition: 'center',
  marginBottom: Space.S_8
}), function (_ref2) {
  var dropShadow = _ref2.dropShadow;
  return {
    boxShadow: dropShadow ? MEDIA_CONTENT_SHADOW : undefined
  };
});
export var TileVideoWrapper = /*#__PURE__*/styled(Box).withConfig({
  displayName: "styles__TileVideoWrapper",
  componentId: "sc-1efpx3r-8"
})(css({
  position: 'relative',
  overflow: 'hidden',
  order: 1,
  gridColumn: '1 / end',
  borderRadius: Radius.WIDGET,
  marginBottom: Space.S_8
}), function (_ref3) {
  var dropShadow = _ref3.dropShadow;
  return {
    boxShadow: dropShadow ? MEDIA_CONTENT_SHADOW : undefined
  };
});
export var TileVideo = /*#__PURE__*/React.forwardRef(function (_ref4, ref) {
  var dropShadow = _ref4.dropShadow,
      rest = _objectWithoutPropertiesLoose(_ref4, ["dropShadow"]);

  return /*#__PURE__*/React.createElement(TileVideoWrapper, {
    dropShadow: dropShadow
  }, /*#__PURE__*/React.createElement(Video, _extends({
    ref: ref
  }, rest)));
});
export var TileLayout = /*#__PURE__*/styled(Absolute).withConfig({
  displayName: "styles__TileLayout",
  componentId: "sc-1efpx3r-9"
})(css({
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  display: 'grid',
  height: '100%',
  gridTemplateColumns: '[avatar] minmax(0, min-content) [action] minmax(0, min-content)',
  gridTemplateRows: 'minmax(min-content, 1fr)',
  padding: Space.S_24,
  rowGap: Space.S_8,
  borderRadius: Radius.WIDGET
}), variant({
  variants: (_variants = {}, _variants[TileVariant.SMALL] = (_TileVariant$SMALL = {
    padding: Space.S_16,
    rowGap: Space.S_4
  }, _TileVariant$SMALL[TileStatus] = {
    order: 3
  }, _TileVariant$SMALL[TileTitleBase] = {
    variant: "textStyles." + TextStyle.TILE,
    order: 2
  }, _TileVariant$SMALL[TileDescriptionBase] = {
    order: 4
  }, _TileVariant$SMALL), _variants[TileVariant.WIDGET] = (_TileVariant$WIDGET = {
    padding: Space.S_16,
    rowGap: Space.S_4
  }, _TileVariant$WIDGET[TileStatus] = {
    order: 3,
    color: Color.GREY_TONE_50
  }, _TileVariant$WIDGET[TileTitleBase] = {
    variant: "textStyles." + TextStyle.TILE,
    order: 2
  }, _TileVariant$WIDGET[TileDescriptionBase] = {
    order: 4,
    color: Color.GREY_TONE_50
  }, _TileVariant$WIDGET), _variants[TileVariant.VOUCHER_SMALL] = (_TileVariant$VOUCHER_ = {
    padding: Space.S_16,
    rowGap: Space.S_4
  }, _TileVariant$VOUCHER_[TileStatus] = {
    order: 3,
    opacity: 0.6
  }, _TileVariant$VOUCHER_[TileTitleBase] = _extends({
    variant: "textStyles." + TextStyle.TILE,
    order: 2
  }, ellipsis()), _TileVariant$VOUCHER_), _variants)
}));
var GRADIENT_OVERLAY = 'linear-gradient(180deg, rgba(0, 0, 0, 0) 0%,  rgba(0, 0, 0, 0.5) 100%)';
var HOVER_SHADOW = 'inset 0 0 0 9999px rgba(0, 0, 0, 0.1)';
var SELECTED_SHADOW = 'inset 0 0 0 9999px rgba(0, 0, 0, 0.3)';
export var TileBody = /*#__PURE__*/styled(Relative).withConfig({
  displayName: "styles__TileBody",
  componentId: "sc-1efpx3r-10"
})(function (_ref5) {
  var _ref6;

  var image = _ref5.image,
      locked = _ref5.locked,
      theme = _ref5.theme;
  return _ref6 = {
    display: 'grid',
    gridAutoFlow: 'row',
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    backgroundImage: image ? (locked ? "linear-gradient(180deg, " + rgba(themeColor(Color.GREY_TONE_5)({
      theme: theme
    }), 0.7) + " 0%,  " + rgba(themeColor(Color.GREY_TONE_5)({
      theme: theme
    }), 0.7) + " 100%)" : GRADIENT_OVERLAY) + ", url(" + image + ")" : 'none'
  }, _ref6[TileLayout] = locked ? {
    opacity: 0.7
  } : {}, _ref6;
});
// Component is generic and it's assignable to button
// We set element to `div` in default props
// @ts-expect-error
export var TileButtonBase = /*#__PURE__*/styled(ButtonBase).withConfig({
  displayName: "styles__TileButtonBase",
  componentId: "sc-1efpx3r-11"
})(color, css({
  borderRadius: Radius.WIDGET,
  overflow: 'hidden',
  width: '100%',
  display: 'block',
  '&[aria-pressed=true]': (_ariaPressedTrue = {}, _ariaPressedTrue[TileLayout] = {
    boxShadow: SELECTED_SHADOW
  }, _ariaPressedTrue)
}), function (_ref7) {
  var _enabledHoverL;

  var locked = _ref7.locked,
      onClick = _ref7.onClick;
  if (locked) return {};

  if (onClick) {
    var _hover;

    return {
      '&:hover': (_hover = {}, _hover[TileLayout] = {
        boxShadow: HOVER_SHADOW
      }, _hover)
    };
  }

  return {
    '&:enabled:hover, &:link:hover': (_enabledHoverL = {}, _enabledHoverL[TileLayout] = {
      boxShadow: HOVER_SHADOW
    }, _enabledHoverL)
  };
}, function (_ref8) {
  var variantProp = _ref8.variant;
  return css({
    minWidth: variantProp ? TileSize[variantProp].minWidth : undefined
  });
}, variant({
  variants: (_variants2 = {}, _variants2[TileVariant.LARGE] = (_TileVariant$LARGE = {}, _TileVariant$LARGE[TileFooter] = {
    gridAutoFlow: 'column',
    justifyContent: 'space-between',
    alignItems: 'center'
  }, _TileVariant$LARGE), _variants2[TileVariant.SMALL] = (_TileVariant$SMALL2 = {}, _TileVariant$SMALL2[TileFooter] = {
    display: 'none'
  }, _TileVariant$SMALL2), _variants2[TileVariant.WIDGET] = (_TileVariant$WIDGET2 = {
    color: Color.FOREGROUND,
    '&:enabled:hover, &:link:hover': (_enabledHoverL2 = {}, _enabledHoverL2[TileLayout] = function (theme) {
      return {
        boxShadow: "inset 0 0 0 " + themeSpace(Space.S_4)({
          theme: theme
        }) + " " + themeColor(Color.WIDGET_BACKGROUND)({
          theme: theme
        }) + ", inset 0 0 0 9999px " + themeColor(Color.GREY_TONE_2)({
          theme: theme
        })
      };
    }, _enabledHoverL2)
  }, _TileVariant$WIDGET2[TileFooter] = {
    display: 'none'
  }, _TileVariant$WIDGET2), _variants2[TileVariant.VOUCHER] = (_TileVariant$VOUCHER = {}, _TileVariant$VOUCHER[TileFooter] = {
    gridAutoFlow: 'row'
  }, _TileVariant$VOUCHER), _variants2)
}));
TileButtonBase.defaultProps = {
  use: 'div',
  color: Color.WHITE,
  bg: Color.WIDGET_BACKGROUND
};