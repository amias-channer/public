/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled, { keyframes } from 'styled-components';
import { Color } from "../../constants";
import { prop } from "../../styles";
import { Box } from "../Box";
var fillSegment = /*#__PURE__*/keyframes(["from{transform:translateX(-100%);}to{transform:translateX(0%);}"]);
var ProgressBar = /*#__PURE__*/styled(Box).withConfig({
  displayName: "TimerProgressBar__ProgressBar",
  componentId: "sc-13z4uko-0"
})(["height:inherit;width:inherit;border-radius:inherit;animation:", " ", " linear forwards;animation-play-state:", ";"], fillSegment, prop('duration', 0, 'ms'), function (_ref) {
  var paused = _ref.paused;
  return paused ? 'paused' : undefined;
});

/** @private */
export var TimerProgressBar = function TimerProgressBar(_ref2) {
  var timeout = _ref2.timeout,
      onExit = _ref2.onExit,
      activeBg = _ref2.activeBg,
      paused = _ref2.paused,
      rest = _objectWithoutPropertiesLoose(_ref2, ["timeout", "onExit", "activeBg", "paused"]);

  return /*#__PURE__*/React.createElement(Box, _extends({
    bg: Color.GREY_TONE_5,
    overflow: "hidden"
  }, rest), timeout !== undefined && /*#__PURE__*/React.createElement(ProgressBar, {
    role: "timer",
    bg: activeBg != null ? activeBg : Color.GREY_TONE_20,
    duration: timeout,
    onAnimationEnd: onExit,
    paused: paused
  }));
};