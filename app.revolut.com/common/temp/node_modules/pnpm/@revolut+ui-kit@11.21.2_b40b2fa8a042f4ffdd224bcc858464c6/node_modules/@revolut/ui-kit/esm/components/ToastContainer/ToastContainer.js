/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import { css } from '@styled-system/css';
import { SwitchTransition } from 'react-transition-group';
import { Duration, Easing, Space } from "../../constants";
import { useWindow } from "../../hooks";
import { Box } from "../Box";
import { ColorModeSwitchProvider } from "../ColorModeSwitchProvider";
import { useToast, useToastState } from "../ToastProvider";
import { TransitionSlide } from "../Transitions";
import { DURATIONS, EASINGS } from "../../tokens/default";
var ToastContainerBase = /*#__PURE__*/styled(Box).withConfig({
  displayName: "ToastContainer__ToastContainerBase",
  componentId: "wihw6j-0"
})(css({
  position: 'absolute',
  display: 'flex',
  justifyContent: 'center',
  width: '100%',
  left: 0,
  right: 0,
  bottom: 0,
  pt: Space.S_32,
  mt: Space.N_32,
  pb: [Space.S_32, null, Space.S_48],
  overflow: 'hidden',
  pointerEvents: 'none',
  '> *': {
    pointerEvents: 'auto'
  }
}));

function getTransitionKey(state, id) {
  return id ? String(id) : Number(state);
}

/** @private  */
export function ToastContainer(_ref) {
  var _ref$in = _ref["in"],
      isVisible = _ref$in === void 0 ? true : _ref$in,
      rest = _objectWithoutPropertiesLoose(_ref, ["in"]);

  var win = useWindow();
  var toastState = useToastState();
  var toastActions = useToast();
  return /*#__PURE__*/React.createElement(ColorModeSwitchProvider, null, /*#__PURE__*/React.createElement(ToastContainerBase, rest, /*#__PURE__*/React.createElement(SwitchTransition, null, /*#__PURE__*/React.createElement(TransitionSlide, {
    key: getTransitionKey(isVisible, toastState == null ? void 0 : toastState.id),
    onEnterComplete: toastState == null ? void 0 : toastState.onShow,
    onExitComplete: toastState == null ? void 0 : toastState.onHide,
    exitAnimation: {
      duration: DURATIONS[Duration.SM]
    },
    easing: "cubicBezier(" + EASINGS[Easing.TOAST] + ")",
    offsetY: "-100%"
  }, /*#__PURE__*/React.createElement(Box, {
    onClick: function onClick(event) {
      var selection = win == null ? void 0 : win.getSelection();

      if (toastState && !event.defaultPrevented && selection && (selection.isCollapsed || !event.currentTarget.contains(selection.anchorNode))) {
        toastActions.hide(toastState.id);
      }
    }
  }, isVisible ? toastState == null ? void 0 : toastState.element : null)))));
}