/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _TIMEOUTS;

import React, { createContext, useContext, useEffect, useMemo, useRef, useState } from 'react';
import { isFunction, noop } from "../../utils";
export var ToastTimeout = {
  SHORT: 'short',
  LONG: 'long'
};
var TIMEOUTS = (_TIMEOUTS = {}, _TIMEOUTS[ToastTimeout.SHORT] = 2500, _TIMEOUTS[ToastTimeout.LONG] = 5000, _TIMEOUTS);

/** @private */
var ToastStateContext = /*#__PURE__*/createContext(null);
/** @private */

var ToastActionsContext = /*#__PURE__*/createContext(null);
/** @private */

/** @private  */
export function ToastProvider(_ref) {
  var children = _ref.children;
  var timeoutsRef = useRef(new Set());

  var _useState = useState(null),
      toastState = _useState[0],
      setToastState = _useState[1];

  useEffect(function () {
    return function () {
      timeoutsRef.current.forEach(clearTimeout);
      timeoutsRef.current.clear();
    };
  }, []);
  var contextValue = useMemo(function () {
    var hide = function hide(toastId) {
      setToastState(function (toastStateCurrent) {
        if (toastStateCurrent && toastId === toastStateCurrent.id) {
          return null;
        }

        return toastStateCurrent;
      });
    };

    var show = function show(toast, timeout, onHide) {
      if (onHide === void 0) {
        onHide = noop;
      }

      var id = Symbol("toast-" + Date.now());

      var hideCurrent = function hideCurrent() {
        return hide(id);
      };

      var element = isFunction(toast) ? toast(hideCurrent) : toast;

      var showCallback = function showCallback() {
        if (timeout && !isFunction(timeout)) {
          var timeoutId = setTimeout(function () {
            timeoutsRef.current["delete"](timeoutId);
            hideCurrent();
          }, TIMEOUTS[timeout]);
          timeoutsRef.current.add(timeoutId);
        }
      };

      var hideCallback = isFunction(timeout) ? timeout : onHide;
      setToastState({
        id: id,
        element: element,
        onShow: showCallback,
        onHide: hideCallback
      });
      return id;
    };

    return {
      hide: hide,
      show: show
    };
  }, []);
  return /*#__PURE__*/React.createElement(ToastActionsContext.Provider, {
    value: contextValue
  }, /*#__PURE__*/React.createElement(ToastStateContext.Provider, {
    value: toastState
  }, children));
}
/** @private  */

export var useToastState = function useToastState() {
  return useContext(ToastStateContext);
};
/**
 * Show a `Toast` at the bottom of `Layout` or `Side`
 * @url https://ui-kit.revolut.codes/utils/use-toast
 */

export var useToast = function useToast() {
  var value = useContext(ToastActionsContext);

  if (value === null) {
    throw new Error('You can access context only in components inside `ToastProvider` component');
  }

  return value;
};