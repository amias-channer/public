/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import React, { createContext, useContext, useMemo } from 'react';
import { isFunction, noop, renderNothing } from "../../utils";
import { useToggleState } from "../../hooks";
var ToggleContext = /*#__PURE__*/createContext(null);
export var useToggleContext = function useToggleContext() {
  return useContext(ToggleContext);
};
export function Toggle(_ref) {
  var _ref$children = _ref.children,
      children = _ref$children === void 0 ? renderNothing : _ref$children,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$defaultState = _ref.defaultState,
      defaultState = _ref$defaultState === void 0 ? false : _ref$defaultState,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      controlledState = _ref.state;

  var _useToggleState = useToggleState({
    disabled: disabled,
    defaultState: defaultState,
    state: controlledState,
    onChange: onChange
  }),
      state = _useToggleState[0],
      toggle = _useToggleState[1];

  var value = useMemo(function () {
    return Object.assign(toggle, {
      state: state,
      toggle: toggle
    });
  }, [state, toggle]);
  return /*#__PURE__*/React.createElement(ToggleContext.Provider, {
    value: value
  }, isFunction(children) ? children(value) : children);
}