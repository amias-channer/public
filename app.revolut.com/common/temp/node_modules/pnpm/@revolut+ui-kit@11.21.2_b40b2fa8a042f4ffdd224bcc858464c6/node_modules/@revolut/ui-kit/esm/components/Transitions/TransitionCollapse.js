/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import { Transition } from 'react-transition-group';
import { Duration } from "../../constants";
import { DURATIONS } from "../../tokens/default";
import { isFunction } from "../../utils";
import { PreventUpdateOnExit } from "./PreventUpdateOnExit";
import { addAnimationEndListener, animate } from "./utils";
var OverflowWrapper = /*#__PURE__*/styled.div.withConfig({
  displayName: "TransitionCollapse__OverflowWrapper",
  componentId: "a7ndr3-0"
})(["overflow:hidden;"]);
export var TransitionCollapse = function TransitionCollapse(_ref) {
  var _ref$appear = _ref.appear,
      appear = _ref$appear === void 0 ? true : _ref$appear,
      children = _ref.children,
      _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? 0 : _ref$delay,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? DURATIONS[Duration.MD] : _ref$duration,
      easing = _ref.easing,
      enterAnimation = _ref.enterAnimation,
      exitAnimation = _ref.exitAnimation,
      timing = _ref.timing,
      _ref$unmountOnExit = _ref.unmountOnExit,
      unmountOnExit = _ref$unmountOnExit === void 0 ? true : _ref$unmountOnExit,
      _ref$wrapper = _ref.wrapper,
      Wrapper = _ref$wrapper === void 0 ? OverflowWrapper : _ref$wrapper,
      rest = _objectWithoutPropertiesLoose(_ref, ["appear", "children", "delay", "duration", "easing", "enterAnimation", "exitAnimation", "timing", "unmountOnExit", "wrapper"]);

  return /*#__PURE__*/React.createElement(Transition, _extends({
    addEndListener: addAnimationEndListener,
    unmountOnExit: unmountOnExit,
    appear: appear,
    onEnter: function onEnter(node) {
      node.style.overflow = 'hidden';
      node.style.opacity = '0';
      node.style.height = '0';
      return animate(_extends({
        targets: node,
        height: [0, node.scrollHeight],
        opacity: {
          value: [0, 1],
          easing: 'linear'
        },
        duration: duration,
        delay: delay,
        timing: timing,
        easing: easing,
        complete: function complete() {
          node.style.overflow = '';
          node.style.opacity = '';
          node.style.height = '';
        }
      }, enterAnimation));
    },
    onExit: function onExit(node) {
      node.style.overflow = 'hidden';
      return animate(_extends({
        targets: node,
        height: 0,
        opacity: {
          value: [1, 0],
          easing: 'linear'
        },
        duration: duration,
        delay: delay,
        timing: timing,
        easing: easing
      }, exitAnimation));
    }
  }, rest), function () {
    return /*#__PURE__*/React.createElement(PreventUpdateOnExit, {
      "in": rest["in"]
    }, /*#__PURE__*/React.createElement(Wrapper, null, isFunction(children) ? children.apply(void 0, arguments) : children));
  });
};