/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useEffect } from 'react';
import * as RTG from 'react-transition-group';
import { Duration } from "../../constants";
import { DURATIONS } from "../../tokens/default";
import { isAttached, noop, splitUnit } from "../../utils";
import { addAnimationEndListener, animate } from "./utils";

var negative = function negative(input) {
  var _splitUnit = splitUnit(input),
      value = _splitUnit[0],
      _splitUnit$ = _splitUnit[1],
      unit = _splitUnit$ === void 0 ? '' : _splitUnit$;

  return "" + value * -1 + unit;
};

export var TRANSITION_SLIDE_INITIAL_STYLES = {
  opacity: 0,
  pointerEvents: 'none'
};
export function TransitionSlide(_ref) {
  var _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? DURATIONS[Duration.MD] : _ref$duration,
      _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? 0 : _ref$delay,
      _ref$offsetX = _ref.offsetX,
      offsetX = _ref$offsetX === void 0 ? 0 : _ref$offsetX,
      _ref$offsetY = _ref.offsetY,
      offsetY = _ref$offsetY === void 0 ? 0 : _ref$offsetY,
      easing = _ref.easing,
      timing = _ref.timing,
      _ref$onEnterComplete = _ref.onEnterComplete,
      onEnterComplete = _ref$onEnterComplete === void 0 ? noop : _ref$onEnterComplete,
      _ref$onExitComplete = _ref.onExitComplete,
      onExitComplete = _ref$onExitComplete === void 0 ? noop : _ref$onExitComplete,
      enterAnimation = _ref.enterAnimation,
      exitAnimation = _ref.exitAnimation,
      rest = _objectWithoutPropertiesLoose(_ref, ["duration", "delay", "offsetX", "offsetY", "easing", "timing", "onEnterComplete", "onExitComplete", "enterAnimation", "exitAnimation"]);

  useEffect(function () {
    if (RTG.config.disabled) {
      if (rest["in"]) onEnterComplete();else onExitComplete();
    }
  }, [rest["in"], onEnterComplete, onExitComplete]);
  return /*#__PURE__*/React.createElement(RTG.Transition, _extends({
    addEndListener: addAnimationEndListener,
    onEnter: function onEnter(node) {
      Object.assign(node.style, TRANSITION_SLIDE_INITIAL_STYLES);
      return animate(_extends({
        targets: node,
        translateX: [negative(offsetX), 0],
        translateY: [negative(offsetY), 0],
        opacity: [0, 1],
        duration: duration,
        delay: delay,
        timing: timing,
        easing: easing,
        complete: function complete() {
          if (isAttached(node)) {
            node.style.pointerEvents = '';
            onEnterComplete();
          }
        }
      }, enterAnimation));
    },
    onExit: function onExit(node) {
      return animate(_extends({
        targets: node,
        translateX: [0, negative(offsetX)],
        translateY: [0, negative(offsetY)],
        opacity: [1, 0],
        duration: duration,
        delay: delay,
        timing: timing,
        easing: easing,
        complete: function complete() {
          if (isAttached(node)) onExitComplete();
        }
      }, exitAnimation));
    },
    unmountOnExit: true,
    appear: true
  }, rest));
}