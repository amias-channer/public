/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _STATE_TIMEOUT;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { UploadIcon } from "./UploadIcon";
import { DismissTimeout, StatusPopupBase } from "../StatusPopupBase";
import { UploadPopupState } from "./state";
var STATE_TIMEOUT = (_STATE_TIMEOUT = {}, _STATE_TIMEOUT[UploadPopupState.SUCCESS] = DismissTimeout.SHORT, _STATE_TIMEOUT[UploadPopupState.IN_PROGRESS] = undefined, _STATE_TIMEOUT[UploadPopupState.ERROR] = undefined, _STATE_TIMEOUT);
export var UploadPopup = function UploadPopup(_ref) {
  var children = _ref.children,
      _ref$state = _ref.state,
      state = _ref$state === void 0 ? UploadPopupState.IN_PROGRESS : _ref$state,
      _ref$cancellable = _ref.cancellable,
      cancellable = _ref$cancellable === void 0 ? true : _ref$cancellable,
      progress = _ref.progress,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "state", "cancellable", "progress"]);

  return /*#__PURE__*/React.createElement(StatusPopupBase, _extends({
    closable: state !== UploadPopupState.IN_PROGRESS || cancellable,
    timeout: STATE_TIMEOUT[state]
  }, rest), function (_ref2) {
    var isEntered = _ref2.isEntered;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UploadIcon, {
      state: state,
      progress: progress,
      autoPlay: isEntered
    }), children);
  });
};
UploadPopup.Title = StatusPopupBase.Title;
UploadPopup.Description = StatusPopupBase.Description;
UploadPopup.Actions = StatusPopupBase.Actions;