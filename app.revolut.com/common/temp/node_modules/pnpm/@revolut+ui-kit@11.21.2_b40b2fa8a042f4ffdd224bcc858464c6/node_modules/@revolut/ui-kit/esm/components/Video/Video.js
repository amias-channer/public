/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useRef, useState } from 'react';
import styled from 'styled-components';
import { Transition } from "../../constants";
import { useUniversalLayoutEffect } from "../../hooks";
import { setRefs, themeTransition } from "../../utils";
import { Box } from "../Box";
var VideoBase = /*#__PURE__*/styled.video.withConfig({
  displayName: "Video__VideoBase",
  componentId: "sc-1jdk5bx-0"
})(["width:100%;height:100%;position:absolute;top:0;left:0;object-fit:cover;transition:", ";"], themeTransition(Transition.OPACITY));

var VideoWrapper = function VideoWrapper(props) {
  if (props.aspectRatio) {
    return /*#__PURE__*/React.createElement(Box, props);
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, props.children);
};

export var Video = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var video = _ref.video,
      aspectRatio = _ref.aspectRatio,
      paused = _ref.paused,
      _ref$muted = _ref.muted,
      muted = _ref$muted === void 0 ? true : _ref$muted,
      rest = _objectWithoutPropertiesLoose(_ref, ["video", "aspectRatio", "paused", "muted"]);

  var innerRef = useRef(null);

  var _useState = useState(false),
      canPlay = _useState[0],
      setCanPlay = _useState[1];
  /**
   * React does not guarantee muted attribute will set,
   * so for now we are doing this inside effect
   * @see https://github.com/facebook/react/issues/10389
   */


  useUniversalLayoutEffect(function () {
    var element = innerRef.current;
    if (element && muted) element.muted = true;
  }, [ref, muted]);
  useUniversalLayoutEffect(function () {
    var element = innerRef.current;

    if (element && canPlay) {
      if (paused) {
        element.pause();
      } else if (element.paused) {
        element.play();
      }
    }
  }, [canPlay, paused, ref]);
  return /*#__PURE__*/React.createElement(VideoWrapper, {
    aspectRatio: aspectRatio
  }, /*#__PURE__*/React.createElement(VideoBase, _extends({
    ref: setRefs(innerRef, ref),
    autoPlay: true,
    loop: true,
    playsInline: true,
    preload: "metadata",
    src: typeof video === 'string' ? video : undefined,
    onCanPlay: function onCanPlay() {
      return setCanPlay(true);
    },
    style: {
      opacity: canPlay ? 1 : 0
    }
  }, rest), Array.isArray(video) ? video.map(function (sourceProps) {
    return /*#__PURE__*/React.createElement("source", _extends({
      key: sourceProps.src
    }, sourceProps));
  }) : null));
});