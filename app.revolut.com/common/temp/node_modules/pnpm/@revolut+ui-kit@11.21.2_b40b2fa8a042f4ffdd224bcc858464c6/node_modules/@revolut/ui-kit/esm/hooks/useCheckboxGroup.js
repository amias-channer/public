/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useCallback } from 'react';
import { combine } from "../utils";
import { useControlled } from "./useControlled";
export var useCheckboxGroup = function useCheckboxGroup(_ref) {
  var _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? [] : _ref$defaultValue,
      controlledValue = _ref.value,
      _ref$isDisabled = _ref.isDisabled,
      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
      onChange = _ref.onChange,
      _ref$shouldPassEvent = _ref.shouldPassEvent,
      shouldPassEvent = _ref$shouldPassEvent === void 0 ? true : _ref$shouldPassEvent;

  var _useControlled = useControlled({
    defaultValue: defaultValue,
    value: controlledValue,
    onChange: onChange
  }),
      value = _useControlled[0],
      setValue = _useControlled[1];

  var getProps = useCallback(function (_ref2) {
    var inputValue = _ref2.value,
        inputOnChange = _ref2.onChange,
        rest = _objectWithoutPropertiesLoose(_ref2, ["value", "onChange"]);

    var isChecked = value.includes(inputValue);

    var handleChange = function handleChange(event) {
      if (isDisabled) {
        return;
      }

      var nextValue = isChecked ? value.filter(function (v) {
        return v !== inputValue;
      }) : [].concat(value, [inputValue]);

      if (shouldPassEvent) {
        setValue(nextValue, event);
      } else {
        setValue(nextValue);
      }
    };

    return _extends({}, rest, {
      checked: isChecked,
      disabled: isDisabled,
      onChange: combine(handleChange, inputOnChange)
    });
  }, [isDisabled, value, setValue, shouldPassEvent]);
  return [value, getProps, setValue];
};