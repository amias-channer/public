/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { useCallback, useState } from 'react';
import { isFunction } from "../utils";
import { useLatestRef } from "./useLatestRef";
export function useControlled(_ref) {
  var defaultValue = _ref.defaultValue,
      propValue = _ref.value,
      onChange = _ref.onChange;
  var callbackRef = useLatestRef(onChange);

  var _useState = useState(defaultValue),
      stateValue = _useState[0],
      setStateValue = _useState[1];

  var value = propValue === undefined ? stateValue : propValue;
  var update = useCallback(function (next) {
    if (propValue === undefined) {
      setStateValue(next);
    }

    var callback = callbackRef.current;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (isFunction(callback)) callback.apply(void 0, [next].concat(args));
  }, [propValue, callbackRef]);
  return [value, update];
}