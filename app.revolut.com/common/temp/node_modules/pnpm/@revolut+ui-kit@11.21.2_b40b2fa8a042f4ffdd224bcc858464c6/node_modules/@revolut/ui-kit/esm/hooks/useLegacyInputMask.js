/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { useCallback, useRef } from 'react';
import formatStringByPattern from 'format-string-by-pattern';
import { identity } from "../utils";
import { useUniversalLayoutEffect } from '.';

/** @deprecated use [`rifm`](https://github.com/realadvisor/rifm) */
export function useLegacyInputMask(_ref) {
  var maskPattern = _ref.maskPattern,
      _ref$parseFn = _ref.parseFn,
      parseFn = _ref$parseFn === void 0 ? identity : _ref$parseFn;
  var restoreCursorPositionRef = useRef();
  useUniversalLayoutEffect(function () {
    if (typeof restoreCursorPositionRef.current === 'function') {
      restoreCursorPositionRef.current();
      restoreCursorPositionRef.current = undefined;
    }
  }); // eslint-disable-next-line react-hooks/exhaustive-deps

  var maskFn = useCallback(maskPattern ? formatStringByPattern(maskPattern) : identity, [maskPattern]);
  var format = useCallback(function (value) {
    return maskFn(parseFn(value));
  }, [maskFn, parseFn]);
  var handleChange = useCallback(function (event) {
    var target = event.currentTarget;
    var selectionStart = target.selectionStart,
        selectionEnd = target.selectionEnd,
        value = target.value;
    var nextValue = format(value);

    if (value === nextValue) {
      return;
    }

    target.value = nextValue;

    restoreCursorPositionRef.current = function () {
      if (target && target.type !== 'number' && value.length !== selectionStart && typeof selectionStart === 'number' && typeof selectionEnd === 'number') {
        target.setSelectionRange(selectionStart, selectionEnd);
      }
    };
  }, [format]);
  return [format, handleChange];
}