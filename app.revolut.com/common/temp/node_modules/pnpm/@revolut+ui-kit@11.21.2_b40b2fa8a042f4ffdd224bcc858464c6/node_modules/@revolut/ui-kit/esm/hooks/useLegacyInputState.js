/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useCallback } from 'react';
import { formatValueToString, useInputState } from "./useInputState";
import { useLegacyInputMask } from "./useLegacyInputMask";

/** @deprecated Replace with `useInputState` */
export function useLegacyInputState(_ref) {
  var _ref$format = _ref.format,
      format = _ref$format === void 0 ? formatValueToString : _ref$format,
      onChange = _ref.onChange,
      options = _objectWithoutPropertiesLoose(_ref, ["format", "onChange"]);

  var _useLegacyInputMask = useLegacyInputMask(options),
      formatMask = _useLegacyInputMask[0],
      handleMaskOnChange = _useLegacyInputMask[1];

  var formatWithMask = useCallback(function (value) {
    return formatMask(format(value));
  }, [format, formatMask]);
  var handleChange = useCallback(function (event) {
    handleMaskOnChange(event);
    if (typeof onChange === 'function') onChange(event);
  }, [handleMaskOnChange, onChange]);
  return useInputState(_extends({}, options, {
    format: formatWithMask,
    onChange: handleChange
  }));
}