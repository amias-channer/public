/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { useCallback, useMemo } from 'react';
import { changeNumberFormatCurrencySymbol, getNumberFractionDigits, joinNumberFormatParts } from "../utils";
import { DEFAULT_LOCALE, MoneyType } from "../constants";
import { useLocale } from "./useLocale";
import { useCurrencyDefinitions } from "./useCurrencyDefinitions";

function isLegacyAPI(argument) {
  return typeof argument !== 'object' && argument !== null;
}

function isMoney(argument) {
  return typeof argument === 'object' && argument !== null;
}
/** @deprecated string api is deprecated. Use object api */


var getOptions = function getOptions(argument) {
  return isLegacyAPI(argument) ? {
    currency: argument
  } : argument;
};

export var useMoneyFormat = function useMoneyFormat(options) {
  var _getOptions = getOptions(options),
      currency = _getOptions.currency,
      _getOptions$showSign = _getOptions.showSign,
      showSign = _getOptions$showSign === void 0 ? false : _getOptions$showSign,
      _getOptions$compactNo = _getOptions.compactNotation,
      compactNotation = _getOptions$compactNo === void 0 ? false : _getOptions$compactNo,
      _getOptions$type = _getOptions.type,
      type = _getOptions$type === void 0 ? MoneyType.MONEY : _getOptions$type;

  var locale = useLocale();
  var customCurrencyDefinitions = useCurrencyDefinitions();
  var maximumFractionDigits = useMemo(function () {
    return getFractionalPart(currency, customCurrencyDefinitions);
  }, [currency, customCurrencyDefinitions]);
  var formatter = useMemo(function () {
    return getFormatter({
      locale: locale,
      currency: currency,
      showSign: showSign,
      maximumFractionDigits: maximumFractionDigits,
      compactNotation: compactNotation
    });
  }, [locale, currency, showSign, compactNotation, maximumFractionDigits]);
  return useCallback(function (argument) {
    var _customCurrencyDefini;

    var amountArgument = isMoney(argument) ? argument.amount : argument;
    var currencyArgument = isMoney(argument) ? argument.currency : currency;
    var customCurrencySymbol = currencyArgument ? (_customCurrencyDefini = customCurrencyDefinitions.get(currencyArgument)) == null ? void 0 : _customCurrencyDefini.symbol : undefined;
    var maximumFractionDigitsArgument = isMoney(argument) && currencyArgument !== currency ? getFractionalPart(currencyArgument, customCurrencyDefinitions) : maximumFractionDigits;
    var amount = type === MoneyType.MONEY_FRACTIONAL ? amountArgument / Math.pow(10, maximumFractionDigitsArgument) : amountArgument;
    var parts = (currencyArgument && currencyArgument !== currency ? getFormatter({
      locale: locale,
      currency: currencyArgument,
      maximumFractionDigits: maximumFractionDigitsArgument,
      showSign: showSign,
      compactNotation: compactNotation
    }) : formatter).formatToParts(amount);
    var fractionPart = parts.find(function (part) {
      return part.type === 'fraction';
    });

    if (!fractionPart || fractionPart.value !== '0'.repeat(fractionPart.value.length)) {
      return joinNumberFormatParts(customCurrencySymbol ? changeNumberFormatCurrencySymbol(parts, customCurrencySymbol) : parts);
    } // filter fraction part if it has only zeros


    var filteredParts = parts.filter(function (part) {
      return part.type !== 'decimal' && part.type !== 'fraction';
    });
    return joinNumberFormatParts(customCurrencySymbol ? changeNumberFormatCurrencySymbol(filteredParts, customCurrencySymbol) : filteredParts);
  }, [locale, showSign, compactNotation, formatter, currency, type, maximumFractionDigits, customCurrencyDefinitions]);
};

var getFormatter = function getFormatter(_ref) {
  var locale = _ref.locale,
      currency = _ref.currency,
      _ref$showSign = _ref.showSign,
      showSign = _ref$showSign === void 0 ? false : _ref$showSign,
      _ref$compactNotation = _ref.compactNotation,
      compactNotation = _ref$compactNotation === void 0 ? false : _ref$compactNotation,
      minimumFractionDigits = _ref.minimumFractionDigits,
      maximumFractionDigits = _ref.maximumFractionDigits;
  return new Intl.NumberFormat(locale, currency ? {
    style: 'currency',
    currency: currency,
    minimumFractionDigits: minimumFractionDigits,
    maximumFractionDigits: maximumFractionDigits,
    signDisplay: showSign ? 'exceptZero' : undefined,
    notation: compactNotation ? 'compact' : undefined
  } : {
    minimumFractionDigits: minimumFractionDigits != null ? minimumFractionDigits : 2,
    maximumFractionDigits: maximumFractionDigits != null ? maximumFractionDigits : 2,
    signDisplay: showSign ? 'exceptZero' : undefined,
    notation: compactNotation ? 'compact' : undefined
  });
};

var getFractionalPart = function getFractionalPart(currency, customCurrencyDefinitions) {
  if (currency) {
    var definition = customCurrencyDefinitions.get(currency);
    if (definition) return definition.fractionalPart;
  }

  return getNumberFractionDigits(DEFAULT_LOCALE, currency);
};