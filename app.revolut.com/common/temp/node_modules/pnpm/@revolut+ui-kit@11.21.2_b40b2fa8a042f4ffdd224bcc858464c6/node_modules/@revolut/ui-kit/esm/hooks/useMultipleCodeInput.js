/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import React, { useCallback, useRef } from 'react';
import { times } from "../utils";

var createNewValue = function createNewValue(prevValue, valueIndex, newIndexValue, size) {
  var prevArrayValue = prevValue.split('');
  var stateCopy = [].concat(prevArrayValue);
  stateCopy[valueIndex] = newIndexValue;
  return times(function (index) {
    return stateCopy[index] || ' ';
  }, size).join('');
};

var INPUT_PATTERN = new RegExp('^[0-9]$');
var KEYBOARD_KEYS = {
  ARROW_LEFT: 'arrowleft',
  ARROW_RIGHT: 'arrowright'
};

var isCorrectValue = function isCorrectValue(value) {
  return INPUT_PATTERN.test(value);
};

export var useMultipleCodeInput = function useMultipleCodeInput(_ref) {
  var size = _ref.size,
      value = _ref.value,
      onChange = _ref.onChange,
      onKeyDown = _ref.onKeyDown,
      autoFocus = _ref.autoFocus;
  var inputRefs = useRef(times(function () {
    return /*#__PURE__*/React.createRef();
  }, size));

  var setFocusedInput = function setFocusedInput(index) {
    var _inputRefs$current$in, _inputRefs$current$in2;

    return (_inputRefs$current$in = inputRefs.current[index]) == null ? void 0 : (_inputRefs$current$in2 = _inputRefs$current$in.current) == null ? void 0 : _inputRefs$current$in2.focus();
  }; // eslint-disable-next-line react-hooks/exhaustive-deps


  var moveFocusForward = function moveFocusForward(index) {
    return setFocusedInput(Math.min(index + 1, size - 1));
  }; // eslint-disable-next-line react-hooks/exhaustive-deps


  var moveFocusBackward = function moveFocusBackward(index) {
    return setFocusedInput(Math.max(index - 1, 0));
  };

  var handleChange = useCallback(function (index) {
    return function (newInputValue) {
      if (!newInputValue && !isCorrectValue(value[index])) {
        if (index !== 0) {
          onChange(createNewValue(value, index - 1, newInputValue, size));
        }
      } else {
        onChange(createNewValue(value, index, newInputValue, size));
      }

      if (newInputValue) {
        moveFocusForward(index);
      } else if (!isCorrectValue(value[index])) {
        moveFocusBackward(index);
      }
    };
  }, [onChange, size, value, moveFocusBackward, moveFocusForward]);
  var handleKeyDown = useCallback(function (index) {
    return function (e) {
      var eventKey = e.key.toLowerCase();

      switch (eventKey) {
        case KEYBOARD_KEYS.ARROW_LEFT:
          {
            moveFocusBackward(index);
            break;
          }

        case KEYBOARD_KEYS.ARROW_RIGHT:
          {
            moveFocusForward(index);
            break;
          }
      }

      onKeyDown == null ? void 0 : onKeyDown(e);
    };
  }, [onKeyDown, moveFocusBackward, moveFocusForward]);
  return inputRefs.current.map(function (inputRef, index) {
    return {
      autoFocus: autoFocus && index === 0,
      ref: inputRef,
      key: "codeInput_" + index,
      isFilled: isCorrectValue(value[index]),
      onChange: handleChange(index),
      onKeyDown: handleKeyDown(index)
    };
  });
};