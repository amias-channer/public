/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { useEffect, useRef } from 'react';
import { useDocument } from "./useDocument";
import { isFunction, nonNullable, noop } from "../utils";
export var useOnClickAway = function useOnClickAway(callbackOrState) {
  if (callbackOrState === void 0) {
    callbackOrState = false;
  }

  for (var _len = arguments.length, refs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    refs[_key - 1] = arguments[_key];
  }

  var doc = useDocument();
  var movedRef = useRef(false);
  useEffect(function () {
    if (callbackOrState === false || doc === null) {
      return noop;
    }

    if (!isFunction(callbackOrState)) {
      console.warn('useOnClickAway: callback should be a function');
      return noop;
    }

    function handleTouchMove() {
      movedRef.current = true;
    }

    function handleClickAway(event) {
      if (event.defaultPrevented) {
        return;
      }

      if (movedRef.current) {
        movedRef.current = false;
        return;
      }

      var nodes = refs.map(function (ref) {
        return ref.current;
      }).filter(nonNullable);
      var target = event.target instanceof Element ? event.target : null;

      if (nodes.length === 0 || target === null) {
        return;
      }

      if (isFunction(callbackOrState) && doc != null && doc.documentElement.contains(target) && nodes.every(function (node) {
        return !node.contains(target);
      })) {
        callbackOrState(event);
      }
    }

    doc.addEventListener('mousedown', handleClickAway, {
      passive: true
    });
    doc.addEventListener('touchstart', handleClickAway, {
      passive: true
    });
    doc.addEventListener('touchmove', handleTouchMove, {
      passive: true
    });
    return function () {
      doc.removeEventListener('mousedown', handleClickAway);
      doc.removeEventListener('touchstart', handleClickAway);
      doc.removeEventListener('touchmove', handleTouchMove);
    };
  }, [callbackOrState, doc].concat(refs)); // eslint-disable-line react-hooks/exhaustive-deps
};