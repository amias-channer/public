/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { useCallback, useRef, useState } from 'react';
export var useOnHold = function useOnHold(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? 300 : _ref$delay,
      onClick = _ref.onClick;

  var _useState = useState(false),
      isHold = _useState[0],
      setIsHold = _useState[1];

  var timeout = useRef(null);
  var longPress = useRef(false);
  var hold = useCallback(function () {
    setIsHold(true);
    longPress.current = false;

    if (timeout.current === null) {
      timeout.current = setTimeout(function () {
        longPress.current = true;
      }, delay);
    }
  }, [setIsHold, delay]);
  var unhold = useCallback(function () {
    setIsHold(false);
    timeout.current && clearTimeout(timeout.current);
    timeout.current = null;
  }, [setIsHold]);
  var onClickHandler = useCallback(function (event) {
    if (timeout.current !== null) {
      clearTimeout(timeout.current);
      timeout.current = null;
    }

    if (longPress.current) {
      return false;
    }

    onClick == null ? void 0 : onClick(event);
  }, [onClick]);
  return {
    isHold: isHold,
    onMouseDown: hold,
    onTouchStart: hold,
    onMouseUp: unhold,
    onMouseLeave: unhold,
    onTouchEnd: unhold,
    onClick: onClickHandler
  };
};