/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { useCallback, useRef } from 'react';
import { KeyboardEventKey } from "../constants";
import { useKeyDown } from "./useKey";
import { useDocument } from "./useDocument";
import { useUniversalLayoutEffect } from "./useUniversalLayoutEffect";
var STEP = 16;

var isMultiTouch = function isMultiTouch(event) {
  return event.touches && event.touches.length > 1;
};

export function useResize(_ref) {
  var resizerRef = _ref.resizerRef,
      containerRef = _ref.containerRef,
      onResizeStart = _ref.onResizeStart,
      onResizeEnd = _ref.onResizeEnd;
  var doc = useDocument();
  var startPositions = useRef(null);
  var changeSize = useCallback(function (delta) {
    if (resizerRef.current && containerRef.current && (doc == null ? void 0 : doc.activeElement) === resizerRef.current) {
      containerRef.current.style.width = containerRef.current.getBoundingClientRect().width + delta + "px";
    }
  }, [resizerRef, doc, containerRef]);
  var increaseSize = useCallback(function () {
    return changeSize(STEP);
  }, [changeSize]);
  var decreaseSize = useCallback(function () {
    return changeSize(-STEP);
  }, [changeSize]);
  useKeyDown(KeyboardEventKey.ARROW_LEFT, increaseSize);
  useKeyDown(KeyboardEventKey.ARROW_RIGHT, decreaseSize);
  useUniversalLayoutEffect(function () {
    if (resizerRef.current && containerRef.current && doc) {
      var target = resizerRef.current;

      var onResize = function onResize(clientX) {
        if (startPositions.current !== null && containerRef.current) {
          containerRef.current.style.width = startPositions.current.width + startPositions.current.clientX - clientX + "px";
        }
      };

      var handleResizeMouse = function handleResizeMouse(event) {
        return onResize(event.clientX);
      };

      var handleResizeTouch = function handleResizeTouch(event) {
        if (isMultiTouch(event)) {
          return;
        }

        onResize(Math.round(event.touches[0].clientX));
      };

      var startResize = function startResize(clientX) {
        if (containerRef.current) {
          startPositions.current = {
            clientX: clientX,
            width: containerRef.current.getBoundingClientRect().width
          };
          doc.addEventListener('mousemove', handleResizeMouse, {
            passive: true
          });
          doc.addEventListener('touchmove', handleResizeTouch, {
            passive: true
          });
          onResizeStart();
        }
      };

      var handleResizeStartMouse = function handleResizeStartMouse(event) {
        startResize(event.clientX);
      };

      var handleResizeStartTouch = function handleResizeStartTouch(event) {
        if (isMultiTouch(event)) {
          return;
        }

        startResize(Math.round(event.touches[0].clientX));
      };

      var handleResizeEnd = function handleResizeEnd() {
        doc.removeEventListener('mousemove', handleResizeMouse);
        doc.removeEventListener('touchmove', handleResizeTouch);
        onResizeEnd();
      };

      target.addEventListener('mousedown', handleResizeStartMouse, {
        passive: true
      });
      target.addEventListener('touchstart', handleResizeStartTouch, {
        passive: true
      });
      doc.addEventListener('mouseup', handleResizeEnd, {
        passive: true
      });
      doc.addEventListener('touchend', handleResizeEnd, {
        passive: true
      });
      return function () {
        target.removeEventListener('mousedown', handleResizeStartMouse);
        target.removeEventListener('touchstart', handleResizeStartTouch);
        doc.removeEventListener('mouseup', handleResizeEnd);
        doc.removeEventListener('touchend', handleResizeEnd);
        doc.removeEventListener('mousemove', handleResizeMouse);
        doc.removeEventListener('touchmove', handleResizeTouch);
      };
    }
  }, [resizerRef.current, containerRef.current, onResizeStart, onResizeEnd]);
}