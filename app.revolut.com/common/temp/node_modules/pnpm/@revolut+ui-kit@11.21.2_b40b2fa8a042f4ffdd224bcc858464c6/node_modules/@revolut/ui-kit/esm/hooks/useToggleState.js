/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { useCallback } from 'react';
import { noop } from "../utils";
import { useControlled } from "./useControlled";
export function useToggle(options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$disabled = _options.disabled,
      isDisabled = _options$disabled === void 0 ? false : _options$disabled,
      _options$defaultState = _options.defaultState,
      defaultState = _options$defaultState === void 0 ? false : _options$defaultState,
      controlledState = _options.state,
      _options$onChange = _options.onChange,
      onChange = _options$onChange === void 0 ? noop : _options$onChange;

  var _useControlled = useControlled({
    value: controlledState != null ? controlledState : undefined,
    defaultValue: defaultState,
    onChange: onChange
  }),
      value = _useControlled[0],
      setValue = _useControlled[1];

  var toggle = useCallback(function (nextState) {
    if (nextState === void 0) {
      nextState = !value;
    }

    if (isDisabled !== true) {
      setValue(nextState);
    }
  }, [isDisabled, setValue, value]);
  return [value, toggle];
}
/** @deprecated Renamed to `useToggle` */

export var useToggleState = useToggle;