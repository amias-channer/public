/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useCallback } from 'react';
import { useVirtual } from 'react-virtual';
import { useWindow } from "./useWindow";
import { useWindowResizeObserver } from "./useWindowResizeObserver";
import { useGlobalScrollRef } from "./useGlobalScrollRef";

/**
 * Hook designed for virtual scrolling inside current viewport.
 * Based on [react-virtual](https://github.com/tannerlinsley/react-virtual)
 */
export function useVirtualViewport(_ref) {
  var _ref$horizontal = _ref.horizontal,
      horizontal = _ref$horizontal === void 0 ? false : _ref$horizontal,
      parentRef = _ref.parentRef,
      scrollRef = _ref.scrollRef,
      overscan = _ref.overscan,
      rest = _objectWithoutPropertiesLoose(_ref, ["horizontal", "parentRef", "scrollRef", "overscan"]);

  var win = useWindow();
  var globalScrollRef = useGlobalScrollRef();
  var scrollOffsetFn = useCallback(function () {
    var parent = parentRef.current;

    if (parent) {
      var rect = parent.getBoundingClientRect();
      return (horizontal ? rect.left : rect.top) * -1;
    }

    throw new Error('Check `parentRef` element');
  }, [parentRef, horizontal]);
  var scrollToFn = useCallback(function (offset) {
    if (win) {
      if (horizontal) win.scroll({
        left: offset
      });else win.scroll({
        top: offset
      });
    }
  }, [horizontal, win]);
  return useVirtual(_extends({}, rest, {
    horizontal: horizontal,
    parentRef: parentRef,
    scrollToFn: scrollToFn,
    overscan: process.env.NODE_ENV === 'test' ? Infinity : overscan,
    // Types incorrectly expects ref with `HTMLElement`, but `HTMLDocument` should be also allowed
    // @ts-expect-error
    onScrollElement: scrollRef || globalScrollRef,
    scrollOffsetFn: scrollOffsetFn,
    useObserver: useWindowResizeObserver
  }));
}