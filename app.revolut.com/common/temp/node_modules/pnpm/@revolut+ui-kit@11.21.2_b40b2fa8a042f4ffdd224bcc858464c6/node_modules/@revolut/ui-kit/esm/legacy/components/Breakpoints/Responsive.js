/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { useContext } from 'react';
import { isFunction, isString } from "../../../utils";
import { Context } from "./context";
import { useBreakpoints } from "./useBreakpoints";

var match = function match(input, key) {
  if (input === void 0) {
    input = [];
  }

  if (key === void 0) {
    key = '';
  }

  if (Object.keys(input).length === 0) {
    return false;
  }

  var _ref = isString(key) ? key.split('-') : [key],
      _ref$ = _ref[0],
      from = _ref$ === void 0 ? '*' : _ref$,
      to = _ref[1];

  return (from === '*' || input.includes(from)) && !input.includes(to);
};
/** @deprecated */


export function Responsive(_ref2) {
  var maxWidth = _ref2.maxWidth,
      _ref2$minWidth = _ref2.minWidth,
      minWidth = _ref2$minWidth === void 0 ? maxWidth ? 0 : undefined : _ref2$minWidth,
      _ref2$breakpoint = _ref2.breakpoint,
      breakpoint = _ref2$breakpoint === void 0 ? maxWidth ? 'minWidth-maxWidth' : 'minWidth' : _ref2$breakpoint,
      children = _ref2.children;
  var context = useContext(Context);
  var isContextMatched = match(context.matches, breakpoint);
  var current = useBreakpoints({
    minWidth: minWidth,
    maxWidth: maxWidth
  }, [minWidth, maxWidth]);
  var isCurrentMatched = match(current.matches, breakpoint);
  var isMatched = isContextMatched || isCurrentMatched;

  if (isFunction(children)) {
    return children({
      isMatched: isMatched
    });
  }

  if (isMatched) {
    return children;
  }

  return null;
}