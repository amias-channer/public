/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { useState } from 'react';
import { findLastIndex, indexOf, noop, px, toArray } from "../../../utils";
import { useUniversalLayoutEffect, useWindow } from "../../../hooks";
import { INITIAL_STATE } from "./constants";

var listenForChanges = function listenForChanges(target, fn) {
  fn();
  target.addListener(fn);
  return function () {
    return target.removeListener(fn);
  };
};

var updateMatches = function updateMatches(key, mql) {
  return function (prev) {
    if (mql.matches) {
      return [].concat(prev, [key]);
    }

    return prev.filter(function (item) {
      return item !== key;
    });
  };
};

var lastIndex = function lastIndex(input, matches) {
  return findLastIndex(function (item) {
    return matches.includes(indexOf(item, input));
  }, toArray(input));
};
/** @deprecated */


export function useBreakpoints(input, deps) {
  if (input === void 0) {
    input = [];
  }

  if (deps === void 0) {
    deps = [input];
  }

  var win = useWindow();

  var _useState = useState(INITIAL_STATE.matches),
      matches = _useState[0],
      setMatches = _useState[1];

  useUniversalLayoutEffect(function () {
    setMatches(INITIAL_STATE.matches);
    var listeners = Object.keys(input).map(function (key) {
      if (key in input && win && win.matchMedia) {
        var value = input[key];
        var index = indexOf(value, input);
        var query = "(min-width: " + px(value === null ? 0 : value) + ")";
        var mql = win.matchMedia(query);
        return listenForChanges(mql, function () {
          return setMatches(updateMatches(String(index) === key ? index : key, mql));
        });
      }

      return noop;
    });
    return function () {
      return listeners.map(function (fn) {
        return fn();
      });
    };
  }, [win].concat(deps)); // eslint-disable-line react-hooks/exhaustive-deps

  return {
    matches: matches,
    index: lastIndex(input, matches)
  };
}