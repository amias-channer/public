/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _CARD_STYLES;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { Color, ElevationLevel, Radius, Transition } from "../../../constants";
import { createShadow } from "../../../styles";

var hoverStyle = function hoverStyle(style) {
  return {
    "&:hover:not([aria-disabled='true']):not([aria-pressed='true'])": style
  };
};

var INTERACTION_STYLE = {
  "&[role='button']": {
    cursor: 'pointer'
  },
  "&[aria-disabled='true']": {
    cursor: 'default',
    '& > *': {
      opacity: 0.5
    }
  },
  outline: 'none',
  border: '1px solid transparent',
  "&:focus:not([aria-disabled='true']), &[aria-pressed='true']": {
    borderColor: Color.PRIMARY
  }
};

var BASE_STYLE = _extends({}, INTERACTION_STYLE, {
  color: Color.FOREGROUND,
  borderRadius: Radius.CARD,

  /**
   * TODO: Just use key in theme when `styled-system` will support transition inside `css` function
   * @see https://github.com/styled-system/styled-system/pull/1378
   */
  transition: function transition(theme) {
    var _theme$transitions;

    return (_theme$transitions = theme.transitions) == null ? void 0 : _theme$transitions[Transition.CARD];
  }
});

var FILL_STYLE = {
  backgroundColor: Color.BACKGROUND
};

var HOVER_FILL_STYLE = _extends({
  boxShadow: createShadow(Color.BLACK, ElevationLevel.NONE)
}, hoverStyle(_extends({}, FILL_STYLE, {
  boxShadow: createShadow(Color.BLACK, ElevationLevel.HIGHER)
})));

var DEFAULT_STYLE = _extends({
  boxShadow: createShadow(Color.BLACK, ElevationLevel.LEVEL)
}, BASE_STYLE, FILL_STYLE);

var ELEVATED_STYLE = _extends({}, DEFAULT_STYLE, hoverStyle({
  boxShadow: createShadow(Color.BLACK, ElevationLevel.HIGHER)
}));

var FLAT_STYLE = _extends({}, BASE_STYLE, HOVER_FILL_STYLE);

var PLAIN_STYLE = _extends({}, BASE_STYLE, FILL_STYLE);

var GHOST_STYLE = _extends({}, BASE_STYLE, {
  borderColor: Color.GREY_TONE_10
});

var OUTLINE_STYLE = _extends({}, GHOST_STYLE, HOVER_FILL_STYLE);

export var CardVariant = {
  DEFAULT: 'default',
  FLAT: 'flat',
  OUTLINE: 'outline',
  ELEVATED: 'elevated',
  PLAIN: 'plain',
  GHOST: 'ghost'
};
export var CARD_STYLES = (_CARD_STYLES = {}, _CARD_STYLES[CardVariant.DEFAULT] = DEFAULT_STYLE, _CARD_STYLES[CardVariant.FLAT] = FLAT_STYLE, _CARD_STYLES[CardVariant.OUTLINE] = OUTLINE_STYLE, _CARD_STYLES[CardVariant.ELEVATED] = ELEVATED_STYLE, _CARD_STYLES[CardVariant.PLAIN] = PLAIN_STYLE, _CARD_STYLES[CardVariant.GHOST] = GHOST_STYLE, _CARD_STYLES);