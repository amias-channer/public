/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { Fragment } from 'react';
import { isString } from "../../../utils";
import { Box } from "../../../components/Box";
import { Flex } from "../../../components/Flex";
import { Text } from "../../../components/Text";

var getCompType = function getCompType(el) {
  return el ? el.originalType || el.type : null;
};

var isCompEquals = function isCompEquals(a, b) {
  return getCompType(a) === getCompType(b);
};

function getFilteredChildren(children) {
  return React.Children.toArray(children).filter(function (child) {
    if (! /*#__PURE__*/React.isValidElement(child)) {
      return false;
    }

    if (isCompEquals(child, /*#__PURE__*/React.createElement(Text, null)) || isCompEquals(child, /*#__PURE__*/React.createElement(Chain.Item, null))) {
      var _child$props;

      var childChildren = child == null ? void 0 : (_child$props = child.props) == null ? void 0 : _child$props.children;
      return !(childChildren == null || isString(childChildren) && childChildren.trim().length === 0);
    }

    var childType = child == null ? void 0 : child.type; // @ts-expect-error
    // TODO: add helper to @revolut/icons

    return Boolean(childType && (childType == null ? void 0 : childType.variants)); // icon
  });
}

var getFormattedSeparator = function getFormattedSeparator(separator, space) {
  return separator ? /*#__PURE__*/React.createElement(React.Fragment, null, space, separator, space) : space;
};
/** @deprecated use `chain` helper, will be removed with `Chain` */


/** @deprecated use `chain` helper, will be removed with `Chain` */
var ChainItem = function ChainItem(props) {
  return /*#__PURE__*/React.createElement(Text, _extends({
    display: "inline",
    variant: null
  }, props));
};
/** @deprecated use `chain` helper, will be removed with `Chain` */


/** @deprecated use `chain` or `textChain` helpers */
export function Chain(_ref) {
  var _ref$separator = _ref.separator,
      separator = _ref$separator === void 0 ? '·' : _ref$separator,
      separatorColor = _ref.separatorColor,
      _ref$space = _ref.space,
      space = _ref$space === void 0 ? '  ' : _ref$space,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["separator", "separatorColor", "space", "children"]);

  var filteredChildren = getFilteredChildren(children);
  var formattedSeparator = getFormattedSeparator(separator, space);

  if (filteredChildren.length === 0) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Flex, _extends({
    display: "inline-flex",
    alignItems: "center",
    flexWrap: "wrap"
  }, rest), filteredChildren.map(function (child, index) {
    return /*#__PURE__*/React.createElement(Fragment, {
      key: child == null ? void 0 : child.key
    }, index !== 0 && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Chain.Item, {
      color: separatorColor || child.props.color
    }, formattedSeparator)), /*#__PURE__*/React.createElement(Box, null, child));
  }));
}
/** @deprecated use `chain` helper, will be removed with `Chain` */

Chain.Item = ChainItem;