/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import css from '@styled-system/css';
import { alignSelf, color, flex, maxWidth, order, space, width } from 'styled-system';
import { Color, Transition } from "../../../constants";
import { circleButtonElevation } from "../../../styles";
import { Base } from "../../../components/Base";
import { Flex } from "../../../components/Flex";
import { Text } from "../../../components/Text";
import { ButtonBase } from "../../../components/ButtonBase";
import { CircleButtonSizeStyle } from "./sizes";
import { circleButtonSize, circleButtonVariant } from "./styles";
var SCALE_FACTOR = 60 / 56;
var SIZE_LABEL_SPACE = {
  sm: 's-8',
  md: 's-16'
};
var CircleIconBox = /*#__PURE__*/styled(Base).withConfig({
  displayName: "CircleButton__CircleIconBox",
  componentId: "sc-1iyexj0-0"
})(["position:relative;display:flex;align-items:center;justify-content:center;", " ", ""], space, circleButtonSize);
var CircleIconBackground = /*#__PURE__*/styled(Base).withConfig({
  displayName: "CircleButton__CircleIconBackground",
  componentId: "sc-1iyexj0-1"
})(["position:absolute;height:100%;width:100%;border-radius:inherit;", " ", " ", " color:inherit;"], circleButtonElevation, circleButtonVariant, css({
  transition: function transition(theme) {
    var _theme$transitions;

    return (_theme$transitions = theme.transitions) == null ? void 0 : _theme$transitions[Transition.CIRCLE_BUTTON];
  }
}));
var CircleIconContent = /*#__PURE__*/styled('span').withConfig({
  displayName: "CircleButton__CircleIconContent",
  componentId: "sc-1iyexj0-2"
})(["pointer-events:none;position:relative;", " &&{background-color:transparent;border:none;}"], circleButtonVariant);
var CircleButtonBase = /*#__PURE__*/styled(ButtonBase).withConfig({
  displayName: "CircleButton__CircleButtonBase",
  componentId: "sc-1iyexj0-3"
})(["text-align:center;", " ", " ", " ", " ", " ", " ", " ", " ", ""], css({
  color: Color.GREY_TONE_20,
  '&:hover': {
    color: Color.BLACK
  },
  transition: function transition(theme) {
    var _theme$transitions2;

    return (_theme$transitions2 = theme.transitions) == null ? void 0 : _theme$transitions2[Transition.TEXT];
  }
}), flex, order, alignSelf, color, width, maxWidth, function (props) {
  var _ref;

  return props.scaleOnHover && (_ref = {}, _ref["&:hover " + CircleIconBackground] = {
    transform: "scale(" + props.scale + ")"
  }, _ref);
}, space);

/** @deprecated Use `Button` */
export var CircleButton = function CircleButton(_ref2) {
  var disabled = _ref2.disabled,
      _ref2$textStyle = _ref2.textStyle,
      labelTextStyle = _ref2$textStyle === void 0 ? 'small' : _ref2$textStyle,
      _ref2$elevation = _ref2.elevation,
      elevation = _ref2$elevation === void 0 ? 'default' : _ref2$elevation,
      _ref2$variant = _ref2.variant,
      variant = _ref2$variant === void 0 ? 'default' : _ref2$variant,
      children = _ref2.children,
      _ref2$label = _ref2.label,
      label = _ref2$label === void 0 ? null : _ref2$label,
      _ref2$size = _ref2.size,
      size = _ref2$size === void 0 ? CircleButtonSizeStyle.MD : _ref2$size,
      _ref2$labelSpace = _ref2.labelSpace,
      labelSpace = _ref2$labelSpace === void 0 ? SIZE_LABEL_SPACE[size] : _ref2$labelSpace,
      _ref2$scale = _ref2.scale,
      scale = _ref2$scale === void 0 ? SCALE_FACTOR : _ref2$scale,
      _ref2$scaleOnHover = _ref2.scaleOnHover,
      scaleOnHover = _ref2$scaleOnHover === void 0 ? true : _ref2$scaleOnHover,
      rest = _objectWithoutPropertiesLoose(_ref2, ["disabled", "textStyle", "elevation", "variant", "children", "label", "size", "labelSpace", "scale", "scaleOnHover"]);

  return /*#__PURE__*/React.createElement(CircleButtonBase, _extends({}, rest, {
    scale: scale,
    scaleOnHover: scaleOnHover,
    disabled: disabled
  }), /*#__PURE__*/React.createElement(Flex, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(CircleIconBox, {
    size: size,
    mb: label ? labelSpace : undefined
  }, /*#__PURE__*/React.createElement(CircleIconBackground, {
    variant: variant,
    elevation: elevation,
    disabled: disabled
  }), /*#__PURE__*/React.createElement(CircleIconContent, {
    variant: variant,
    "aria-disabled": disabled
  }, children)), label && /*#__PURE__*/React.createElement(Text, {
    variant: labelTextStyle,
    whiteSpace: "normal",
    ellipsis: true
  }, label)));
};
CircleButton.displayName = 'CircleButton';