/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { noop, renderNothing } from "../../../utils";
import { useToggleState } from "../../../hooks";
import { TransitionCollapse } from "../../../components/Transitions";

/** @deprecated Use `Toggle` and `TransitionCollapse` directly or `TextWidget` for expandable text */
export var Collapsible = function Collapsible(_ref) {
  var _ref$defaultIsOpen = _ref.defaultIsOpen,
      defaultIsOpen = _ref$defaultIsOpen === void 0 ? false : _ref$defaultIsOpen,
      controlledOpen = _ref.isOpen,
      _ref$renderToggle = _ref.renderToggle,
      renderToggle = _ref$renderToggle === void 0 ? renderNothing : _ref$renderToggle,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      children = _ref.children,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      rest = _objectWithoutPropertiesLoose(_ref, ["defaultIsOpen", "isOpen", "renderToggle", "disabled", "children", "onChange"]);

  var _useToggleState = useToggleState({
    defaultState: defaultIsOpen,
    state: controlledOpen,
    disabled: disabled,
    onChange: onChange
  }),
      isOpen = _useToggleState[0],
      toggle = _useToggleState[1];

  return /*#__PURE__*/React.createElement(React.Fragment, null, renderToggle({
    isOpen: isOpen,
    toggle: toggle
  }), /*#__PURE__*/React.createElement(TransitionCollapse, _extends({
    "in": isOpen,
    appear: defaultIsOpen !== true
  }, rest), children));
};