/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable react/no-unused-state */
import React, { Component, useCallback, useEffect, useRef } from 'react';
import * as Icons from '@revolut/icons';
import { ModifiersUtils } from 'react-day-picker';
import { noop } from "../../../utils";
import { useLatestRef } from "../../../hooks";
import { DatePickerSelect } from "./DatePickerSelect";
import { isEqualDates } from "./utils";
import { Input } from "../Input";

var defaultRenderInputAction = function defaultRenderInputAction(_ref) {
  var isOpen = _ref.isOpen;
  return /*#__PURE__*/React.createElement(Icons.ShevronDown, {
    size: 16,
    color: isOpen ? 'primary' : 'grey-50',
    transform: isOpen ? 'rotate(180)' : ''
  });
};

var getModifiersFlags = function getModifiersFlags(date, modifiers) {
  return ModifiersUtils.getModifiersForDay(date, modifiers).reduce(function (acc, key) {
    var _extends2;

    return _extends({}, acc, (_extends2 = {}, _extends2[key] = true, _extends2));
  }, {});
};

var DatePickerInputBaseToggle = /*#__PURE__*/function (_Component) {
  _inheritsLoose(DatePickerInputBaseToggle, _Component);

  function DatePickerInputBaseToggle() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      value: '',
      selectedDay: _this.props.selectedDay
    };

    _this.updateStateFromProps = function () {
      var _this$props = _this.props,
          selectedDay = _this$props.selectedDay,
          format = _this$props.format,
          parseDate = _this$props.parseDate;
      var value = _this.state.value;

      if (!isEqualDates(selectedDay, parseDate(value, format))) {
        _this.setState({
          value: '',
          selectedDay: null
        });
      }
    };

    _this.handleChange = function (event) {
      var _this$props2 = _this.props,
          format = _this$props2.format,
          modifiers = _this$props2.modifiers,
          getPickerRef = _this$props2.getPickerRef,
          onDayChange = _this$props2.onDayChange,
          parseDate = _this$props2.parseDate;

      if (event.target.value === '') {
        onDayChange(null);

        _this.setState({
          value: '',
          selectedDay: null
        });

        return;
      }

      var date = parseDate(event.target.value, format);

      if (date !== null) {
        var picker = getPickerRef();
        var modifiersFlags = getModifiersFlags(date, modifiers);
        onDayChange(date, modifiersFlags);

        if (picker && !modifiersFlags.isDisabled) {
          picker.showMonth(date);

          _this.setState({
            selectedDay: date
          });
        }
      }

      _this.setState({
        value: event.target.value
      });
    };

    _this.handleFocusChange = function () {
      if (!_this.props.isOpen) return;

      var _ref2 = document || {},
          activeElement = _ref2.activeElement,
          body = _ref2.body;

      var _ref3 = _this.props.anchorRef || {},
          inputEl = _ref3.current;

      var _ref4 = _this.props.dropdownRef || {},
          dropdownEl = _ref4.current;

      if (activeElement === body) return;
      if (activeElement === inputEl) return;
      if (dropdownEl && dropdownEl.contains(activeElement)) return;

      _this.props.toggle(false);
    };

    _this.handleBlur = function () {
      _this.updateStateFromProps();
    };

    _this.handleFocus = function (e) {
      _this.props.onFocus(e);

      _this.props.toggle(true);
    };

    return _this;
  }

  var _proto = DatePickerInputBaseToggle.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.updateStateFromProps(); // eslint-disable-next-line no-restricted-properties

    document.addEventListener('focus', this.handleFocusChange, true);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    // eslint-disable-next-line no-restricted-properties
    document.removeEventListener('focus', this.handleFocusChange, true);
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        isOpen = _this$props3.isOpen,
        anchorRef = _this$props3.anchorRef,
        autoFocus = _this$props3.autoFocus,
        label = _this$props3.label,
        placeholder = _this$props3.placeholder,
        disabled = _this$props3.disabled,
        error = _this$props3.error,
        hasError = _this$props3.hasError,
        message = _this$props3.message,
        maskPattern = _this$props3.maskPattern,
        input = _this$props3.input,
        variant = _this$props3.variant,
        size = _this$props3.size,
        renderInputAction = _this$props3.renderInputAction,
        testId = _this$props3['data-testid'];
    return /*#__PURE__*/React.createElement(Input, _extends({
      ref: anchorRef,
      autoFocus: autoFocus,
      label: label,
      placeholder: placeholder,
      disabled: disabled,
      error: error,
      hasError: hasError,
      message: message,
      maskPattern: maskPattern,
      focused: isOpen,
      "data-testid": testId,
      variant: variant,
      size: size,
      renderAction: function renderAction(state) {
        return renderInputAction(_extends({}, state, {
          isOpen: isOpen
        }));
      }
    }, input, {
      value: this.state.value,
      onChange: this.handleChange,
      onBlur: this.handleBlur,
      onFocus: this.handleFocus
    }));
  };

  return DatePickerInputBaseToggle;
}(Component);

DatePickerInputBaseToggle.defaultProps = {
  dropdownRef: null,
  selectedDay: null,
  input: {},
  onBlur: noop,
  onFocus: noop,
  renderInputAction: defaultRenderInputAction
};

DatePickerInputBaseToggle.getDerivedStateFromProps = function (props, state) {
  if (isEqualDates(props.selectedDay, state.selectedDay)) {
    return null;
  }

  return {
    selectedDay: props.selectedDay,
    value: props.formatDate(props.selectedDay, props.format)
  };
};

export var DatePickerInputToggle = function DatePickerInputToggle(_ref5) {
  var onBlur = _ref5.onBlur,
      props = _objectWithoutPropertiesLoose(_ref5, ["onBlur"]);

  var previousIsOpen = useLatestRef(props.isOpen).current;
  var handleBlur = useCallback(function () {
    if (!props.anchorRef.current) return;
    if (typeof onBlur !== 'function') return;
    var event = new FocusEvent('blur', {
      view: window
    });
    props.anchorRef.current.dispatchEvent(event);
    onBlur(event);
  }, [onBlur, props.anchorRef]);
  useEffect(function () {
    if (previousIsOpen && !props.isOpen) handleBlur();
  }, [previousIsOpen, props.isOpen, handleBlur]);
  return /*#__PURE__*/React.createElement(DatePickerInputBaseToggle, props);
};
export var DatePickerInput = function DatePickerInput(_ref6) {
  var _ref6$format = _ref6.format,
      format = _ref6$format === void 0 ? 'y-MM-dd' : _ref6$format,
      _ref6$placement = _ref6.placement,
      placement = _ref6$placement === void 0 ? 'bottom' : _ref6$placement,
      props = _objectWithoutPropertiesLoose(_ref6, ["format", "placement"]);

  var dropdownRef = useRef(null);
  return /*#__PURE__*/React.createElement(DatePickerSelect, _extends({
    renderToggle: function renderToggle(pickerProps) {
      return /*#__PURE__*/React.createElement(DatePickerInputToggle, _extends({}, pickerProps, {
        dropdownRef: dropdownRef
      }));
    },
    format: format,
    placement: placement
  }, props, {
    dropdown: _extends({}, props.dropdown, {
      ref: dropdownRef
    })
  }));
};