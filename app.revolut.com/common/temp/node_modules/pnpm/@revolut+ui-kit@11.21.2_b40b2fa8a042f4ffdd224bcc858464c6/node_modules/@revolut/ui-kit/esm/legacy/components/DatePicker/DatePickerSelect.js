/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useRef } from 'react';
import { useToggleState } from "../../../hooks";
import { Box } from "../../../components/Box";
import { Dropdown } from "../../../components/Dropdown";
import { TextButton } from "../../../components/TextButton";
import { PREVENT_OVERFLOW_HORIZONTAL } from "../Popper/constants";
import { DatePicker } from "./DatePicker";

var defaultRenderToggle = function defaultRenderToggle(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      anchorRef = _ref.anchorRef,
      label = _ref.label,
      toggle = _ref.toggle,
      disabled = _ref.disabled;

  return /*#__PURE__*/React.createElement(TextButton, {
    ref: anchorRef,
    width: "100%",
    disabled: disabled,
    onClick: function onClick() {
      return toggle();
    }
  }, label);
};

var defaultRenderLabel = function defaultRenderLabel(_ref2) {
  var selectedDay = _ref2.selectedDay,
      formatDate = _ref2.formatDate,
      format = _ref2.format,
      placeholder = _ref2.placeholder;
  return selectedDay ? formatDate(selectedDay, format) : placeholder;
};

export function DatePickerSelect(_ref3) {
  var _ref3$renderLabel = _ref3.renderLabel,
      renderLabel = _ref3$renderLabel === void 0 ? defaultRenderLabel : _ref3$renderLabel,
      _ref3$renderToggle = _ref3.renderToggle,
      renderToggle = _ref3$renderToggle === void 0 ? defaultRenderToggle : _ref3$renderToggle,
      _ref3$renderHeader = _ref3.renderHeader,
      renderHeader = _ref3$renderHeader === void 0 ? function () {
    return null;
  } : _ref3$renderHeader,
      _ref3$dropdown = _ref3.dropdown,
      dropdown = _ref3$dropdown === void 0 ? {} : _ref3$dropdown,
      _ref3$defaultIsOpen = _ref3.defaultIsOpen,
      defaultIsOpen = _ref3$defaultIsOpen === void 0 ? false : _ref3$defaultIsOpen,
      controlledOpen = _ref3.isOpen,
      _ref3$disabled = _ref3.disabled,
      disabled = _ref3$disabled === void 0 ? false : _ref3$disabled,
      _ref3$placement = _ref3.placement,
      placement = _ref3$placement === void 0 ? 'bottom-start' : _ref3$placement,
      _ref3$format = _ref3.format,
      format = _ref3$format === void 0 ? 'd MMMM y' : _ref3$format,
      _ref3$placeholder = _ref3.placeholder,
      placeholder = _ref3$placeholder === void 0 ? 'Select date' : _ref3$placeholder,
      rest = _objectWithoutPropertiesLoose(_ref3, ["renderLabel", "renderToggle", "renderHeader", "dropdown", "defaultIsOpen", "isOpen", "disabled", "placement", "format", "placeholder"]);

  var buttonRef = useRef(null);

  var _useToggleState = useToggleState({
    defaultState: defaultIsOpen,
    state: controlledOpen,
    disabled: disabled
  }),
      isOpen = _useToggleState[0],
      toggle = _useToggleState[1];

  return /*#__PURE__*/React.createElement(DatePicker, _extends({
    format: format,
    placeholder: placeholder,
    disabled: disabled,
    onDayClick: function onDayClick() {
      return toggle(false);
    },
    onClearClick: function onClearClick() {
      return toggle(false);
    },
    renderWrapper: function renderWrapper(_ref4) {
      var picker = _ref4.picker,
          pickerState = _objectWithoutPropertiesLoose(_ref4, ["picker"]);

      return /*#__PURE__*/React.createElement(React.Fragment, null, renderToggle(_extends({}, pickerState, {
        anchorRef: buttonRef,
        label: renderLabel(_extends({}, pickerState, {
          placeholder: placeholder
        })),
        isOpen: isOpen,
        toggle: toggle,
        disabled: disabled
      })), /*#__PURE__*/React.createElement(Dropdown, _extends({
        anchorRef: buttonRef,
        maxHeight: "100vh",
        width: "auto",
        isOpen: isOpen,
        preventOverflow: PREVENT_OVERFLOW_HORIZONTAL,
        flip: false,
        placement: placement,
        onClickAway: function onClickAway() {
          return toggle(false);
        }
      }, dropdown), renderHeader(), /*#__PURE__*/React.createElement(Box, {
        pt: "s-24",
        pb: "s-16",
        px: "s-16"
      }, picker)));
    }
  }, rest));
}