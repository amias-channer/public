/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import { Component } from 'react';
import { isValid, toDate } from 'date-fns';
import { noop, renderNothing } from "../../../utils";
import { formatDate, parseDate } from "./utils";
export var DatePickerState = /*#__PURE__*/function (_Component) {
  _inheritsLoose(DatePickerState, _Component);

  function DatePickerState() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      isControlled: _this.props.value !== undefined,
      value: _this.props.defaultValue,
      today: new Date(Date.now())
    };
    _this.pickerRef = null;

    _this.getPickerRef = function () {
      return _this.pickerRef;
    };

    _this.setPickerRef = function (ref) {
      _this.pickerRef = ref;
    };

    _this.handleChange = function (day, modifiers, event) {
      if (modifiers === void 0) {
        modifiers = {};
      }

      if (modifiers.isDisabled) {
        return;
      }

      if (event) {
        event.preventDefault();

        if (event.type === 'click') {
          _this.props.onDayClick(day, modifiers, event);
        }
      }

      if (!_this.state.isControlled) {
        _this.setState({
          value: day
        });
      }

      _this.props.onChange(day, modifiers);
    };

    _this.getSelectedDay = function () {
      var currentValue = _this.state.isControlled ? _this.props.value : _this.state.value;
      return isValid(currentValue) ? toDate(currentValue) : null;
    };

    return _this;
  }

  var _proto = DatePickerState.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        value = _this$props.value,
        modifiers = _this$props.modifiers,
        disabledDays = _this$props.disabledDays,
        onDayClick = _this$props.onDayClick,
        rest = _objectWithoutPropertiesLoose(_this$props, ["children", "value", "modifiers", "disabledDays", "onDayClick"]);

    var today = this.state.today;
    var selectedDay = this.getSelectedDay();
    var viewMonth = selectedDay === null ? today : selectedDay;
    var baseModifiers = {
      isToday: today,
      isPast: {
        before: today
      },
      isSelected: selectedDay,
      isDisabled: disabledDays
    };
    return children(_extends({
      selectedDay: selectedDay,
      initialMonth: viewMonth,
      month: this.state.isControlled ? viewMonth : undefined,
      setPickerRef: this.setPickerRef,
      getPickerRef: this.getPickerRef,
      changeDay: this.handleChange,
      onDayChange: this.handleChange,
      onDayClick: this.handleChange,
      modifiers: _extends({}, baseModifiers, modifiers),
      selectedDays: selectedDay,
      disabledDays: disabledDays
    }, rest));
  };

  return DatePickerState;
}(Component);
DatePickerState.defaultProps = {
  format: 'y-MM-dd',
  firstDayOfWeek: 1,
  parseDate: parseDate,
  formatDate: formatDate,
  children: renderNothing,
  onChange: noop,
  onDayClick: noop,
  defaultValue: undefined,
  value: undefined,
  modifiers: null
};