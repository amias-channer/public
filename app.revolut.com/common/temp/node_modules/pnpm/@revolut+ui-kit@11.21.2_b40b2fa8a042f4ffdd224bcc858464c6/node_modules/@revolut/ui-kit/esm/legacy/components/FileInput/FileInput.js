/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useRef } from 'react';
import { noop } from "../../../utils";
import { ButtonBase } from "../../../components/ButtonBase";
/** @deprecated */

export function FileInput(_ref) {
  var className = _ref.className,
      children = _ref.children,
      _ref$accept = _ref.accept,
      accept = _ref$accept === void 0 ? '*' : _ref$accept,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === void 0 ? noop : _ref$onClick,
      value = _ref.value,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      rest = _objectWithoutPropertiesLoose(_ref, ["className", "children", "accept", "onChange", "onClick", "value", "disabled"]);

  var hasChildren = children !== null;
  var inputRef = useRef(null);

  function openFileDialog() {
    if (inputRef.current !== null) {
      inputRef.current.click();
    }
  } // This is required to enable selecting same file twice.
  // Thats why in previous implementation change event listener was applied
  // via browser addEventListener method and not with react onChange


  function resetInputValue() {
    if (inputRef.current !== null) {
      inputRef.current.value = null;
    }
  }

  function handleButtonClick(event) {
    onClick(event);
    resetInputValue();
    openFileDialog();
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, hasChildren && /*#__PURE__*/React.createElement(ButtonBase, {
    className: className,
    onClick: handleButtonClick,
    disabled: disabled
  }, children), /*#__PURE__*/React.createElement("input", _extends({
    className: hasChildren ? undefined : className,
    type: "file",
    ref: inputRef,
    accept: accept,
    hidden: hasChildren,
    onChange: onChange,
    onClick: resetInputValue,
    disabled: disabled
  }, rest)));
}