/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { noop } from "../../../utils";
import { FileInput } from "./FileInput";
import { processImage as defaultProcessImage, readFileAsDataUrl } from "./utils";
/** @deprecated */

export function ImageInput(_ref) {
  var _ref$readFile = _ref.readFile,
      readFile = _ref$readFile === void 0 ? readFileAsDataUrl : _ref$readFile,
      _ref$processImage = _ref.processImage,
      processImage = _ref$processImage === void 0 ? defaultProcessImage : _ref$processImage,
      _ref$processImageOpti = _ref.processImageOptions,
      processImageOptions = _ref$processImageOpti === void 0 ? {} : _ref$processImageOpti,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      _ref$multiple = _ref.multiple,
      multiple = _ref$multiple === void 0 ? false : _ref$multiple,
      rest = _objectWithoutPropertiesLoose(_ref, ["readFile", "processImage", "processImageOptions", "onChange", "multiple"]);

  function handleChange(event) {
    var files = [].concat(event.target.files);
    var promises = files.map(function (file) {
      return Promise.resolve(readFile(file)).then(function (el) {
        return processImage(el, processImageOptions);
      });
    });
    Promise.all(promises).then(function (result) {
      return multiple ? onChange(result) : onChange(result[0]);
    });
  }

  return /*#__PURE__*/React.createElement(FileInput, _extends({
    accept: "image/*",
    multiple: multiple,
    onChange: handleChange
  }, rest));
}