/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

export var DEFAULT_SIZE = 800;
export var DEFAULT_QUALITY = 0.95;
var FALLBACK_IMAGE_TYPE = 'image/jpeg';
export function readFileAsDataUrl(file) {
  var reader = new FileReader();
  reader.readAsDataURL(file);
  return new Promise(function (resolve, reject) {
    reader.onerror = reject;

    reader.onload = function (readerEvent) {
      return resolve(readerEvent.target.result);
    };
  });
}
export var getImageType = function getImageType(img) {
  if (!(img && img.src)) {
    return FALLBACK_IMAGE_TYPE;
  }

  return img.src.match(/^data:(.*);base64/)[1];
};
export function toImage(input) {
  // eslint-disable-next-line no-restricted-properties
  var img = document.createElement('img');
  img.src = input;
  return new Promise(function (resolve, reject) {
    img.onerror = reject;

    img.onload = function (event) {
      return resolve(event.target);
    };
  });
}
export function resizeImage(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      target = _ref.target,
      _ref$maxWidth = _ref.maxWidth,
      maxWidth = _ref$maxWidth === void 0 ? DEFAULT_SIZE : _ref$maxWidth,
      _ref$maxHeight = _ref.maxHeight,
      maxHeight = _ref$maxHeight === void 0 ? DEFAULT_SIZE : _ref$maxHeight,
      _ref$quality = _ref.quality,
      quality = _ref$quality === void 0 ? DEFAULT_QUALITY : _ref$quality;

  // eslint-disable-next-line no-restricted-properties
  var canvas = document.createElement('canvas');
  var width = target.width;
  var height = target.height;

  if (width > height) {
    if (width > maxWidth) {
      height *= maxWidth / width;
      width = maxWidth;
    }
  } else if (height > maxHeight) {
    width *= maxHeight / height;
    height = maxHeight;
  }

  canvas.width = width;
  canvas.height = height;
  var context = canvas.getContext('2d');
  context.drawImage(target, 0, 0, width, height);
  return canvas.toDataURL(getImageType(target), quality);
}
export var processImage = function processImage(dataUrl, options) {
  return toImage(dataUrl).then(function (img) {
    return resizeImage(_extends({
      target: img
    }, options));
  });
};