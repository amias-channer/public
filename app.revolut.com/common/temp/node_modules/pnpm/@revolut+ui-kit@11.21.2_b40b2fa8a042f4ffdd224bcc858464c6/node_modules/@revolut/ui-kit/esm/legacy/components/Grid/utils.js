/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { style } from 'styled-system';
import { splitUnit } from "../../../utils";
var PropNames = {
  COLS: 'cols',
  OFFSET: 'offset'
};
export var DEFAULT_GRID = 12;

var calcColSize = function calcColSize(input, columns) {
  if (columns === void 0) {
    columns = DEFAULT_GRID;
  }

  var _splitUnit = splitUnit(input),
      _splitUnit$ = _splitUnit[0],
      value = _splitUnit$ === void 0 ? 0 : _splitUnit$,
      unit = _splitUnit[1];

  if (isNaN(value)) {
    // auto, inherit or other css keyword
    return input;
  }

  if (unit === undefined) {
    if (value >= 1) {
      // 0...1 -> 0.5 -> 50%
      value /= columns;
    }

    value *= 100;
    unit = '%';
  }

  return value + unit;
};

export var colsAndOffsetStyle = function colsAndOffsetStyle(props) {
  var flex = style({
    prop: PropNames.COLS,
    key: 'grid',
    scale: DEFAULT_GRID,
    cssProperty: 'flex',
    transformValue: function transformValue(input, grid) {
      return "0 0 " + calcColSize(input, grid);
    }
  });
  var maxWidth = style({
    prop: PropNames.COLS,
    key: 'grid',
    scale: DEFAULT_GRID,
    cssProperty: 'maxWidth',
    transformValue: function transformValue(input, grid) {
      return calcColSize(input, grid);
    }
  });
  var offset = style({
    prop: PropNames.OFFSET,
    key: 'grid',
    scale: DEFAULT_GRID,
    cssProperty: 'marginLeft',
    transformValue: function transformValue(input, grid) {
      return calcColSize(input, grid);
    }
  });
  var hideZeros = style({
    prop: PropNames.COLS,
    key: 'grid',
    scale: DEFAULT_GRID,
    cssProperty: 'display',
    transformValue: function transformValue(input) {
      return input === 0 ? 'none' : 'block';
    }
  });
  return [flex(props), maxWidth(props), offset(props), hideZeros(props)];
};