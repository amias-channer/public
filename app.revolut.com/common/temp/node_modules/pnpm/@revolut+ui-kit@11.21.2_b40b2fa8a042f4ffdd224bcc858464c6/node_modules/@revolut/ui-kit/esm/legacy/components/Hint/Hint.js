/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback, useEffect, useRef, useState } from 'react';
import { isElement } from 'react-is';
import { useDelayedCallback } from "../../../hooks";
import { isFunction } from "../../../utils";
import { Box, Portal, PreventUpdateOnExit, TransitionSlideDown } from "../../../components";
import { Popper } from "../Popper";
var DEFAULT_ELEMENT = 'span';
var DEFAULT_DELAY = process.env.NODE_ENV === 'test' ? 0 : 150;

var HintBox = function HintBox(props) {
  return /*#__PURE__*/React.createElement(Box, _extends({
    bg: "background",
    radius: "dropdown",
    elevation: 600,
    px: "s-24",
    py: "s-20",
    m: "s-16"
  }, props));
};

/** @deprecated Use `Tooltip` */
export function Hint(_ref) {
  var placement = _ref.placement,
      fitInAnchor = _ref.fitInAnchor,
      boundariesElement = _ref.boundariesElement,
      flip = _ref.flip,
      shift = _ref.shift,
      modifiers = _ref.modifiers,
      zIndex = _ref.zIndex,
      _ref$use = _ref.use,
      Comp = _ref$use === void 0 ? DEFAULT_ELEMENT : _ref$use,
      _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? DEFAULT_DELAY : _ref$delay,
      _ref$message = _ref.message,
      message = _ref$message === void 0 ? null : _ref$message,
      children = _ref.children,
      _ref$usePortal = _ref.usePortal,
      usePortal = _ref$usePortal === void 0 ? Portal : _ref$usePortal,
      _ref$useTransition = _ref.useTransition,
      TransitionComp = _ref$useTransition === void 0 ? TransitionSlideDown : _ref$useTransition,
      _ref$useWrapper = _ref.useWrapper,
      WrapperComp = _ref$useWrapper === void 0 ? HintBox : _ref$useWrapper,
      rest = _objectWithoutPropertiesLoose(_ref, ["placement", "fitInAnchor", "boundariesElement", "flip", "shift", "modifiers", "zIndex", "use", "delay", "message", "children", "usePortal", "useTransition", "useWrapper"]);

  var anchorRef = useRef(null);

  var _useState = useState(false),
      isVisible = _useState[0],
      setVisible = _useState[1];

  var _useDelayedCallback = useDelayedCallback(setVisible, delay),
      delayedSetVisible = _useDelayedCallback[0],
      cancelSetVisibleDelay = _useDelayedCallback[1];

  useEffect(function () {
    return cancelSetVisibleDelay;
  }, [cancelSetVisibleDelay]);
  var PortalComp = usePortal === false ? React.Fragment : usePortal;
  var hasMessage = Boolean(message);
  var shouldShowHint = hasMessage && isVisible;
  var show = useCallback(function () {
    return delayedSetVisible(true);
  }, [delayedSetVisible]);
  var hide = useCallback(function () {
    return delayedSetVisible(false);
  }, [delayedSetVisible]);
  var anchorProps = {
    ref: anchorRef,
    onMouseEnter: show,
    onMouseLeave: hide
  };
  var node = null;

  if (isFunction(children)) {
    node = children(anchorProps);
  } else if (Comp === false) {
    if (isElement(children)) {
      node = /*#__PURE__*/React.cloneElement(children, anchorProps);
    } else if (process.env.NODE_ENV !== 'production') {
      throw new Error("When 'use={false}' is set on 'Hint' or 'Tooltip' component, you should also provide valid children element, which can accept 'ref', 'onMouseEnter', 'onMouseLeave' DOM attributes. Otherwise nothing will be rendered.");
    }
  } else {
    node = /*#__PURE__*/React.createElement(Comp, anchorProps, children);
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, node, /*#__PURE__*/React.createElement(TransitionComp, {
    "in": shouldShowHint
  }, /*#__PURE__*/React.createElement(PreventUpdateOnExit, {
    "in": shouldShowHint
  }, shouldShowHint && /*#__PURE__*/React.createElement(PortalComp, null, /*#__PURE__*/React.createElement(Popper, {
    anchorRef: anchorRef,
    placement: placement,
    fitInAnchor: fitInAnchor,
    boundariesElement: boundariesElement,
    flip: flip,
    shift: shift,
    modifiers: modifiers,
    zIndex: zIndex,
    role: "tooltip",
    onMouseEnter: cancelSetVisibleDelay,
    onMouseLeave: hide
  }, /*#__PURE__*/React.createElement(WrapperComp, rest, message))))));
}