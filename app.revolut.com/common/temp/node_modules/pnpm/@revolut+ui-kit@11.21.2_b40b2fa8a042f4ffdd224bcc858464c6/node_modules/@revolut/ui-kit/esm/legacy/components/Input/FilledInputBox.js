/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import * as Icons from '@revolut/icons';
import styled from 'styled-components';
import { Color, Radius, Space, TextStyle, Transition } from "../../../constants";
import { Box } from "../../../components/Box";
import { Flex } from "../../../components/Flex";
import { Text } from "../../../components/Text";
import { Spinner } from "../../../components/Spinner";
import { InputSize } from "./constants";
import { Placeholder } from "./Placeholder";
import { StatusBorder } from "./StatusBorder";
import { getDescriptionId, getLabelId, getStatusColor } from "./utils";
import { ButtonBase } from "../../../components/ButtonBase";
import { useAccessibleId } from "../../../components/AccessibleId";
import { themeColor, themeSpace, themeTransition } from "../../../utils";

var InputAction = function InputAction(props) {
  return /*#__PURE__*/React.createElement(Flex, _extends({
    alignItems: "center",
    pt: Space.S_2
  }, props));
};

var InputStartAction = function InputStartAction(props) {
  return /*#__PURE__*/React.createElement(InputAction, _extends({
    mr: Space.S_16
  }, props));
};

var InputEndAction = function InputEndAction(props) {
  return /*#__PURE__*/React.createElement(InputAction, _extends({
    ml: Space.S_8
  }, props));
};

export function FilledInputBox(_ref) {
  var _ref$useIcon = _ref.useIcon,
      Icon = _ref$useIcon === void 0 ? false : _ref$useIcon,
      prefix = _ref.prefix,
      action = _ref.action,
      border = _ref.border,
      children = _ref.children,
      hasError = _ref.hasError,
      hasValue = _ref.hasValue,
      isDisabled = _ref.isDisabled,
      isReadOnly = _ref.isReadOnly,
      isFocused = _ref.isFocused,
      isPending = _ref.isPending,
      message = _ref.message,
      placeholder = _ref.placeholder,
      placeholderProps = _ref.placeholderProps,
      size = _ref.size,
      labelButtonClear = _ref.labelButtonClear,
      onClear = _ref.onClear,
      containerRef = _ref.containerRef;
  var id = useAccessibleId();
  var isDefaultSize = size === InputSize.DEFAULT;
  var isCompactSize = size === InputSize.COMPACT;
  var isPinSize = size === InputSize.PIN;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Wrapper, {
    radius: Radius.INPUT,
    overflow: "hidden",
    ref: containerRef,
    disabled: isDisabled
  }, /*#__PURE__*/React.createElement(Flex, {
    alignItems: "center",
    py: isCompactSize ? Space.S_8 : Space.S_2,
    px: isPinSize ? Space.S_12 : Space.S_16
  }, /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    mt: isDefaultSize ? '-1px' : undefined,
    mb: isDefaultSize ? '-1px' : Space.N_2,
    py: isDefaultSize && !placeholder ? Space.S_16 : Space.S_4,
    minWidth: 0,
    maxWidth: "100%"
  }, placeholder && /*#__PURE__*/React.createElement(Placeholder, _extends({
    id: getLabelId(id),
    scale: 0.75,
    offset: "60%",
    hasValue: hasValue,
    isFocused: isFocused,
    isDisabled: isDisabled,
    hasError: hasError
  }, placeholderProps), placeholder), /*#__PURE__*/React.createElement(Box, {
    opacity: isDisabled ? 0.5 : null
  }, children)), isPending ? /*#__PURE__*/React.createElement(Spinner, {
    size: 20,
    color: Color.BLUE
  }) : hasError && /*#__PURE__*/React.createElement(InputEndAction, null, /*#__PURE__*/React.createElement(Icons.ExclamationMarkOutline, {
    color: Color.RED,
    size: 24
  })), onClear && !isDisabled && !isReadOnly && hasValue && /*#__PURE__*/React.createElement(InputEndAction, null, /*#__PURE__*/React.createElement(ButtonBase, {
    "aria-label": labelButtonClear,
    onClick: function onClick(event) {
      event.preventDefault();
      onClear();
    },
    tabIndex: -1
  }, /*#__PURE__*/React.createElement(Icons.CrossCircle, {
    size: 24,
    color: Color.GREY_TONE_20
  }))), action && /*#__PURE__*/React.createElement(InputEndAction, null, action), Icon && /*#__PURE__*/React.createElement(InputEndAction, null, /*#__PURE__*/React.createElement(Icon, {
    size: 24,
    color: // eslint-disable-next-line no-nested-ternary
    isFocused ? Color.BLUE : isDisabled ? Color.GREY_TONE_20 : Color.GREY_TONE_50
  })), prefix && /*#__PURE__*/React.createElement(InputStartAction, {
    order: -1
  }, prefix)), border ? /*#__PURE__*/React.createElement(Box, {
    px: isPinSize ? Space.S_8 : Space.S_16
  }, /*#__PURE__*/React.createElement(StatusBorder, _extends({
    isDisabled: isDisabled,
    hasError: hasError,
    isFocused: isFocused
  }, border))) : null), message ? /*#__PURE__*/React.createElement(Text, {
    use: "div",
    py: Space.S_2,
    px: Space.S_16,
    variant: TextStyle.SMALL,
    color: getStatusColor({
      hasError: hasError,
      isFocused: isFocused
    }),
    id: getDescriptionId(id)
  }, message) : null);
}
var Wrapper = /*#__PURE__*/styled(Box).withConfig({
  displayName: "FilledInputBox__Wrapper",
  componentId: "b2ugp2-0"
})(["transition:", ";--input-shadow-base:inset 0 0 0 ", " var(--input-bg,", ");--input-shadow-hover:inset 0 0 0 9999px var(--input-hover-color,", ");--input-shadow-collapsed:inset 0 0 0 0 rgba(255,255,255,0);background-color:var(--input-bg,", ");:hover:not([disabled]){box-shadow:var(--input-shadow-collapsed),var(--input-shadow-base),var(--input-shadow-hover);}input[type='button']{overflow:auto;text-overflow:clip;}"], themeTransition(Transition.SHADOW), themeSpace(Space.S_4), themeColor(Color.WIDGET_BACKGROUND), themeColor(Color.GREY_TONE_2), themeColor(Color.WIDGET_BACKGROUND));