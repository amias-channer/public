/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import styled from 'styled-components';
import { Color, Space, TextStyle } from "../../../constants";
import { px, themeColor } from "../../../utils";
import { Box } from "../../../components/Box";
import { Flex } from "../../../components/Flex";
import { Text } from "../../../components/Text";
import { Spinner } from "../../../components/Spinner";
import { useAccessibleId } from "../../../components/AccessibleId";
import { InputBox, InputBoxVariant } from "../../../components/InputBox";
import { Label } from "./Label";
import { ClearButton } from "./ClearButton";
import { ErrorMessagePrefix } from "./ErrorMessagePrefix";
import { InputSize } from "./constants";
import { getDescriptionId, getLabelId, getMessageColor } from "./utils";
var GreyInputBoxWrapper = /*#__PURE__*/styled(InputBox).withConfig({
  displayName: "GreyInputBox__GreyInputBoxWrapper",
  componentId: "kjuijh-0"
})(["", "{display:none;}&:hover:not([aria-disabled='true']),&:focus-within{", "{display:block;}}input,textarea{:enabled{color:", ";::placeholder{color:", ";}}}input[type='button']{overflow:auto;text-overflow:clip;}"], ClearButton, ClearButton, themeColor(Color.FOREGROUND), themeColor(Color.GREY_TONE_50));

var InputAction = function InputAction(props) {
  return /*#__PURE__*/React.createElement(Flex, _extends({
    alignItems: "center"
  }, props));
};

var InputStartAction = function InputStartAction(props) {
  return /*#__PURE__*/React.createElement(InputAction, _extends({
    mr: Space.S_16
  }, props));
};

var InputEndAction = function InputEndAction(props) {
  return /*#__PURE__*/React.createElement(InputAction, _extends({
    ml: Space.S_8
  }, props));
};

export function GreyInputBox(_ref) {
  var _ref$useIcon = _ref.useIcon,
      Icon = _ref$useIcon === void 0 ? false : _ref$useIcon,
      prefix = _ref.prefix,
      action = _ref.action,
      children = _ref.children,
      hasError = _ref.hasError,
      hasValue = _ref.hasValue,
      isDisabled = _ref.isDisabled,
      isReadOnly = _ref.isReadOnly,
      isFocused = _ref.isFocused,
      isPending = _ref.isPending,
      hasPlaceholder = _ref.hasPlaceholder,
      message = _ref.message,
      label = _ref.label,
      labelProps = _ref.labelProps,
      size = _ref.size,
      labelButtonClear = _ref.labelButtonClear,
      onClear = _ref.onClear,
      containerRef = _ref.containerRef;
  var id = useAccessibleId();
  var isDefaultSize = size === InputSize.DEFAULT;
  var isCompactSize = size === InputSize.COMPACT;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GreyInputBoxWrapper, {
    ref: containerRef,
    variant: InputBoxVariant.GREY,
    "aria-invalid": hasError,
    "aria-disabled": isDisabled,
    py: isCompactSize || !label ? Space.S_16 : Space.S_8,
    px: Space.S_16
  }, /*#__PURE__*/React.createElement(Flex, {
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    minWidth: 0,
    maxWidth: "100%"
  }, label && isDefaultSize && /*#__PURE__*/React.createElement(Label, _extends({
    id: getLabelId(id),
    scale: 0.75,
    offset: "60%",
    hasValue: hasValue,
    isFocused: isFocused,
    isDisabled: isDisabled,
    hasPlaceholder: hasPlaceholder
  }, labelProps), label), /*#__PURE__*/React.createElement(Box, {
    py: px(1)
  }, children)), isPending && /*#__PURE__*/React.createElement(Spinner, {
    size: 20,
    color: Color.BLUE
  }), onClear && !isDisabled && !isReadOnly && hasValue && /*#__PURE__*/React.createElement(InputEndAction, null, /*#__PURE__*/React.createElement(ClearButton, {
    "aria-label": labelButtonClear,
    onClick: function onClick(event) {
      event.preventDefault();
      onClear();
    }
  })), action && /*#__PURE__*/React.createElement(InputEndAction, null, action), Icon && /*#__PURE__*/React.createElement(InputEndAction, null, /*#__PURE__*/React.createElement(Icon, {
    size: 24,
    color: isDisabled ? Color.GREY_TONE_20 : Color.GREY_TONE_50
  })), prefix && /*#__PURE__*/React.createElement(InputStartAction, {
    order: -1
  }, prefix))), message ? /*#__PURE__*/React.createElement(Flex, {
    py: Space.S_2,
    px: Space.S_16,
    color: getMessageColor({
      hasError: hasError
    }),
    alignItems: "center"
  }, hasError && /*#__PURE__*/React.createElement(ErrorMessagePrefix, null), /*#__PURE__*/React.createElement(Text, {
    flex: "1",
    variant: TextStyle.SMALL,
    id: getDescriptionId(id)
  }, message)) : null);
}