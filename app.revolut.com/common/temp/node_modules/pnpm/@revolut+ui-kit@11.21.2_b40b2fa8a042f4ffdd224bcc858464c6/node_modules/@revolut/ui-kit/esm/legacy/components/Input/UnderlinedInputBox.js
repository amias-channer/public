/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import styled, { css } from 'styled-components';
import { themeGet } from '@styled-system/theme-get';
import { px } from "../../../utils";
import { useAccessibleId } from "../../../components/AccessibleId";
import { Box } from "../../../components/Box";
import { Flex } from "../../../components/Flex";
import { Text } from "../../../components/Text";
import { Placeholder } from "./Placeholder";
import { StatusBorder } from "./StatusBorder";
import { getDescriptionId, getLabelId, getStatusColor } from "./utils";
export var INPUT_BORDER_SIZE = px(1);
var Underlined = /*#__PURE__*/styled('div').withConfig({
  displayName: "UnderlinedInputBox__Underlined",
  componentId: "bg5ipo-0"
})(["width:100%;height:", ";margin-bottom:-", ";background-color:", ";", ""], INPUT_BORDER_SIZE, INPUT_BORDER_SIZE, themeGet('colors.grey-tone-20'), function (props) {
  return props.isDisabled && css(["background:linear-gradient( to left,", " 25%,white 0% );background-size:4px 1px;background-repeat:repeat-x;background-position:bottom;"], themeGet('colors.grey-tone-50'));
});
export function UnderlinedInputBox(_ref) {
  var action = _ref.action,
      border = _ref.border,
      children = _ref.children,
      hasError = _ref.hasError,
      hasValue = _ref.hasValue,
      isDisabled = _ref.isDisabled,
      isFocused = _ref.isFocused,
      message = _ref.message,
      placeholder = _ref.placeholder,
      placeholderProps = _ref.placeholderProps,
      containerRef = _ref.containerRef;
  var id = useAccessibleId();
  return /*#__PURE__*/React.createElement(React.Fragment, null, placeholder && /*#__PURE__*/React.createElement(Placeholder, _extends({
    id: getLabelId(id),
    scale: 0.75,
    offset: "100%",
    hasValue: hasValue,
    isFocused: isFocused,
    isDisabled: isDisabled,
    hasError: hasError
  }, placeholderProps), placeholder), /*#__PURE__*/React.createElement(Flex, {
    ref: containerRef,
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    opacity: isDisabled ? 0.5 : null
  }, children), action), border ? /*#__PURE__*/React.createElement(Box, {
    py: "s-4"
  }, /*#__PURE__*/React.createElement(Underlined, {
    isDisabled: isDisabled
  }), /*#__PURE__*/React.createElement(StatusBorder, _extends({
    hasError: hasError,
    isFocused: isFocused,
    isDisabled: isDisabled
  }, border))) : null, message ? /*#__PURE__*/React.createElement(Text, {
    id: getDescriptionId(id),
    use: "p",
    variant: "small",
    color: getStatusColor({
      hasError: hasError,
      isFocused: isFocused
    })
  }, message) : null);
}