/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { Color } from "../../../constants";
export function getStatusColor(props, fallback) {
  if (fallback === void 0) {
    fallback = Color.GREY_TONE_50;
  }

  if (props.hasError) {
    return Color.RED;
  }

  if (props.isFocused) {
    return Color.BLUE;
  }

  return fallback;
}
export var getLabelId = function getLabelId(id) {
  return id ? "input-label-" + id : undefined;
};
export var getDescriptionId = function getDescriptionId(id) {
  return id ? "input-desc-" + id : undefined;
};
export var getInputBackground = function getInputBackground(_ref, fallback) {
  var hasError = _ref.hasError,
      isFocused = _ref.isFocused;

  if (fallback === void 0) {
    fallback = Color.GREY_TONE_8;
  }

  if (hasError) {
    if (isFocused) {
      return Color.INPUT_ERROR_FOCUS;
    }

    return Color.INPUT_ERROR;
  }

  if (isFocused) {
    return Color.GREY_TONE_10;
  }

  return fallback;
};
export var getInputHoverBackground = function getInputHoverBackground(_ref2, fallback) {
  var hasError = _ref2.hasError;

  if (fallback === void 0) {
    fallback = Color.GREY_TONE_10;
  }

  if (hasError) {
    return Color.INPUT_ERROR_FOCUS;
  }

  return fallback;
};
export function getMessageColor(props, fallback) {
  if (fallback === void 0) {
    fallback = Color.GREY_TONE_50;
  }

  if (props.hasError) {
    return Color.RED;
  }

  return fallback;
}