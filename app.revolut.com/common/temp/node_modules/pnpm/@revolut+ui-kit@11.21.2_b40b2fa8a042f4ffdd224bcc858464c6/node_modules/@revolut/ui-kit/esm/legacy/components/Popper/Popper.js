/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import { setRefs } from "../../../utils";
import { useUniversalLayoutEffect, useWindow } from "../../../hooks";
import { Absolute } from "../../../components/Position";
import { usePopper } from "../../hooks";

/** @deprecated `usePopper` instead */
export var Popper = /*#__PURE__*/forwardRef(function (_ref, forwardedRef) {
  var _ref$use = _ref.use,
      Comp = _ref$use === void 0 ? Absolute : _ref$use,
      anchorRef = _ref.anchorRef,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,
      _ref$fitInAnchor = _ref.fitInAnchor,
      fitInAnchor = _ref$fitInAnchor === void 0 ? false : _ref$fitInAnchor,
      _ref$preventOverflow = _ref.preventOverflow,
      preventOverflow = _ref$preventOverflow === void 0 ? true : _ref$preventOverflow,
      _ref$boundariesElemen = _ref.boundariesElement,
      boundariesElement = _ref$boundariesElemen === void 0 ? 'scrollParent' : _ref$boundariesElemen,
      _ref$flip = _ref.flip,
      flip = _ref$flip === void 0 ? true : _ref$flip,
      _ref$shift = _ref.shift,
      shift = _ref$shift === void 0 ? true : _ref$shift,
      modifiers = _ref.modifiers,
      _ref$positionFixed = _ref.positionFixed,
      positionFixed = _ref$positionFixed === void 0 ? false : _ref$positionFixed,
      rest = _objectWithoutPropertiesLoose(_ref, ["use", "anchorRef", "placement", "fitInAnchor", "preventOverflow", "boundariesElement", "flip", "shift", "modifiers", "positionFixed"]);

  var win = useWindow();

  var _usePopper = usePopper(_extends({
    placement: placement,
    fitInAnchor: fitInAnchor,
    preventOverflow: preventOverflow,
    boundariesElement: boundariesElement,
    flip: flip,
    shift: shift,
    modifiers: modifiers,
    positionFixed: positionFixed
  }, rest)),
      rootRef = _usePopper[0],
      targetRef = _usePopper[1];

  useUniversalLayoutEffect(function () {
    if (win && anchorRef instanceof win.HTMLElement) {
      targetRef.current = anchorRef;
    } else if (anchorRef) {
      var _anchorRef$current;

      targetRef.current = (_anchorRef$current = anchorRef.current) != null ? _anchorRef$current : null;
    }
  });
  return /*#__PURE__*/React.createElement(Comp, _extends({
    ref: setRefs(rootRef, forwardedRef)
  }, rest));
});