/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useRef } from 'react';
import * as Icons from '@revolut/icons';
import { noop, renderNothing } from "../../../utils";
import { KeyboardEventKey } from "../../../constants";
import { PREVENT_OVERFLOW_HORIZONTAL } from "../Popper/constants";
import { Box } from "../../../components/Box";
import { ButtonBase } from "../../../components/ButtonBase";
import { Dropdown } from "../../../components/Dropdown";
import { Input, InputVariant } from "../Input";
import { SelectState } from "./SelectState";
import { SelectOption, renderDefaultList, renderDefaultOption } from "./SelectOption";

var renderDefaultButton = function renderDefaultButton(select) {
  return /*#__PURE__*/React.createElement(ButtonBase, _extends({
    tabIndex: -1,
    "data-testid": "input-select-button"
  }, select.getToggleButtonProps()), /*#__PURE__*/React.createElement(Icons.ShevronDown, _extends({
    "data-testid": "input-select-button-icon",
    size: 24,
    color: "grey-50"
  }, select.isOpen && {
    color: 'primary',
    transform: 'rotate(180)'
  }, select.disabled && {
    color: 'grey-80'
  })));
};
/** @deprecated */


export var InputSelect = function InputSelect(_ref) {
  var name = _ref.name,
      root = _ref.root,
      dropdown = _ref.dropdown,
      _ref$autoComplete = _ref.autoComplete,
      autoComplete = _ref$autoComplete === void 0 ? 'off' : _ref$autoComplete,
      type = _ref.type,
      _ref$children = _ref.children,
      children = _ref$children === void 0 ? renderDefaultList : _ref$children,
      inputLabel = _ref.inputLabel,
      inputLabelProps = _ref.inputLabelProps,
      inputPlaceholder = _ref.inputPlaceholder,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? '' : _ref$placeholder,
      placeholderProps = _ref.placeholderProps,
      _ref$renderOption = _ref.renderOption,
      renderOption = _ref$renderOption === void 0 ? renderDefaultOption : _ref$renderOption,
      _ref$renderLabel = _ref.renderLabel,
      renderLabel = _ref$renderLabel === void 0 ? renderNothing : _ref$renderLabel,
      _ref$renderButton = _ref.renderButton,
      renderButton = _ref$renderButton === void 0 ? renderDefaultButton : _ref$renderButton,
      _ref$autoFocus = _ref.autoFocus,
      autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,
      hasError = _ref.hasError,
      message = _ref.message,
      error = _ref.error,
      border = _ref.border,
      placement = _ref.placement,
      _ref$disableFillOnEnt = _ref.disableFillOnEnter,
      disableFillOnEnter = _ref$disableFillOnEnt === void 0 ? false : _ref$disableFillOnEnt,
      inputProps = _ref.input,
      className = _ref.className,
      variant = _ref.variant,
      size = _ref.size,
      _ref$onFocus = _ref.onFocus,
      _onFocus = _ref$onFocus === void 0 ? noop : _ref$onFocus,
      _ref$onBlur = _ref.onBlur,
      onBlur = _ref$onBlur === void 0 ? noop : _ref$onBlur,
      _ref$clearOnEsc = _ref.clearOnEsc,
      clearOnEsc = _ref$clearOnEsc === void 0 ? true : _ref$clearOnEsc,
      _ref$clearable = _ref.clearable,
      clearable = _ref$clearable === void 0 ? false : _ref$clearable,
      rest = _objectWithoutPropertiesLoose(_ref, ["name", "root", "dropdown", "autoComplete", "type", "children", "inputLabel", "inputLabelProps", "inputPlaceholder", "placeholder", "placeholderProps", "renderOption", "renderLabel", "renderButton", "autoFocus", "hasError", "message", "error", "border", "placement", "disableFillOnEnter", "input", "className", "variant", "size", "onFocus", "onBlur", "clearOnEsc", "clearable"]);

  var containerRef = useRef();
  return /*#__PURE__*/React.createElement(SelectState, rest, function (select) {
    return /*#__PURE__*/React.createElement(Box, select.getRootProps(root), /*#__PURE__*/React.createElement(Input, select.getInputProps(_extends({
      'data-testid': 'input-select-inner-input',
      containerRef: containerRef,
      autoComplete: autoComplete,
      type: type,
      name: name,
      className: className,
      autoFocus: autoFocus,
      label: variant === InputVariant.GREY ? inputLabel != null ? inputLabel : placeholder : undefined,
      labelProps: variant === InputVariant.GREY ? select.getLabelProps(inputLabelProps) : inputLabelProps,
      placeholder: variant === InputVariant.GREY ? inputPlaceholder : inputLabel != null ? inputLabel : placeholder,
      placeholderProps: variant !== InputVariant.GREY ? select.getLabelProps(placeholderProps) : placeholderProps,
      border: border,
      error: error,
      message: message,
      hasError: hasError,
      variant: variant,
      size: size,
      nativePlaceholder: variant !== InputVariant.GREY ? inputPlaceholder : undefined,
      focused: select.isOpen,
      renderAction: function renderAction() {
        return (
          /*#__PURE__*/
          // eslint-disable-line react/display-name
          React.createElement(React.Fragment, null, renderLabel(select), renderButton(select))
        );
      },
      spellCheck: false,
      onClick: function onClick() {
        return select.openMenu();
      },
      onBlur: onBlur,
      onFocus: function onFocus(event) {
        _onFocus(event);

        if (!event.defaultPrevented) {
          select.openMenu();
          event.currentTarget.select();
        }
      },
      onKeyDown: function onKeyDown(event) {
        if (disableFillOnEnter) {
          return;
        }

        if (select.isOpen && select.highlightedIndex === null && event.key === KeyboardEventKey.ENTER) {
          event.preventDefault();
          select.selectItemAtIndex(0);
        }

        if (!clearOnEsc && event.key === KeyboardEventKey.ESCAPE) {
          event.nativeEvent.preventDownshiftDefault = true;
        }
      }
    }, clearable ? {
      onClear: function onClear() {
        select.clearSelection();
      }
    } : {}, inputProps))), /*#__PURE__*/React.createElement(Dropdown, _extends({
      isOpen: select.isOpen,
      placement: placement,
      preventOverflow: PREVENT_OVERFLOW_HORIZONTAL,
      flip: false,
      fitInAnchor: true,
      anchorRef: containerRef
    }, select.getMenuProps(dropdown, {
      suppressRefError: true
    })), /*#__PURE__*/React.createElement(Dropdown.Group, null, children(select, renderOption))));
  });
};
InputSelect.Option = SelectOption;