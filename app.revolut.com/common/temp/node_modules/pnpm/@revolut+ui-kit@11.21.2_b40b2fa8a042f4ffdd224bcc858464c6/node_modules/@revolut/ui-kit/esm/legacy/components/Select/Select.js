/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback, useState } from 'react';
import { PREVENT_OVERFLOW_HORIZONTAL } from "../Popper/constants";
import { Dropdown } from "../../../components/Dropdown";
import { Box } from "../../../components/Box";
import { TextButton } from "../../../components/TextButton";
import { SelectState } from "./SelectState";
import { SelectOption, renderDefaultList, renderDefaultOption } from "./SelectOption";

var renderDefaultLabel = function renderDefaultLabel(_ref) {
  var label = _ref.label,
      placeholder = _ref.placeholder;
  return label === '' ? placeholder : label;
};

export function Select(_ref2) {
  var root = _ref2.root,
      toggle = _ref2.toggle,
      dropdown = _ref2.dropdown,
      _ref2$children = _ref2.children,
      children = _ref2$children === void 0 ? renderDefaultList : _ref2$children,
      _ref2$autoFocus = _ref2.autoFocus,
      autoFocus = _ref2$autoFocus === void 0 ? true : _ref2$autoFocus,
      _ref2$searchPlacehold = _ref2.searchPlaceholder,
      searchPlaceholder = _ref2$searchPlacehold === void 0 ? '' : _ref2$searchPlacehold,
      _ref2$renderLabel = _ref2.renderLabel,
      renderLabel = _ref2$renderLabel === void 0 ? renderDefaultLabel : _ref2$renderLabel,
      _ref2$hasSearch = _ref2.hasSearch,
      hasSearch = _ref2$hasSearch === void 0 ? true : _ref2$hasSearch,
      input = _ref2.input,
      _ref2$placeholder = _ref2.placeholder,
      placeholder = _ref2$placeholder === void 0 ? '' : _ref2$placeholder,
      _ref2$renderOption = _ref2.renderOption,
      renderOption = _ref2$renderOption === void 0 ? renderDefaultOption : _ref2$renderOption,
      placement = _ref2.placement,
      rest = _objectWithoutPropertiesLoose(_ref2, ["root", "toggle", "dropdown", "children", "autoFocus", "searchPlaceholder", "renderLabel", "hasSearch", "input", "placeholder", "renderOption", "placement"]);

  var _useState = useState(''),
      inputValue = _useState[0],
      setInputValue = _useState[1];

  var handleStateChange = useCallback(function (changes) {
    if (changes.isOpen === false) {
      setInputValue('');
    }
  }, [setInputValue]);
  var handleInputValueChange = useCallback(function (event) {
    var value = event.target.value;

    if (value !== inputValue) {
      setInputValue(value);
    }
  }, [inputValue, setInputValue]);
  return /*#__PURE__*/React.createElement(SelectState, _extends({}, rest, {
    onStateChange: handleStateChange,
    inputValue: inputValue
  }), function (select) {
    return /*#__PURE__*/React.createElement(Box, select.getRootProps(root), /*#__PURE__*/React.createElement(TextButton, _extends({
      disabled: select.disabled
    }, select.getToggleButtonProps(toggle)), renderLabel(_extends({}, select, {
      placeholder: placeholder
    }))), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Dropdown, _extends({
      isOpen: select.isOpen,
      placement: placement,
      preventOverflow: PREVENT_OVERFLOW_HORIZONTAL,
      flip: false,
      fitInAnchor: true
    }, select.getMenuProps(dropdown, {
      suppressRefError: true
    })), hasSearch && /*#__PURE__*/React.createElement(Dropdown.Group, {
      sticky: true
    }, /*#__PURE__*/React.createElement(Dropdown.Search, select.getInputProps(_extends({
      autoFocus: autoFocus,
      placeholder: searchPlaceholder,
      value: inputValue,
      onChange: handleInputValueChange
    }, input)))), /*#__PURE__*/React.createElement(Dropdown.Group, null, children(select, renderOption)))));
  });
}
Select.Option = SelectOption;