/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { PureComponent } from 'react';
import { matchSorter, rankings } from 'match-sorter';
import Downshift from 'downshift';
import { identity, isString, noop, renderNothing, toArray } from "../../../utils";

var withIndexes = function withIndexes(src) {
  if (src === void 0) {
    src = [];
  }

  return function (item, index) {
    return _extends({
      index: index,
      realIndex: src.indexOf(item)
    }, item);
  };
};

var addIndexes = function addIndexes(fn) {
  if (fn === void 0) {
    fn = identity;
  }

  return function (src) {
    if (src === void 0) {
      src = [];
    }

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return fn.apply(void 0, [src].concat(args)).map(withIndexes(src));
  };
};

var defaultItemToString = function defaultItemToString(item) {
  if (item == null) {
    return '';
  }

  if (isString(item.label)) {
    return item.label;
  }

  return String(item);
};

var DEFAULT_SETTINGS = {
  keys: ['label'],
  threshold: rankings.CONTAINS
};

var defaultFilter = function defaultFilter(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      inputValue = _ref.inputValue,
      selectedItem = _ref.selectedItem,
      _ref$itemToString = _ref.itemToString,
      itemToString = _ref$itemToString === void 0 ? defaultItemToString : _ref$itemToString,
      preserveOptionsOrder = _ref.preserveOptionsOrder;

  return function (items, settings) {
    var selectedLabel = itemToString(selectedItem);

    if (selectedLabel && (inputValue === '' || inputValue === selectedLabel)) {
      if (preserveOptionsOrder) {
        return items;
      }

      return matchSorter(items, selectedLabel, _extends({}, DEFAULT_SETTINGS, settings, {
        threshold: rankings.NO_MATCH
      }));
    }

    if (inputValue) {
      return matchSorter(items, inputValue, _extends({}, DEFAULT_SETTINGS, settings));
    }

    return items;
  };
};
/** @deprecated */


export var SelectState = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(SelectState, _PureComponent);

  function SelectState() {
    var _this;

    for (var _len2 = arguments.length, _args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      _args[_key2] = arguments[_key2];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(_args)) || this;
    _this.state = {
      isControlled: _this.props.value !== undefined
    };

    _this.handleChange = function (item, downshift) {
      _this.props.onChange(Object(item).value, downshift);
    };

    _this.getChildrenData = function (downshift) {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          itemToString = _this$props.itemToString,
          filterFn = _this$props.filterFn,
          options = _this$props.options,
          preserveOptionsOrder = _this$props.preserveOptionsOrder;

      var getOptionProps = function getOptionProps(_ref2) {
        var index = _ref2.index,
            value = _ref2.value,
            label = _ref2.label,
            rest = _objectWithoutPropertiesLoose(_ref2, ["index", "value", "label"]);

        var isHighlighted = downshift.highlightedIndex === index;
        var isSelected = downshift.highlightedIndex === null && downshift.selectedItem && downshift.selectedItem.value === value;
        return downshift.getItemProps({
          index: index,
          isHighlighted: isHighlighted,
          isSelected: isSelected,
          item: _extends({
            label: label,
            value: value
          }, rest),
          children: label
        });
      };

      var getInputProps = function getInputProps() {
        return _extends({}, downshift.getInputProps.apply(downshift, arguments), {
          disabled: disabled
        });
      };

      var getToggleButtonProps = function getToggleButtonProps() {
        return _extends({}, downshift.getToggleButtonProps.apply(downshift, arguments), {
          disabled: disabled
        });
      };

      var getClearButtonProps = function getClearButtonProps(_ref3) {
        var _ref3$onClick = _ref3.onClick,
            _onClick = _ref3$onClick === void 0 ? noop : _ref3$onClick,
            rest = _objectWithoutPropertiesLoose(_ref3, ["onClick"]);

        return _extends({
          disabled: disabled,
          onClick: function onClick(e) {
            downshift.clearSelection();

            _onClick(e);
          }
        }, rest);
      };

      var label = itemToString(downshift.selectedItem);
      var matchOptions = addIndexes(filterFn({
        inputValue: downshift.inputValue,
        selectedItem: downshift.selectedItem,
        itemToString: itemToString,
        preserveOptionsOrder: preserveOptionsOrder
      }));
      return _extends({}, downshift, {
        options: options,
        matchOptions: matchOptions,
        label: label,
        disabled: disabled,
        getInputProps: getInputProps,
        getOptionProps: getOptionProps,
        getToggleButtonProps: getToggleButtonProps,
        getClearButtonProps: getClearButtonProps
      });
    };

    _this.getItem = function (label, value) {
      var _this$props2 = _this.props,
          options = _this$props2.options,
          itemToString = _this$props2.itemToString;

      if (value == null) {
        return null;
      }

      var item = toArray(options).find(function (el) {
        return el.value === value;
      });

      if (label === undefined) {
        return _extends({}, item, {
          label: itemToString(item),
          value: value
        });
      }

      return _extends({}, item, {
        label: label,
        value: value
      });
    };

    return _this;
  }

  var _proto = SelectState.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props3 = this.props,
        children = _this$props3.children,
        itemToString = _this$props3.itemToString,
        defaultValue = _this$props3.defaultValue,
        value = _this$props3.value,
        defaultLabel = _this$props3.defaultLabel,
        label = _this$props3.label,
        defaultInputValue = _this$props3.defaultInputValue,
        inputValue = _this$props3.inputValue,
        rest = _objectWithoutPropertiesLoose(_this$props3, ["children", "itemToString", "defaultValue", "value", "defaultLabel", "label", "defaultInputValue", "inputValue"]);

    var selectedItem;
    var initialSelectedItem = null;

    if (this.state.isControlled) {
      selectedItem = this.getItem(label, value);
    } else {
      initialSelectedItem = this.getItem(defaultLabel, defaultValue);
    }

    return /*#__PURE__*/React.createElement(Downshift, _extends({}, rest, {
      initialSelectedItem: initialSelectedItem,
      selectedItem: selectedItem,
      initialInputValue: defaultInputValue,
      inputValue: inputValue,
      itemToString: itemToString,
      onChange: this.handleChange
    }), function (downshift) {
      return children(_this2.getChildrenData(downshift));
    });
  };

  return SelectState;
}(PureComponent);
SelectState.displayName = 'SelectState';
SelectState.defaultProps = {
  disabled: false,
  itemToString: defaultItemToString,
  children: renderNothing,
  onChange: noop,
  defaultInputValue: undefined,
  inputValue: undefined,
  defaultValue: undefined,
  value: undefined,
  defaultLabel: undefined,
  filterFn: defaultFilter,
  label: undefined,
  preserveOptionsOrder: false,
  options: null
};
SelectState.defaultFilterFn = defaultFilter;