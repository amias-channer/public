/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { css, get } from '@styled-system/css';
import { Color, ElevationLevel, UnifiedElevationLevel } from "../constants";
import { createShadow } from "./create-shadow";

function createButtonElevation(getBackground) {
  return function (props) {
    var _props$theme;

    if (props.disabled) return null;
    if (!props.elevation && !props.elevated) return null;
    var background = getBackground(props);
    var isWhite = background === Color.WHITE;
    var color = isWhite ? Color.BLACK : background;

    if (props.elevated) {
      var _level = isWhite ? UnifiedElevationLevel.L_200 : UnifiedElevationLevel.L_500;

      return css({
        boxShadow: createShadow(color, _level),
        '&:active': {
          boxShadow: 'none'
        }
      });
    }

    var elevations = ((_props$theme = props.theme) == null ? void 0 : _props$theme.elevations) || {};
    var scale = Object.keys(elevations).map(Number);
    var level = props.elevation === true || props.elevation === 'default' ? ElevationLevel.ABOVE : props.elevation;
    if (level == null || level === false) return null;
    var levelIndex = scale.indexOf(level);
    var hoverLevel = scale[levelIndex === scale.length - 1 ? levelIndex - 1 : levelIndex + 1];
    var defaultShadow = {
      boxShadow: createShadow(color, level)
    };
    var hoverShadow = {
      boxShadow: createShadow(color, hoverLevel)
    };
    return css(_extends({}, defaultShadow, {
      '&:hover': hoverShadow,
      '&:active': defaultShadow
    }));
  };
}

function findBackgroundColor(key) {
  return function (props) {
    var _props$theme$key;

    var styles = (_props$theme$key = props.theme[key]) == null ? void 0 : _props$theme$key[props.variant];

    if (typeof (styles == null ? void 0 : styles.backgroundColor) === 'string') {
      return styles.backgroundColor;
    }

    if (typeof (styles == null ? void 0 : styles.variant) === 'string') {
      var variant = get(props.theme, styles.variant);
      return variant == null ? void 0 : variant.backgroundColor;
    }
  };
}

export var buttonElevation = createButtonElevation(findBackgroundColor('buttonStyles'));
export var circleButtonElevation = createButtonElevation(findBackgroundColor('circleButtonStyles'));