/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { isBreakpointTheme, isString, splitUnit } from "../utils";
var ALL = '*';
var DIVIDER = '-';

var isAll = function isAll(input) {
  return isString(input) && input.length > 0 ? input !== ALL : false;
};

var mobileFirst = function mobileFirst(input) {
  if (isAll(input)) {
    return "(min-width: " + input + ")";
  }

  return false;
};

var desktopFirst = function desktopFirst(input) {
  if (isAll(input)) {
    var _splitUnit = splitUnit(input),
        value = _splitUnit[0],
        _splitUnit$ = _splitUnit[1],
        unit = _splitUnit$ === void 0 ? 'px' : _splitUnit$;

    return "(max-width: " + (value - 1) + unit + ")";
  }

  return false;
};

var composeMedia = function composeMedia() {
  for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {
    input[_key] = arguments[_key];
  }

  return input.filter(Boolean).join(' and ');
};

/**
 * @example
 * import { mq } from 'revolut-ui-kit'
 *
 * const Box = styled.div`
 *   \@media ${mq('sm-md')} {
 *     background-color: blue;
 *   }
 *   \@media ${mq('md')} {
 *     background-color: red;
 *   }
 *   \@media ${mq('*-sm')} {
 *     background-color: yellow;
 *   }
 * `
 *
 * <Box />
 * // → @media screen and (min-width: 400px) and (max-width: 719px) { background-color: blue; }
 * // → @media screen and (min-width: 720px) { background-color: red; }
 * // → @media screen and (max-width: 399px) { background-color: yellow; }
 */
export function mq(key, base) {
  if (base === void 0) {
    base = 'screen';
  }

  var keys = isString(key) ? key.split(DIVIDER) : [key];
  return function (props) {
    var breakpoints = isBreakpointTheme(props.theme) ? props.theme.breakpoints : null;

    if (breakpoints) {
      var _keys$map = keys.map(function (bp) {
        return breakpoints[bp];
      }),
          start = _keys$map[0],
          end = _keys$map[1];

      return composeMedia(base, mobileFirst(start), desktopFirst(end));
    }

    return composeMedia(base);
  };
}