/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

import { isFunction } from "../utils";

var addUnitToNumber = function addUnitToNumber(input, unit) {
  return typeof input === 'number' && typeof unit === 'string' ? input + unit : input;
};
/**
 * @example
 * import { prop } from 'revolut-ui-kit'
 *
 * const Box = styled.div`
 *  border-color: ${prop('borderColor', 'black')};
 *  color: ${prop('color', themeGet('colors.primary'))};
 *  background-color: ${prop('bg')};
 *  width: ${prop('width', '100%', 'px')};
 * `
 *
 * <Box bg='red' /> // → background-color: red; color: #0000FF; border-color: black; width: 100%;
 * <Box color='blue' /> // → color: blue; border-color: black; width: 100%;
 * <Box color={themeGet('colors.grey')} /> // → color: #fefefe; border-color: black; width: 100%;
 * <Box width={300} /> // → color: #fefefe; border-color: black; width: 300px;
 */


export var prop = function prop(propName, fallback, unit) {
  return function (props) {
    var input = props[propName];
    var result;

    if (input == null) {
      result = isFunction(fallback) ? fallback(props) : fallback;
    } else {
      result = isFunction(input) ? input(props) : input;
    }

    return addUnitToNumber(result, unit);
  };
};