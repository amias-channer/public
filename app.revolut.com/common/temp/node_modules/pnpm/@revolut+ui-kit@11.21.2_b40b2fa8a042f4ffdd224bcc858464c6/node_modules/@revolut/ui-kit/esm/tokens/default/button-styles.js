/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _extends2;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { darken, lighten, mix, opacify, rem, rgba, tint } from 'polished';
import { ButtonVariant, Color, DARK_COLORS, LIGHT_COLORS, Radius, Size, Space, TRANSPARENT_COLORS, Transition } from "../../constants";
import { createColorVariants } from "../../styles";
var BUTTON_COLOR_STYLES = createColorVariants(function (name) {
  if (TRANSPARENT_COLORS.includes(name)) {
    return {
      boxShadow: 'none',
      backgroundColor: name,
      color: function color(theme) {
        return DARK_COLORS.includes(name) ? Color.WHITE : rgba(theme.colors[name], 1);
      },
      transition: function transition(theme) {
        var _theme$transitions;

        return (_theme$transitions = theme.transitions) == null ? void 0 : _theme$transitions[Transition.BACKGROUND];
      },
      '&:hover': {
        backgroundColor: function backgroundColor(theme) {
          return opacify(0.05, theme.colors[name]);
        }
      },
      '&:active': {
        backgroundColor: function backgroundColor(theme) {
          return opacify(0.1, theme.colors[name]);
        }
      },
      '&:disabled, &[aria-disabled=true]': {
        color: function color(theme) {
          return rgba(theme.colors[name], 0.5);
        }
      }
    };
  }

  var textColor = LIGHT_COLORS.includes(name) ? Color.BLACK : Color.WHITE;
  return {
    color: textColor,
    backgroundColor: name,
    transition: function transition(theme) {
      var _theme$transitions2;

      return (_theme$transitions2 = theme.transitions) == null ? void 0 : _theme$transitions2[Transition.BUTTON];
    },
    '&:hover': {
      backgroundColor: function backgroundColor(theme) {
        return darken(0.08, theme.colors[name]);
      }
    },
    '&:active': {
      backgroundColor: function backgroundColor(theme) {
        return darken(0.01, theme.colors[name]);
      }
    },
    '&:disabled, &[aria-disabled=true]': {
      backgroundColor: function backgroundColor(theme) {
        return name === Color.BLACK ? rgba(theme.colors[name], 0.5) : lighten(0.2, theme.colors[name]);
      },
      color: function color(theme) {
        return rgba(theme.colors[textColor], 0.5);
      }
    }
  };
});
var TILE_BUTTON_STYLE = {
  variant: 'buttonStyles.white',
  '&:hover': {
    backgroundColor: function backgroundColor(theme) {
      return tint(0.9, theme.colors[Color.PRIMARY]);
    }
  }
};
var OUTLINE_BUTTON_STYLE = {
  border: '1px solid',
  transition: function transition(theme) {
    var _theme$transitions3;

    return (_theme$transitions3 = theme.transitions) == null ? void 0 : _theme$transitions3[Transition.OPACITY];
  },
  '&:hover': {
    opacity: 0.8
  },
  '&:disabled, &[aria-disabled=true]': {
    opacity: 0.5
  }
};
var NAVIGATION_BUTTON_STYLE = {
  size: [Size.BUTTON_XS, null, Size.BUTTON_MD_PLUS],
  paddingX: [Space.NONE, null, Space.S_8],
  color: Color.GREY_TONE_50,
  transition: function transition(theme) {
    var _theme$transitions4;

    return (_theme$transitions4 = theme.transitions) == null ? void 0 : _theme$transitions4[Transition.TEXT];
  },
  boxShadow: function boxShadow(theme) {
    return [null, null, "inset 0 0 0 1px " + theme.colors[Color.TRANSPARENT_GREY_90]];
  },
  '&:disabled, &[aria-disabled=true]': {
    color: function color(theme) {
      return rgba(theme.colors[Color.GREY_TONE_50], 0.5);
    }
  },
  '&:hover, &:active': {
    color: Color.GREY_35
  },
  '&:focus': {
    boxShadow: function boxShadow(theme) {
      return [null, null, "inset 0 0 0 1px " + theme.colors[Color.PRIMARY]];
    }
  }
};
var DEFAULT_BUTTON_STYLE = {
  variant: "buttonStyles." + Color.BLUE
};
var TEXT_BUTTON_STYLE = {
  variant: "textButtonStyles." + Color.BLUE
};

var BAR_BUTTON_STYLE = _extends({
  variant: 'textStyles.secondary'
}, BUTTON_COLOR_STYLES[Color.BLUE], {
  height: ['auto', null, 'auto'],
  width: 'max-content',
  paddingX: [Space.S_8, null, Space.S_8],
  paddingY: Space.S_8,
  lineHeight: rem(16),
  borderRadius: Radius.BUTTON_BAR
});

var NEGATIVE_BUTTON_STYLE = _extends({}, BUTTON_COLOR_STYLES[Color.RED_ACTION_BACKGROUND], {
  color: Color.RED,
  '&:hover': {
    backgroundColor: function backgroundColor(theme) {
      return mix(0.02, theme.colors[Color.BACKGROUND], theme.colors[Color.RED_ACTION_BACKGROUND]);
    }
  },
  '&:active': {
    backgroundColor: function backgroundColor(theme) {
      return mix(0.9, theme.colors[Color.BACKGROUND], theme.colors[Color.RED]);
    }
  },
  '&:disabled, &[aria-disabled=true]': {
    color: function color(theme) {
      return rgba(theme.colors[Color.RED], 0.5);
    },
    backgroundColor: function backgroundColor(theme) {
      return mix(0.95, theme.colors[Color.BACKGROUND], theme.colors[Color.RED]);
    }
  }
});

export var BUTTON_STYLES = _extends((_extends2 = {}, _extends2[ButtonVariant.DEFAULT] = DEFAULT_BUTTON_STYLE, _extends2[ButtonVariant.TEXT] = TEXT_BUTTON_STYLE, _extends2[ButtonVariant.BAR] = BAR_BUTTON_STYLE, _extends2[ButtonVariant.NEGATIVE] = NEGATIVE_BUTTON_STYLE, _extends2[ButtonVariant.TILE] = TILE_BUTTON_STYLE, _extends2[ButtonVariant.NAVIGATION] = NAVIGATION_BUTTON_STYLE, _extends2[ButtonVariant.OUTLINE] = OUTLINE_BUTTON_STYLE, _extends2), BUTTON_COLOR_STYLES);