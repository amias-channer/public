/**
* Copyright 2018-present Revolut LTD
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
**/

var _BUTTON_STYLES;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { mix, rem, rgba } from 'polished';
import { ButtonVariant, Color, Radius, Space, Transition, UnifiedColorMode } from "../../constants";
var BASE_BUTTON_STYLE = {
  transition: function transition(theme) {
    var _theme$transitions;

    return (_theme$transitions = theme.transitions) == null ? void 0 : _theme$transitions[Transition.BUTTON];
  }
};
var TEXT_BUTTON_STYLE = {
  variant: "textButtonStyles." + Color.BLUE
};

var DEFAULT_BUTTON_STYLE = _extends({}, BASE_BUTTON_STYLE, {
  color: Color.WHITE,
  backgroundColor: Color.BLUE,
  '&:hover': {
    backgroundColor: function backgroundColor(theme) {
      return mix(0.08, theme.colors[Color.BLACK], theme.colors[Color.BLUE]);
    }
  },
  '&:active': {
    backgroundColor: function backgroundColor(theme) {
      return mix(0.15, theme.colors[Color.BLACK], theme.colors[Color.BLUE]);
    }
  },
  '&:disabled, &[aria-disabled=true]': {
    color: function color(theme) {
      return theme.mode === UnifiedColorMode.DARK ? theme.colors[Color.WHITE_20] : theme.colors[Color.WHITE_50];
    },
    backgroundColor: function backgroundColor(theme) {
      return mix(0.8, theme.colors[Color.GROUPED_BACKGROUND], theme.colors[Color.BLUE]);
    }
  }
});

var SECONDARY_BUTTON_STYLE = _extends({}, BASE_BUTTON_STYLE, {
  color: function color(_ref) {
    var isPhotoHeader = _ref.isPhotoHeader;
    return isPhotoHeader ? Color.ACTION_PHOTO_HEADER_TEXT : Color.BLUE;
  },
  backgroundColor: function backgroundColor(_ref2) {
    var isPhotoHeader = _ref2.isPhotoHeader;
    return isPhotoHeader ? Color.ACTION_PHOTO_HEADER_BACKGROUND : Color.ACTION_BACKGROUND;
  },
  '&:hover': {
    backgroundColor: function backgroundColor(_ref3) {
      var isPhotoHeader = _ref3.isPhotoHeader,
          colors = _ref3.colors;
      return mix(0.03, colors[Color.BLACK], isPhotoHeader ? colors[Color.ACTION_PHOTO_HEADER_BACKGROUND] : colors[Color.ACTION_BACKGROUND]);
    }
  },
  '&:active': {
    backgroundColor: function backgroundColor(_ref4) {
      var isPhotoHeader = _ref4.isPhotoHeader,
          colors = _ref4.colors;
      return mix(0.06, colors[Color.BLACK], isPhotoHeader ? colors[Color.ACTION_PHOTO_HEADER_BACKGROUND] : colors[Color.ACTION_BACKGROUND]);
    }
  },
  '&:disabled, &[aria-disabled=true]': {
    color: function color(_ref5) {
      var isPhotoHeader = _ref5.isPhotoHeader,
          colors = _ref5.colors;
      return isPhotoHeader ? rgba(colors[Color.ACTION_PHOTO_HEADER_TEXT], 0.3) : colors[Color.BLUE_30];
    },
    backgroundColor: function backgroundColor(theme) {
      return mix(0.4, theme.colors[Color.GROUPED_BACKGROUND], theme.colors[Color.ACTION_BACKGROUND]);
    }
  }
});

var BLACK_BUTTON_STYLE = _extends({}, BASE_BUTTON_STYLE, {
  color: Color.WHITE,
  backgroundColor: Color.BLACK,
  '&:hover': {
    backgroundColor: function backgroundColor(theme) {
      return mix(0.05, theme.colors[Color.WHITE], theme.colors[Color.BLACK]);
    }
  },
  '&:active': {
    backgroundColor: function backgroundColor(theme) {
      return mix(0.08, theme.colors[Color.WHITE], theme.colors[Color.BLACK]);
    }
  },
  '&:disabled, &[aria-disabled=true]': {
    color: Color.WHITE_30
  }
});

var WHITE_BUTTON_STYLE = _extends({}, BASE_BUTTON_STYLE, {
  color: Color.BLACK,
  backgroundColor: Color.WHITE,
  '&:hover': {
    backgroundColor: function backgroundColor(theme) {
      return mix(0.02, theme.colors[Color.BLACK], theme.colors[Color.WHITE]);
    }
  },
  '&:active': {
    backgroundColor: function backgroundColor(theme) {
      return mix(0.03, theme.colors[Color.BLACK], theme.colors[Color.WHITE]);
    }
  },
  '&:disabled, &[aria-disabled=true]': {
    color: Color.BLACK_30
  }
});

var NEGATIVE_BUTTON_STYLE = _extends({}, BASE_BUTTON_STYLE, {
  color: Color.RED,
  backgroundColor: Color.INPUT_ERROR,
  '&:hover': {
    backgroundColor: function backgroundColor(theme) {
      return mix(0.05, theme.colors[Color.BLACK], theme.colors[Color.INPUT_ERROR]);
    }
  },
  '&:active': {
    backgroundColor: function backgroundColor(theme) {
      return mix(0.08, theme.colors[Color.BLACK], theme.colors[Color.INPUT_ERROR]);
    }
  },
  '&:disabled, &[aria-disabled=true]': {
    color: Color.RED_30
  }
});

var BAR_BUTTON_STYLE = _extends({}, BASE_BUTTON_STYLE, {
  variant: 'textStyles.h6'
}, DEFAULT_BUTTON_STYLE, {
  height: ['auto', null, 'auto'],
  width: 'max-content',
  paddingX: [Space.S_8, null, Space.S_8],
  paddingY: Space.S_8,
  lineHeight: rem(16),
  borderRadius: Radius.BUTTON_BAR
});

export var BUTTON_STYLES = (_BUTTON_STYLES = {}, _BUTTON_STYLES[ButtonVariant.DEFAULT] = DEFAULT_BUTTON_STYLE, _BUTTON_STYLES[ButtonVariant.SECONDARY] = SECONDARY_BUTTON_STYLE, _BUTTON_STYLES[ButtonVariant.BLACK] = BLACK_BUTTON_STYLE, _BUTTON_STYLES[ButtonVariant.WHITE] = WHITE_BUTTON_STYLE, _BUTTON_STYLES[ButtonVariant.NEGATIVE] = NEGATIVE_BUTTON_STYLE, _BUTTON_STYLES[ButtonVariant.TEXT] = TEXT_BUTTON_STYLE, _BUTTON_STYLES[ButtonVariant.BAR] = BAR_BUTTON_STYLE, _BUTTON_STYLES);